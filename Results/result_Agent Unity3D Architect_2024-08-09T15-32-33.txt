// Assets\Invector-3rdPersonController\Melee Combat\Scripts\MeleeWeapon\Editor\vDamageDrawer.cs
using System;
using System.Collections;
using UnityEditor;
using UnityEngine;

namespace Invector.vMelee
{
    [CustomPropertyDrawer(typeof(vDamage))]
    public class vDamageDrawer : PropertyDrawer
    {
        public bool isOpen;
        public bool valid;
        GUISkin skin;
        float helpBoxHeight;

        public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
        {
            var oldSkin = GUI.skin;
            if (!skin) skin = Resources.Load("vSkin") as GUISkin;
            if (skin) GUI.skin = skin;
            position = EditorGUI.IndentedRect(position);
            GUI.Box(position, "");
            position.width -= 10;
            position.height = 15;
            position.y += 5f;
            position.x += 5;
            isOpen = GUI.Toggle(position, isOpen, "Damage Options", EditorStyles.miniButton);

            if (isOpen)
            {
                position.y += 20;
                position.height = EditorGUIUtility.singleLineHeight;

                var attackName = property.FindPropertyRelative("damageType");
                EditorGUI.PropertyField(position, attackName);

                position.y += EditorGUIUtility.singleLineHeight + 2;
                var value = property.FindPropertyRelative("damageValue");
                EditorGUI.PropertyField(position, value);

                position.y += EditorGUIUtility.singleLineHeight + 2;
                var staminaBlockCost = property.FindPropertyRelative("staminaBlockCost");
                EditorGUI.PropertyField(position, staminaBlockCost);

                position.y += EditorGUIUtility.singleLineHeight + 2;
                var staminaRecoveryDelay = property.FindPropertyRelative("staminaRecoveryDelay");
                EditorGUI.PropertyField(position, staminaRecoveryDelay);

                position.y += EditorGUIUtility.singleLineHeight + 2;
                var ignoreDefense = property.FindPropertyRelative("ignoreDefense");
                EditorGUI.PropertyField(position, ignoreDefense);

                position.y += EditorGUIUtility.singleLineHeight + 2;
                var activeRagdoll = property.FindPropertyRelative("activeRagdoll");
                EditorGUI.PropertyField(position, activeRagdoll);

                position.y += EditorGUIUtility.singleLineHeight + 2;
                var senselessTime = property.FindPropertyRelative("senselessTime");
                EditorGUI.PropertyField(position, senselessTime);

                position.y += EditorGUIUtility.singleLineHeight + 2;
                var hitHeight = property.FindPropertyRelative("hitHeight");
                EditorGUI.PropertyField(position, hitHeight);

                position.y += EditorGUIUtility.singleLineHeight + 2;
                var senderNetworkObjectID = property.FindPropertyRelative("senderNetworkObjectID");
                EditorGUI.PropertyField(position, senderNetworkObjectID);

                position.y += EditorGUIUtility.singleLineHeight + 2;
                var hitPosition = property.FindPropertyRelative("hitPosition");
                EditorGUI.PropertyField(position, hitPosition);

                position.y += EditorGUIUtility.singleLineHeight + 2;
                var IsCriticalDamage = property.FindPropertyRelative("IsCriticalDamage");
                EditorGUI.PropertyField(position, IsCriticalDamage);

                position.y += EditorGUIUtility.singleLineHeight + 2;
                var hitReaction = property.FindPropertyRelative("hitReaction");
                EditorGUI.PropertyField(position, hitReaction);

                position.y += EditorGUIUtility.singleLineHeight + 2;
                var IsShowDamage = property.FindPropertyRelative("IsShowDamage");
                EditorGUI.PropertyField(position, IsShowDamage);

                position.y += EditorGUIUtility.singleLineHeight + 2;
                var recoil_id = property.FindPropertyRelative("recoil_id");
                EditorGUI.PropertyField(position, recoil_id);

                position.y += EditorGUIUtility.singleLineHeight + 2;
                var reaction_id = property.FindPropertyRelative("reaction_id");
                EditorGUI.PropertyField(position, reaction_id);

                position.y += EditorGUIUtility.singleLineHeight + 2;
                var type = property.FindPropertyRelative("type");
                EditorGUI.PropertyField(position, type);

                position.y += EditorGUIUtility.singleLineHeight + 2;
                var force = property.FindPropertyRelative("force");
                EditorGUI.PropertyField(position, force);

                position.y += EditorGUIUtility.singleLineHeight + 2;
                var abilityId = property.FindPropertyRelative("abilityId");
                EditorGUI.PropertyField(position, abilityId);

                position.y += EditorGUIUtility.singleLineHeight + 2;
                var weaponItemId = property.FindPropertyRelative("weaponItemId");
                EditorGUI.PropertyField(position, weaponItemId);

                position.y += EditorGUIUtility.singleLineHeight + 2;
                var canCrit = property.FindPropertyRelative("canCrit");
                EditorGUI.PropertyField(position, canCrit);

                var obj = (property.serializedObject.targetObject as MonoBehaviour);

                valid = true;
                if (obj != null)
                {
                    var parent = obj.transform.parent;
                    if (parent != null)
                    {
                        var manager = parent.GetComponentInParent<vMeleeManager>();
                        valid = !(obj.GetType() == typeof(vMeleeWeapon) || obj.GetType().IsSubclassOf(typeof(vMeleeWeapon))) || manager == null;
                    }
                }

                if (!valid)
                {
                    position.y += 20;
                    var style = new GUIStyle(EditorStyles.helpBox);
                    var content = new GUIContent("Damage type and other options can be overridden by the Animator Attack State\nIf the weapon is used by a character with an ItemManager, the damage value can be overridden by the item attribute");
                    helpBoxHeight = style.CalcHeight(content, position.width);
                    position.height = helpBoxHeight;
                    GUI.Box(position, content.text, style);
                    position.y += helpBoxHeight - 20;
                }                
            }

            GUI.skin = oldSkin;
        }

        public override float GetPropertyHeight(SerializedProperty property, GUIContent label)
        {
            return !isOpen ? 25 : (valid ? 650 : 770 + helpBoxHeight);
        }
    }
}