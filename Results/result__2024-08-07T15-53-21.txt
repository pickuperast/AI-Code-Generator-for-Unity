```C#
using System.Linq;
using UnityEditor;
using UnityEngine;

namespace _ZombieRoyale.Scripts.Dungeon
{
    [CustomEditor(typeof(DungeonHolderNetworked))]
    public class DungeonHolderNetworkedEditor : Editor
    {
        private DungeonHolderNetworked _dungeonHolderNetworked;

        private void OnEnable()
        {
            _dungeonHolderNetworked = target as DungeonHolderNetworked;
        }

        public override void OnInspectorGUI()
        {
            base.OnInspectorGUI();
            if (_dungeonHolderNetworked == null)
            {
                return;
            }
            GUILayout.Space(20);
            EditorGUILayout.LabelField($"ServerUptime: {_dungeonHolderNetworked.ServerUptime:2}", EditorStyles.boldLabel);
            GUILayout.Space(5);

            if (_dungeonHolderNetworked.RoomInfosDict == null || _dungeonHolderNetworked.RoomInfosDict.Count == 0)
            {
                EditorGUILayout.LabelField("RoomInfosDict is empty.", EditorStyles.boldLabel);
                return;
            }

            // Define table headers
            string[] headers = { "Room Id", "Collapsing Time", "Room Active", "Helper: Is Room Active In", "Helper: Seconds To Collapse" };

            // Get room information in order
            var roomInfos = _dungeonHolderNetworked.RoomInfosDict.Values.OrderBy(x => x.RoomId).ToArray();
            int rowCount = roomInfos.Length;

            // Draw table header
            EditorGUILayout.BeginHorizontal();
            foreach (string header in headers)
            {
                GUILayout.Label(header, EditorStyles.boldLabel, GUILayout.Width(150));
            }
            EditorGUILayout.EndHorizontal();

            // Draw table rows
            for (int i = 0; i < rowCount; i++)
            {
                EditorGUILayout.BeginHorizontal();

                // Room Id
                GUILayout.Label(roomInfos[i].RoomId.ToString(), GUILayout.Width(150));

                // Collapsing Time
                GUILayout.Label(roomInfos[i].CollapsingTime.ToString("F2"), GUILayout.Width(150));

                // Get DungeonRoomInfo for helper information
                var roomInfo = _dungeonHolderNetworked.GetRoomInfo(i);

                // Room Active
                string isActive = roomInfo.collapsingTimer.RoomIsActive ? "True" : "False";
                GUILayout.Label(isActive, GUILayout.Width(150));

                // Helper: Is Room Active In
                GUILayout.Label(roomInfo.collapsingTimer.IsRoomActiveIn.ToString(), GUILayout.Width(150));

                // Helper: Seconds To Collapse
                GUILayout.Label(roomInfo.collapsingTimer.SecondsToCollapse.ToString("F2"), GUILayout.Width(150));

                EditorGUILayout.EndHorizontal();
            }
        }
    }
}
```

**Explanation:**

1. **Import necessary namespaces:**
   - `using System.Linq;` for the `OrderBy` method.
   - `using UnityEditor;` for the `CustomEditor` attribute and other editor functions.
   - `using UnityEngine;` for general Unity functionality.

2. **Define the custom editor class:**
   - `[CustomEditor(typeof(DungeonHolderNetworked))]` indicates this class is a custom editor for the `DungeonHolderNetworked` script.

3. **Declare a private variable for the target component:**
   - `private DungeonHolderNetworked _dungeonHolderNetworked;`

4. **Implement `OnEnable()`:**
   - In `OnEnable()`, we cast the `target` to `DungeonHolderNetworked` to get the instance of the script we are editing.

5. **Override `OnInspectorGUI()`:**
   - This is where the custom inspector code goes.

6. **Draw the default inspector:**
   - `base.OnInspectorGUI();` draws the standard inspector fields.

7. **Add a space for visual separation:**
   - `GUILayout.Space(20);` adds a 20-pixel gap.

8. **Display the ServerUptime:**
   - `EditorGUILayout.LabelField($"ServerUptime: {_dungeonHolderNetworked.ServerUptime:2}", EditorStyles.boldLabel);` shows the server uptime with a bold label.

9. **Handle empty `RoomInfosDict`:**
   - `if (_dungeonHolderNetworked.RoomInfosDict == null || _dungeonHolderNetworked.RoomInfosDict.Count == 0)` checks if the dictionary is empty.
   - If it's empty, it shows a message: `EditorGUILayout.LabelField("RoomInfosDict is empty.", EditorStyles.boldLabel);`.

10. **Define table headers:**
   - `string[] headers = { "Room Id", "Collapsing Time", "Room Active", "Helper: Is Room Active In", "Helper: Seconds To Collapse" };` defines the column headers for the table.

11. **Get room information and sort:**
   - `var roomInfos = _dungeonHolderNetworked.RoomInfosDict.Values.OrderBy(x => x.RoomId).ToArray();` retrieves the values from the dictionary and sorts them by `RoomId`.
   - `int rowCount = roomInfos.Length;` gets the total number of rows.

12. **Draw table header:**
   - `EditorGUILayout.BeginHorizontal();` starts a horizontal layout.
   - Iterate through `headers` and use `GUILayout.Label` to display each header with bold label style and a fixed width of 150 pixels.
   - `EditorGUILayout.EndHorizontal();` ends the horizontal layout.

13. **Draw table rows:**
   - Use a `for` loop to iterate through the `roomInfos` array.
   - `EditorGUILayout.BeginHorizontal();` starts a horizontal layout for each row.
   - For each row:
     - Display the `RoomId` using `GUILayout.Label`.
     - Display the `CollapsingTime` using `GUILayout.Label` with formatting.
     - Call `_dungeonHolderNetworked.GetRoomInfo(i)` to retrieve the `DungeonRoomInfo` for the current row.
     - Use `GUILayout.Label` to display the `RoomIsActive` status (True/False).
     - Display `IsRoomActiveIn` and `SecondsToCollapse` using `GUILayout.Label`.
   - `EditorGUILayout.EndHorizontal();` ends the horizontal layout for the row.

**Key Points:**

- This editor script now displays the data from `_roomInfosDict` in a table format.
- It includes additional columns with helper information, like "Is Room Active In" and "Seconds To Collapse," making it easier to debug and test room collapse logic.
- The table is sorted by `RoomId`, making it more organized.
- The script handles cases where the dictionary is empty or null, preventing errors.

This script makes it much easier for you to visualize and inspect the data stored in `_roomInfosDict` during runtime, enhancing your debugging and development process.