// Assets\-ZombieRoyale\Scripts\LLM AI\Personality\Personality.cs:
 using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using UnityEngine;
using System.Text;
using Newtonsoft.Json;

public class Personality : MonoBehaviour, IDescribable
{
    [Header("Character Attributes")]

    [Tooltip("The PersonalityDefinition to use for this character.")]
    [SerializeField] private PersonalityDefinition mPersonalityDefinition;
    private List<string> mTasks = new List<string>();
    private PersonalityManager mPersonalityController;
    private string[] mDescriptions;
    private string mPersonalityPrompt;
    private StringBuilder mBuilder;
    private GptCommunicator mGpt;
    private Hearing mHearing;
    public delegate void SayToOthers(Personality speaker, string statment);
    public event SayToOthers onSayToOthers;
    private IDescribable mLookingAt;
    private Vision mVision;
    private string mRole;
    private List<GptCommunicator.Message> mMessages;
    private string mSurroundings;
    private float mLastStatementWait;
    private float mLastStatementTime;
    private string mSummary;

    /** Accessors/Setters **/
    public string CharacterName 
    { 
        get => mPersonalityDefinition.CharacterName; 
        set => mPersonalityDefinition.CharacterName = value; 
    }
    public string BackStory { get => mPersonalityDefinition.BackStory; set => mPersonalityDefinition.BackStory = value; }
    public float Temperature { get => mPersonalityDefinition.Temperature; }
    public float PresencePenalty { get => mPersonalityDefinition.PresencePenalty; }
    public float FrequencyPenalty { get => mPersonalityDefinition.FrequencyPenalty; }
    public int Openness { get => mPersonalityDefinition.Openness; set => mPersonalityDefinition.Openness = value; }
    public int Conscientiousness 
    { 
        get => mPersonalityDefinition.Conscientiousness;
        set => mPersonalityDefinition.Conscientiousness = value;
    }
    public int Extraversion 
    { 
        get => mPersonalityDefinition.Extraversion;
        set => mPersonalityDefinition.Extraversion = value;
    }
    public int Agreeableness 
    { 
        get => mPersonalityDefinition.Agreeableness;
        set => mPersonalityDefinition.Agreeableness = value;
    }
    public int Neroticsm { get => mPersonalityDefinition.Neroticsm; set => mPersonalityDefinition.Neroticsm = value; }
    public int Happiness { get => mPersonalityDefinition.Happiness; set => mPersonalityDefinition.Happiness = value; }
    public int Anger { get => mPersonalityDefinition.Anger; set => mPersonalityDefinition.Anger = value; }
    public int Sarcasm { get => mPersonalityDefinition.Sarcasm; set => mPersonalityDefinition.Sarcasm = value; }
    public string[] Secrets { get => mPersonalityDefinition.Secrets; set => mPersonalityDefinition.Secrets = value; }
    public string[] ShirtSleeve { get => mPersonalityDefinition.ShirtSleeve; set => mPersonalityDefinition.ShirtSleeve = value; }
    public IDescribable LookingAt
    {
        get => mLookingAt;
        set => mLookingAt = value;
    }
    public string[] Descriptions { get => mDescriptions; }
    public List<GptCommunicator.Message> Messages { get => mMessages; }
    public bool Verbose { get => mPersonalityDefinition.Verbose; }
    public string Summary { get => mSummary; }
    public string Tasks { get => TasksDescription(); }
    public List<string> TaskList { set => mTasks = value; }
    public string Role { get => BuildRole(); }
    public string Topics { get => TopicsDescription(); }
    public string[] TopicsList { set => mTopics = value; }

    [Tooltip("Subjects this character wants to ask people and talk about.")]
    [SerializeField] private string[] mTopics;

    private void OnEnable()
    {
        InitializePersonality();
    }

    private void Start()
    {
        if (mPersonalityDefinition.mAutoActivate)
            ActivatePersonality();
    }

    private void Update()
    {
        if (mPersonalityDefinition.mMakeManualStatment)
            MakeManualStatement();
    }

    public void ActivatePersonality()
    {
        mVision.SetFov(mVision.FovHorizontal, mVision.FovVertical);
    }

    public void InitializePersonality()
    {
        mBuilder = new StringBuilder(mPersonalityDefinition.mMaxTokens * 4);
        mMessages = new List<GptCommunicator.Message>();
        mPersonalityController = FindAnyObjectByType<PersonalityManager>();
        if (mPersonalityController == null)
        {
            Debug.LogError($"ERROR: No PersonalityManager found in scene!");
        }
        mDescriptions = mPersonalityController.GenerateNewPersonality(this);
        mBuilder.Clear();
        foreach (string aspect in mDescriptions)
        {
            mBuilder.Append($"{aspect}");
        }
        mPersonalityPrompt = mBuilder.ToString();
        mVision = GetComponentInChildren<Vision>();
        if (mVision == null)
        {
            //Debug.LogError($"ERROR: Character {mCharacterName} has no vision" + $" component!");
        }
        mGpt = FindFirstObjectByType<GptCommunicator>();
        if (mGpt == null)
        {
            //Debug.LogError($"ERROR: Gpt communicator not found in scene!");
        }
        mRole = BuildRole();
        SetSystemPrompt(mRole);
        mHearing = gameObject.GetComponentInChildren<Hearing>();
        mSummary = mPersonalityController.GenerateSummary(this);
    }

    private string BuildRole()
    {
        mRole = $" {Defines.ROLE_HEAD} {CharacterName} with this backstory: {BackStory}" +
            $"{Defines.ROLE_MID} {mPersonalityPrompt} " +
            $"{Tasks}{Topics}{Defines.ROLE_TAIL} {Defines.DIALOGUE_RULE}";
        
        //Debug.Log($"{mCharacterName} is using the following role:" + $"\n\"{mRole}\"");
        return mRole;
    }

    private string TopicsDescription()
    {
        string description = "";

        if (mTopics.Length > 0)
        {
            mBuilder.Clear();
            mBuilder.Append($"{Defines.TOPICS_HEAD} ");
            if (mTopics.Length > 1)
            {
                for (int i = 0; i < mTopics.Length; i++)
                {
                    mBuilder.Append(mTopics[i]);
                    if (i < mTopics.Length - 1)
                        mBuilder.Append(Defines.LIST_TAIL);
                    else
                        mBuilder.Append(Defines.END_TAIL);
                }
            }
            else
                mBuilder.Append($"{mTopics[0]}{Defines.END_TAIL}");
            description = mBuilder.ToString();
        }
        return description;
    }

    private string TasksDescription()
    {
        string description = "";

        if (mTasks.Count > 0)
        {
            mBuilder.Clear();
            mBuilder.Append($"{Defines.TASKS_HEAD} ");
            for (int i = 0; i < mTasks.Count; i++)
            {
                mBuilder.Append(mTasks[i]);
                if (i < mTasks.Count - 1)
                    mBuilder.Append(Defines.LIST_TAIL);
                else
                    mBuilder.Append(Defines.END_TAIL);
            }
            description = mBuilder.ToString();
        }
        return description;
    }

    public void AssessSurroundings()
    {
        string assessment = DescribeVisualSurroundings();
        if(!assessment.Equals(string.Empty))
            mGpt.RequestVisualQueuePrompt(assessment, this, SayOutLoud);
        Debug.Log($"{mPersonalityDefinition.mCharacterName} {Defines.ASSESS_MID}{assessment}");
    }

    public void SetSystemPrompt(string prompt)
    {
        GptCommunicator.Message system = new GptCommunicator.Message
        {
            role = "system",
            content = prompt
        };

        if (mMessages.Count > 0)
            mMessages.RemoveAt(0);
        mMessages.Insert(0, system);
        Debug.Log($"{mPersonalityDefinition.mCharacterName} is using the following role:" +
            $"\n\"{mRole}\"");
    }

    public bool IsVerbose()
    {
        return mPersonalityDefinition.Verbose;
    }

    private void MakeManualStatement()
    {
        if (Verbose)
            Debug.Log($"{mPersonalityDefinition.mCharacterName} is making the manual statement " +
                $"\"{mPersonalityDefinition.mManualStatement}\".");
        if (mPersonalityDefinition.mManualStatement != null && mPersonalityDefinition.mManualStatement.Length > 0)
            onSayToOthers?.Invoke(this, mPersonalityDefinition.mManualStatement);
        mPersonalityDefinition.mMakeManualStatment = false;
    }

    private void SayOutLoud(string statement)
    {
        float time = Time.realtimeSinceStartup;
        float delta = time - mLastStatementTime;
        float waitSeconds = delta > mLastStatementWait ? 
            0 : Mathf.Min(mPersonalityDefinition.mMaxReplyWait, mLastStatementWait - delta);

        StartCoroutine(MakeStatement(statement, waitSeconds));
        mLastStatementTime = time;
        mLastStatementWait = statement.Length * mPersonalityDefinition.mWaitScalar;
    }

    IEnumerator MakeStatement(string statement, float waitSeconds)
    {
        yield return new WaitForSeconds(waitSeconds);
        onSayToOthers?.Invoke(this, statement);
        Debug.Log($"{mPersonalityDefinition.mCharacterName} said \"{statement}\".");
    }

    private void FollowInstructions(string instructions)
    {
    }

    public void HearFromOther(IDescribable speaker, string statement)
    {
        string prompt = $"{speaker.DescribeSelfForOther(this)} " +
            $"{Defines.HEAR_OTHER_MID} \"{statement}\"{Defines.END_TAIL}";
        if (Verbose)
            Debug.Log($"{mPersonalityDefinition.mCharacterName} heard \"{statement}\".");
        mGpt.RequestConversationalReply(prompt, this, SayOutLoud);
    }
    
    public string GeneratePromptHearFromPlayer(string statement, int questionAnswerAmount)
    {
        string prompt = $"The Player adventurer " + $"{Defines.HEAR_OTHER_MID} \"{statement}\"{Defines.END_TAIL}";
        if (Verbose) Debug.Log($"{mPersonalityDefinition.mCharacterName} heard \"{statement}\".");
        string dialogueHistory = GetDialogueHistory(questionAnswerAmount);
        string replyPrompt = $"# Previous dialogue history: {dialogueHistory}. {prompt} {Defines.REPLY_INSTRUCT}" + $"{Defines.RESPONSE_CHECK}{Defines.RESPONSE_DENY}";
        return replyPrompt;
    }

    public void HearFromNonAnimate(IDescribable noiseMaker, string noise)
    {
        mBuilder.Clear();
        mBuilder.Append($"{Defines.HEAR_NONANIM_HEAD} {noise} " +
            $"{Defines.HEAR_NONANIM_MID} {noiseMaker.DescribeSelfForOther(this)}" +
            $"{Defines.END_TAIL}");
        mBuilder.Append(DescribeVisualSurroundings());
        mGpt.RequestReactionInstructions(mBuilder.ToString(), this, FollowInstructions);
    }


    public string DescribeVisualSurroundings()
    {
        IDescribable[] seen = mVision.Seen;
        int i;
        string description = string.Empty;

        if (seen.Length > 0)
        {
            mBuilder.Clear();
            mBuilder.Append($"{Defines.SEE_HEAD} ");
            for (i = 0; i < seen.Length; i++)
            {
                if (i < seen.Length - 1)
                    mBuilder.Append($"{seen[i].DescribeSelfForOther(this)}" +
                        $"{Defines.LIST_TAIL}");
                else
                    if(seen.Length > 1)
                        mBuilder.Append($"{Defines.LIST_HEAD} " +
                            $"{seen[i].DescribeSelfForOther(this)}{Defines.END_TAIL}");
                    else
                        mBuilder.Append($"{seen[i].DescribeSelfForOther(this)}" +
                            $"{Defines.END_TAIL}");
            }
            description = mBuilder.ToString();
        }
        mSurroundings = description;
        return description;
    }

    public string DescribeSelfForOther(Personality caller)
    {
        mBuilder.Clear();
        mBuilder.Append($"{BackStory} {Defines.DESC_NAME} {CharacterName}");
        if (LookingAt != null)
            if ((object)LookingAt != caller)
                mBuilder.Append($" {Defines.LOOK_OTHER} {LookingAt}");
            else
                mBuilder.Append($" {Defines.LOOK_YOU}");
        else
            mBuilder.Append($" {Defines.LOOK_NOTH}");
        return mBuilder.ToString();
    }

    public string GetName()
    {
        return CharacterName;
    }

    public string ClearAnswer(string s)
    {
        if (s.Substring(0, 1) == "\"")
        {
            s = s.Substring(1, s.Length - 2);
        }
        return s;
    }

    [Serializable]
    public class DialogueHistoryEntry
    {
        public string Timestamp;
        public string Question;
        public string Answer;
    }
    
    public void SaveDialogueHistory(string question, string answer)
    {
        DialogueHistoryEntry entry = new DialogueHistoryEntry
        {
            Timestamp = DateTime.Now.ToString(),
            Question = question,
            Answer = answer
        };

        string filePath = Path.Combine(Application.streamingAssetsPath, "DialogueHistories", $"npc-{mPersonalityDefinition.id}.json");

        if (File.Exists(filePath))
        {
            string json = File.ReadAllText(filePath);
            List<DialogueHistoryEntry> history = JsonConvert.DeserializeObject<List<DialogueHistoryEntry>>(json);
            history.Add(entry);
            string updatedJson = JsonConvert.SerializeObject(history);
            File.WriteAllText(filePath, updatedJson);
        }
        else
        {
            List<DialogueHistoryEntry> history = new List<DialogueHistoryEntry> { entry };
            string json = JsonConvert.SerializeObject(history);
            Directory.CreateDirectory(Path.GetDirectoryName(filePath));
            File.WriteAllText(filePath, json);
        }
    }

    public string GetDialogueHistory(int qaAmount)
    {
        string filePath = Path.Combine(Application.streamingAssetsPath, "DialogueHistories", $"npc-{mPersonalityDefinition.id}.json");
        if (File.Exists(filePath))
        {
            string json = File.ReadAllText(filePath);
            List<DialogueHistoryEntry> history = JsonConvert.DeserializeObject<List<DialogueHistoryEntry>>(json);

            if (history.Count > qaAmount)
            {
                history = history.GetRange(history.Count - qaAmount, qaAmount);
            }

            StringBuilder historyString = new StringBuilder();
            foreach (DialogueHistoryEntry entry in history)
            {
                historyString.AppendLine($"Player: {entry.Question}");
                historyString.AppendLine($"{CharacterName}: {entry.Answer}");
            }
            return historyString.ToString();
        }
        return "";
    }
}