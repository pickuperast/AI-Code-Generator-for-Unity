Here's the requested script file with the structures from the API report:

// Assets/Sanat/CodeGenerator/ApiGemini/GeminiStructures.cs
using System;
using System.Collections.Generic;

namespace Sanat.ApiGemini
{
    public enum BlockReason
    {
        BLOCKED_REASON_UNSPECIFIED,
        OTHER,
        SAFETY
    }

    public enum ExecutableCodeLanguage
    {
        LANGUAGE_UNSPECIFIED,
        PYTHON
    }

    public enum FinishReason
    {
        FINISH_REASON_UNSPECIFIED,
        LANGUAGE,
        MAX_TOKENS,
        OTHER,
        RECITATION,
        SAFETY,
        STOP
    }

    public enum FunctionCallingMode
    {
        ANY,
        AUTO,
        MODE_UNSPECIFIED,
        NONE
    }

    public enum FunctionDeclarationSchemaType
    {
        ARRAY,
        BOOLEAN,
        INTEGER,
        NUMBER,
        OBJECT,
        STRING
    }

    public enum HarmBlockThreshold
    {
        BLOCK_LOW_AND_ABOVE,
        BLOCK_MEDIUM_AND_ABOVE,
        BLOCK_NONE,
        BLOCK_ONLY_HIGH,
        HARM_BLOCK_THRESHOLD_UNSPECIFIED
    }

    public enum HarmCategory
    {
        HARM_CATEGORY_DANGEROUS_CONTENT,
        HARM_CATEGORY_HARASSMENT,
        HARM_CATEGORY_HATE_SPEECH,
        HARM_CATEGORY_SEXUALLY_EXPLICIT,
        HARM_CATEGORY_UNSPECIFIED
    }

    public enum HarmProbability
    {
        HARM_PROBABILITY_UNSPECIFIED,
        HIGH,
        LOW,
        MEDIUM,
        NEGLIGIBLE
    }

    public enum Outcome
    {
        OUTCOME_DEADLINE_EXCEEDED,
        OUTCOME_FAILED,
        OUTCOME_OK,
        OUTCOME_UNSPECIFIED
    }

    public enum TaskType
    {
        CLASSIFICATION,
        CLUSTERING,
        RETRIEVAL_DOCUMENT,
        RETRIEVAL_QUERY,
        SEMANTIC_SIMILARITY,
        TASK_TYPE_UNSPECIFIED
    }

    public interface BaseParams
    {
        GenerationConfig GenerationConfig { get; set; }
        List<SafetySetting> SafetySettings { get; set; }
    }

    public interface BatchEmbedContentsRequest
    {
        List<EmbedContentRequest> Requests { get; set; }
    }

    public interface BatchEmbedContentsResponse
    {
        List<ContentEmbedding> Embeddings { get; set; }
    }

    public interface CachedContent : CachedContentBase
    {
        string CreateTime { get; set; }
        string Name { get; set; }
        string Ttl { get; set; }
        string UpdateTime { get; set; }
    }

    public interface CachedContentBase
    {
        List<Content> Contents { get; set; }
        string DisplayName { get; set; }
        string ExpireTime { get; set; }
        string Model { get; set; }
        string SystemInstruction { get; set; }
        ToolConfig ToolConfig { get; set; }
        List<Tool> Tools { get; set; }
    }

    public interface CitationMetadata
    {
        List<CitationSource> CitationSources { get; set; }
    }

    public interface CitationSource
    {
        int EndIndex { get; set; }
        string License { get; set; }
        int StartIndex { get; set; }
        string Uri { get; set; }
    }

    public interface CodeExecutionResult
    {
        Outcome Outcome { get; set; }
        string Output { get; set; }
    }

    public interface Content
    {
        List<Part> Parts { get; set; }
        string Role { get; set; }
    }

    public interface ContentEmbedding
    {
        List<float> Values { get; set; }
    }

    public interface CountTokensRequest
    {
        List<Content> Contents { get; set; }
        GenerateContentRequest GenerateContentRequest { get; set; }
    }

    public interface CountTokensResponse
    {
        int TotalTokens { get; set; }
    }

    public interface EmbedContentRequest
    {
        Content Content { get; set; }
        TaskType TaskType { get; set; }
        string Title { get; set; }
    }

    public interface EmbedContentResponse
    {
        ContentEmbedding Embedding { get; set; }
    }

    public interface ExecutableCode
    {
        string Code { get; set; }
        ExecutableCodeLanguage Language { get; set; }
    }

    public interface FileData
    {
        string FileUri { get; set; }
        string MimeType { get; set; }
    }

    public interface FunctionCall
    {
        object Args { get; set; }
        string Name { get; set; }
    }

    public interface FunctionCallingConfig
    {
        List<string> AllowedFunctionNames { get; set; }
        FunctionCallingMode Mode { get; set; }
    }

    public interface FunctionDeclaration
    {
        string Description { get; set; }
        string Name { get; set; }
        FunctionDeclarationSchema Parameters { get; set; }
    }

    public interface FunctionDeclarationSchema
    {
        string Description { get; set; }
        Dictionary<string, FunctionDeclarationSchemaProperty> Properties { get; set; }
        List<string> Required { get; set; }
        FunctionDeclarationSchemaType Type { get; set; }
    }

    public interface FunctionDeclarationSchemaProperty : Schema
    {
    }

    public interface FunctionResponse
    {
        string Name { get; set; }
        object Response { get; set; }
    }

    public interface GenerateContentCandidate
    {
        CitationMetadata CitationMetadata { get; set; }
        Content Content { get; set; }
        string FinishMessage { get; set; }
        FinishReason FinishReason { get; set; }
        int Index { get; set; }
        List<SafetyRating> SafetyRatings { get; set; }
    }

    public interface GenerateContentRequest : BaseParams
    {
        string CachedContent { get; set; }
        List<Content> Contents { get; set; }
        string SystemInstruction { get; set; }
        ToolConfig ToolConfig { get; set; }
        List<Tool> Tools { get; set; }
    }

    public interface GenerateContentResponse
    {
        List<GenerateContentCandidate> Candidates { get; set; }
        PromptFeedback PromptFeedback { get; set; }
        UsageMetadata UsageMetadata { get; set; }
    }

    public interface GenerationConfig
    {
        int CandidateCount { get; set; }
        int MaxOutputTokens { get; set; }
        string ResponseMimeType { get; set; }
        ResponseSchema ResponseSchema { get; set; }
        List<string> StopSequences { get; set; }
        float Temperature { get; set; }
        int TopK { get; set; }
        float TopP { get; set; }
    }

    public interface GenerativeContentBlob
    {
        string Data { get; set; }
        string MimeType { get; set; }
    }

    public interface ModelParams : BaseParams
    {
        CachedContent CachedContent { get; set; }
        string Model { get; set; }
        string SystemInstruction { get; set; }
        ToolConfig ToolConfig { get; set; }
        List<Tool> Tools { get; set; }
    }

    public interface PromptFeedback
    {
        BlockReason BlockReason { get; set; }
        string BlockReasonMessage { get; set; }
        List<SafetyRating> SafetyRatings { get; set; }
    }

    public interface RequestOptions
    {
        string ApiClient { get; set; }
        string ApiVersion { get; set; }
        string BaseUrl { get; set; }
        Dictionary<string, string> CustomHeaders { get; set; }
        int Timeout { get; set; }
    }

    public interface ResponseSchema : Schema
    {
    }

    public interface SafetyRating
    {
        HarmCategory Category { get; set; }
        HarmProbability Probability { get; set; }
    }

    public interface SafetySetting
    {
        HarmCategory Category { get; set; }
        HarmBlockThreshold Threshold { get; set; }
    }

    public interface Schema
    {
        string Description { get; set; }
        List<string> Enum { get; set; }
        object Example { get; set; }
        string Format { get; set; }
        FunctionDeclarationSchema Items { get; set; }
        bool Nullable { get; set; }
        Dictionary<string, FunctionDeclarationSchema> Properties { get; set; }
        List<string> Required { get; set; }
        FunctionDeclarationSchemaType Type { get; set; }
    }

    public interface StartChatParams : BaseParams
    {
        string CachedContent { get; set; }
        List<Content> History { get; set; }
        string SystemInstruction { get; set; }
        ToolConfig ToolConfig { get; set; }
        List<Tool> Tools { get; set; }
    }

    public interface ToolConfig
    {
        FunctionCallingConfig FunctionCallingConfig { get; set; }
    }

    public interface UsageMetadata
    {
        int CachedContentTokenCount { get; set; }
        int CandidatesTokenCount { get; set; }
        int PromptTokenCount { get; set; }
        int TotalTokenCount { get; set; }
    }
}