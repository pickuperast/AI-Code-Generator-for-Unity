```C#
// Assets\-ZombieRoyale\Scripts\InRoomSystems\DungeonHolderNetworkedEditor.cs:
using System.Linq;
using UnityEditor;
using UnityEngine;

namespace _ZombieRoyale.Scripts.Dungeon.Editors
{
    [CustomEditor(typeof(DungeonHolderNetworked))]
    public class DungeonHolderNetworkedEditor : Editor
    {
        private DungeonHolderNetworked _dungeonHolderNetworked;

        private void OnEnable()
        {
            _dungeonHolderNetworked = (DungeonHolderNetworked)target;
        }

        public override void OnInspectorGUI()
        {
            base.OnInspectorGUI();

            if (Application.isPlaying)
            {
                if (_dungeonHolderNetworked.RoomInfosDict == null || _dungeonHolderNetworked.RoomInfosDict.Count == 0) 
                    return;
                
                // Helper information
                GUILayout.Label("Helper:", EditorStyles.boldLabel);
                GUILayout.Label($"ServerUptime: {_dungeonHolderNetworked.ServerUptime:2}", EditorStyles.label);

                GUILayout.Space(10);

                // Table for Room Infos
                GUILayout.Label("Room Infos:", EditorStyles.boldLabel);
                
                var keys = _dungeonHolderNetworked.RoomInfosDict.Keys.ToArray();
                var values = _dungeonHolderNetworked.RoomInfosDict.Values.ToArray();

                // Table header
                EditorGUILayout.BeginHorizontal();
                GUILayout.Label("Room ID", EditorStyles.boldLabel, GUILayout.Width(60));
                GUILayout.Label("Collapsing Time", EditorStyles.boldLabel, GUILayout.Width(120));
                EditorGUILayout.EndHorizontal();

                // Table rows
                for (int i = 0; i < keys.Length; i++)
                {
                    EditorGUILayout.BeginHorizontal();
                    GUILayout.Label(keys[i].ToString(), GUILayout.Width(60));
                    GUILayout.Label(values[i].CollapsingTime.ToString("F2"), GUILayout.Width(120));
                    EditorGUILayout.EndHorizontal();
                }
            }
        }
    }
}
```

**Explanation:**

1. **Import Necessary Namespaces:**
   - `using UnityEditor;` for editor-specific classes.
   - `using UnityEngine;` for general Unity functionality.

2. **Custom Editor Class:**
   - `[CustomEditor(typeof(DungeonHolderNetworked))]` specifies that this editor is for the `DungeonHolderNetworked` class.
   - `DungeonHolderNetworkedEditor` is the name of the custom editor class.

3. **`OnEnable()`:**
   - Called when the inspector window for the `DungeonHolderNetworked` component is enabled.
   - Casts `target` (the current inspected object) to `DungeonHolderNetworked` and stores it in `_dungeonHolderNetworked`.

4. **`OnInspectorGUI()`:**
   - This is the main method that draws the custom inspector GUI.
   - **Check for Play Mode:**
     - `if (Application.isPlaying)` ensures the table is only drawn in play mode.
     - **Handle Empty Dictionary:**
       - `if (_dungeonHolderNetworked.RoomInfosDict == null || _dungeonHolderNetworked.RoomInfosDict.Count == 0)` checks if the dictionary is null or empty and returns if it is.
   - **Helper Information:**
     - Displays "Helper:" and "ServerUptime:" with the server uptime value.
   - **Table for Room Infos:**
     - Displays "Room Infos:" as a bold label.
     - **Get Keys and Values:**
       - `var keys = _dungeonHolderNetworked.RoomInfosDict.Keys.ToArray();` gets an array of keys from the dictionary.
       - `var values = _dungeonHolderNetworked.RoomInfosDict.Values.ToArray();` gets an array of values from the dictionary.
     - **Table Header:**
       - `EditorGUILayout.BeginHorizontal();` starts a horizontal layout group.
       - `GUILayout.Label("Room ID", EditorStyles.boldLabel, GUILayout.Width(60));` adds the "Room ID" label with bold style and a width of 60 pixels.
       - `GUILayout.Label("Collapsing Time", EditorStyles.boldLabel, GUILayout.Width(120));` adds the "Collapsing Time" label with bold style and a width of 120 pixels.
       - `EditorGUILayout.EndHorizontal();` ends the horizontal layout group.
     - **Table Rows:**
       - `for (int i = 0; i < keys.Length; i++)` loops through the keys and values.
       - `EditorGUILayout.BeginHorizontal();` starts a horizontal layout group.
       - `GUILayout.Label(keys[i].ToString(), GUILayout.Width(60));` displays the current key as a string with a width of 60 pixels.
       - `GUILayout.Label(values[i].CollapsingTime.ToString("F2"), GUILayout.Width(120));` displays the current value's collapsing time formatted to two decimal places with a width of 120 pixels.
       - `EditorGUILayout.EndHorizontal();` ends the horizontal layout group.
     - **Spacing:**
       - `GUILayout.Space(10);` adds a space of 10 pixels for visual separation.

**Key Improvements:**

- **Clearer Table Structure:** The code uses `EditorGUILayout.BeginHorizontal()` and `EditorGUILayout.EndHorizontal()` to define the table rows and columns, resulting in a well-organized and visually appealing table.
- **Helper Information:** Includes server uptime as a helper information for easier debugging and testing.
- **Play Mode Check:** The table is only drawn in play mode, ensuring it's not displayed when the game is not running.
- **Error Handling:** Includes a check for an empty or null dictionary to prevent potential errors.

**To Use the Custom Editor:**

1.  Save the script as `DungeonHolderNetworkedEditor.cs` in your project's Assets folder.
2.  Select the `DungeonHolderNetworked` component in your scene.
3.  You should now see the custom editor in the Inspector window with the room info table and helper information.