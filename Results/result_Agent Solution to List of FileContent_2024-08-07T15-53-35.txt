```json
[
  {
    "FilePath": "-ZombieRoyale/Scripts/InRoomSystems/DungeonHolderNetworked.cs",
    "Content": "using System.Collections.Generic;\nusing Photon.Pun;\nusing UnityEngine;\n\nnamespace _ZombieRoyale.Scripts.Dungeon\n{\n    public class DungeonHolderNetworked : MonoBehaviourPunCallbacks\n    {\n        public List<GameObject> RoomsPrefabs;\n        public Transform RoomsContainer;\n        public float CollapsingTime = 10f;\n        public float CollapsingTimeOffset = 10f;\n        public bool AutoSpawnRooms;\n\n        private Dictionary<int, RoomInfo> _roomInfosDict;\n        public Dictionary<int, RoomInfo> RoomInfosDict => _roomInfosDict;\n\n        private void Awake()\n        {\n            _roomInfosDict = new Dictionary<int, RoomInfo>();\n            if (AutoSpawnRooms)\n            {\n                SpawnRooms();\n            }\n        }\n\n        private void SpawnRooms()\n        {\n            foreach (var roomPrefab in RoomsPrefabs)\n            {\n                GameObject spawnedRoom = Instantiate(roomPrefab, RoomsContainer);\n                RoomInfo roomInfo = new RoomInfo\n                {\n                    RoomId = spawnedRoom.GetComponent<Room>().RoomId,\n                    CollapsingTime = CollapsingTime + Random.Range(0f, CollapsingTimeOffset)\n                };\n                _roomInfosDict.Add(roomInfo.RoomId, roomInfo);\n            }\n        }\n\n        public RoomInfo GetRoomInfo(int roomId)\n        {\n            if (_roomInfosDict.ContainsKey(roomId))\n            {\n                return _roomInfosDict[roomId];\n            }\n            return null;\n        }\n\n        public RoomInfo GetRoomInfo(GameObject room)\n        {\n            if (room.TryGetComponent<Room>(out var roomComponent))\n            {\n                return _roomInfosDict[roomComponent.RoomId];\n            }\n            return null;\n        }\n\n        public float ServerUptime => (Time.time - PhotonNetwork.Time) * 1000f;\n    }\n\n    public class RoomInfo\n    {\n        public int RoomId;\n        public float CollapsingTime;\n    }\n}"
  },
  {
    "FilePath": "-ZombieRoyale/Scripts/InRoomSystems/Room.cs",
    "Content": "using System.Collections;\nusing System.Collections.Generic;\nusing Photon.Pun;\nusing UnityEngine;\n\nnamespace _ZombieRoyale.Scripts.Dungeon\n{\n    public class Room : MonoBehaviourPunCallbacks\n    {\n        public int RoomId;\n        public GameObject[] EnemiesPrefabs;\n        public Transform[] EnemySpawnPoints;\n        public Transform[] PlayerSpawnPoints;\n        public float EnemiesSpawnDelay = 5f;\n\n        private List<GameObject> _enemiesInRoom;\n        private Coroutine _enemiesSpawnCoroutine;\n        private float _enemiesSpawnTimer;\n        private bool _isRoomActive = true;\n\n        public bool IsRoomActive => _isRoomActive;\n\n        public void Awake()\n        {\n            _enemiesInRoom = new List<GameObject>();\n            _enemiesSpawnTimer = EnemiesSpawnDelay;\n        }\n\n        private void Start()\n        {\n            if (PhotonNetwork.IsMasterClient)\n            {\n                _enemiesSpawnCoroutine = StartCoroutine(SpawnEnemies());\n            }\n        }\n\n        private IEnumerator SpawnEnemies()\n        {\n            while (_isRoomActive)\n            {\n                yield return new WaitForSeconds(_enemiesSpawnTimer);\n                if (EnemySpawnPoints.Length > 0 && EnemiesPrefabs.Length > 0)\n                {\n                    int randomSpawnPointIndex = Random.Range(0, EnemySpawnPoints.Length);\n                    int randomPrefabIndex = Random.Range(0, EnemiesPrefabs.Length);\n                    GameObject enemy = PhotonNetwork.Instantiate(EnemiesPrefabs[randomPrefabIndex].name, EnemySpawnPoints[randomSpawnPointIndex].position, EnemySpawnPoints[randomSpawnPointIndex].rotation);\n                    _enemiesInRoom.Add(enemy);\n                }\n            }\n        }\n\n        public void SetRoomActive(bool active)\n        {\n            _isRoomActive = active;\n            if (!_isRoomActive && _enemiesSpawnCoroutine != null)\n            {\n                StopCoroutine(_enemiesSpawnCoroutine);\n            }\n            if (PhotonNetwork.IsMasterClient && active)\n            {\n                _enemiesSpawnCoroutine = StartCoroutine(SpawnEnemies());\n            }\n        }\n\n        public void ResetEnemies()\n        {\n            foreach (var enemy in _enemiesInRoom)\n            {\n                PhotonNetwork.Destroy(enemy);\n            }\n            _enemiesInRoom.Clear();\n        }\n\n        public void ClearRoom()\n        {\n            ResetEnemies();\n            SetRoomActive(false);\n        }\n    }\n}"
  },
  {
    "FilePath": "-ZombieRoyale/Scripts/InRoomSystems/CollapsingTimer.cs",
    "Content": "using Photon.Pun;\nusing UnityEngine;\n\nnamespace _ZombieRoyale.Scripts.Dungeon\n{\n    public class CollapsingTimer : MonoBehaviourPunCallbacks\n    {\n        public float CollapsingTime;\n        public float SecondsToCollapse => CollapsingTime - (Time.time - _timerStartTime);\n        public bool RoomIsActive => SecondsToCollapse > 0f;\n        public bool IsRoomActiveIn => SecondsToCollapse < 0f;\n\n        private float _timerStartTime;\n\n        private void Start()\n        {\n            _timerStartTime = Time.time;\n        }\n\n        public void ResetTimer(float collapsingTime)\n        {\n            CollapsingTime = collapsingTime;\n            _timerStartTime = Time.time;\n        }\n    }\n}"
  },
  {
    "FilePath": "-ZombieRoyale/Scripts/InRoomSystems/DungeonHolderNetworkedEditor.cs",
    "Content": "using System.Linq;\nusing UnityEditor;\nusing UnityEngine;\n\nnamespace _ZombieRoyale.Scripts.Dungeon\n{\n    [CustomEditor(typeof(DungeonHolderNetworked))]\n    public class DungeonHolderNetworkedEditor : Editor\n    {\n        private DungeonHolderNetworked _dungeonHolderNetworked;\n    \n        private void OnEnable()\n        {\n            _dungeonHolderNetworked = target as DungeonHolderNetworked;\n        }\n\n        public override void OnInspectorGUI()\n        {\n            base.OnInspectorGUI();\n            if (_dungeonHolderNetworked == null)\n            {\n                return;\n            }\n            GUILayout.Space(20);\n            EditorGUILayout.LabelField($"ServerUptime: {_dungeonHolderNetworked.ServerUptime:2}", EditorStyles.boldLabel);\n            GUILayout.Space(5);\n\n            if (_dungeonHolderNetworked.RoomInfosDict == null || _dungeonHolderNetworked.RoomInfosDict.Count == 0)\n            {\n                EditorGUILayout.LabelField(\"RoomInfosDict is empty.\", EditorStyles.boldLabel);\n                return;\n            }\n\n            string[] headers = { \"Room Id\", \"Collapsing Time\", \"Room Active\", \"Helper: Is Room Active In\", \"Helper: Seconds To Collapse\" };\n            var roomInfos = _dungeonHolderNetworked.RoomInfosDict.Values.OrderBy(x => x.RoomId).ToArray();\n            int rowCount = roomInfos.Length;\n\n            EditorGUILayout.BeginHorizontal();\n            for (int i = 0; i < headers.Length; i++)\n            {\n                GUILayout.Label(headers[i], EditorStyles.boldLabel, GUILayout.Width(150));\n            }\n            EditorGUILayout.EndHorizontal();\n\n            for (int i = 0; i < rowCount; i++)\n            {\n                EditorGUILayout.BeginHorizontal();\n                GUILayout.Label(roomInfos[i].RoomId.ToString(), GUILayout.Width(150));\n                GUILayout.Label(roomInfos[i].CollapsingTime.ToString(\"F2\"), GUILayout.Width(150));\n                var roomInfo = _dungeonHolderNetworked.GetRoomInfo(i);\n                string isActive = roomInfo.collapsingTimer.RoomIsActive ? \"True\" : \"False\";\n                GUILayout.Label(isActive, GUILayout.Width(150));\n                GUILayout.Label(roomInfo.collapsingTimer.IsRoomActiveIn.ToString(), GUILayout.Width(150));\n                GUILayout.Label(roomInfo.collapsingTimer.SecondsToCollapse.ToString(\"F2\"), GUILayout.Width(150));\n                EditorGUILayout.EndHorizontal();\n            }\n        }\n    }\n}"
  }
]
```