```C#
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

namespace _ZombieRoyale.Scripts.Dungeon
{
    [CustomEditor(typeof(DungeonHolderNetworked))]
    public class DungeonHolderNetworkedEditor : Editor
    {
        private DungeonHolderNetworked _target;
        private SerializedProperty _roomInfosDictProp;

        private void OnEnable()
        {
            _target = (DungeonHolderNetworked)target;
            _roomInfosDictProp = serializedObject.FindProperty("_roomInfosDict");
        }

        public override void OnInspectorGUI()
        {
            // Draw default inspector
            base.OnInspectorGUI();

            // Add space for better visual separation
            GUILayout.Space(10);

            // Draw label for Room Infos section
            GUILayout.Label("Room Infos:", EditorStyles.boldLabel);

            // Display Server Uptime with helpful label
            GUILayout.Label($"Server Uptime: {_target.ServerUptime:F2}", EditorStyles.helpBox);

            // Check if RoomInfosDict is empty
            if (_roomInfosDictProp.arraySize == 0)
            {
                GUILayout.Label("RoomInfosDict is empty.");
                return;
            }

            // Draw table header
            GUILayout.BeginHorizontal();
            GUILayout.Label("Room ID", EditorStyles.boldLabel, GUILayout.Width(80));
            GUILayout.Label("Collapsing Time", EditorStyles.boldLabel, GUILayout.Width(120));
            GUILayout.EndHorizontal();

            // Iterate through the RoomInfosDict and display each entry as a row in the table
            for (int i = 0; i < _roomInfosDictProp.arraySize; i++)
            {
                SerializedProperty roomInfoProp = _roomInfosDictProp.GetArrayElementAtIndex(i);
                SerializedProperty roomIdProp = roomInfoProp.FindPropertyRelative("RoomId");
                SerializedProperty collapsingTimeProp = roomInfoProp.FindPropertyRelative("CollapsingTime");

                GUILayout.BeginHorizontal();
                GUILayout.Label(roomIdProp.intValue.ToString(), GUILayout.Width(80));
                GUILayout.Label(collapsingTimeProp.floatValue.ToString("F2"), GUILayout.Width(120));
                GUILayout.EndHorizontal();
            }
        }
    }
}
```

**Explanation:**

1. **`OnEnable()`:**
   - Gets the `DungeonHolderNetworked` target.
   - Finds the `_roomInfosDict` property using `serializedObject.FindProperty("_roomInfosDict")`.

2. **`OnInspectorGUI()`:**
   - Calls `base.OnInspectorGUI()` to draw the default inspector elements.
   - Adds a space for better visual separation.
   - Draws a label for the "Room Infos" section.
   - Displays the server uptime with a helpful label.
   - Checks if `RoomInfosDict` is empty and displays a message if it is.

3. **Table Drawing:**
   - Draws the table header with "Room ID" and "Collapsing Time" labels.
   - Iterates through the `_roomInfosDictProp` using `arraySize` to access each room info entry.
   - For each entry:
     - Gets the `RoomId` and `CollapsingTime` properties using `FindPropertyRelative()`.
     - Draws a row in the table displaying the Room ID and Collapsing Time.

**Improvements:**

- **Clearer Code:** The code is more organized and easier to read.
- **Table Structure:** The table structure is clearer and better organized, making it easier to read the Room Infos data.
- **Help Box:** The Server Uptime is displayed in a help box for better visual distinction.
- **Empty Dictionary Handling:** The code gracefully handles the case when `RoomInfosDict` is empty.
- **Property Access:** It uses `serializedObject.FindProperty()` to access the properties directly from the serialized object, making the code more efficient and cleaner.

This enhanced `DungeonHolderNetworkedEditor` script provides a user-friendly and informative way to view and monitor the Room Infos data within the inspector, helping you easily test and debug your game.