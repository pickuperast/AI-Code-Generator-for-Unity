This code snippet implements a custom editor for a `DungeonHolderNetworked` script in a Unity project. It focuses on displaying information about the rooms in a dungeon, specifically using a dictionary `RoomInfosDict` within the `DungeonHolderNetworked` class. Let's break down the code:

**1. Namespace and Class Definition:**

* `using System.Collections.Generic;`: Imports the `Dictionary` type for working with key-value pairs.
* `using UnityEditor;`: Imports Unity Editor-specific classes.
* `using UnityEngine;`: Imports general Unity classes.
* `namespace _ZombieRoyale.Scripts.Dungeon;`: Defines a namespace to organize the code, indicating that this class belongs to a `Dungeon`-related section within a project named `ZombieRoyale`.
* `[CustomEditor(typeof(DungeonHolderNetworked))]`: This attribute marks the `DungeonHolderNetworkedEditor` class as a custom editor specifically for the `DungeonHolderNetworked` class.

**2. Editor Class:**

* `public class DungeonHolderNetworkedEditor : Editor;`: Defines the custom editor class that inherits from `Editor`.
* `private DungeonHolderNetworked _target;`: Declares a private field to store a reference to the `DungeonHolderNetworked` instance being edited.

**3. `OnEnable()` Method:**

* `private void OnEnable()`: This method is called when the inspector for the `DungeonHolderNetworked` script is opened.
* `_target = (DungeonHolderNetworked)target;`: Casts the `target` property (which refers to the current object being edited) to the type `DungeonHolderNetworked` and stores it in the `_target` field.

**4. `OnInspectorGUI()` Method:**

* `public override void OnInspectorGUI()`: This method is responsible for drawing the custom inspector UI.
* `base.OnInspectorGUI();`: Calls the base class's `OnInspectorGUI()` to draw the default inspector fields.
* `GUILayout.Space(10);`: Adds a vertical space of 10 pixels.
* `GUILayout.Label("Room Infos:", EditorStyles.boldLabel);`: Displays a bold label "Room Infos:".
* `GUILayout.Label($"Server Uptime: {_target.ServerUptime:F2}", EditorStyles.helpBox);`: Displays the server uptime, formatted with two decimal places, in a help box style.
* `if (_target.RoomInfosDict == null || _target.RoomInfosDict.Count == 0)`: Checks if the `RoomInfosDict` is empty or null. If so, it displays a message indicating that the dictionary is empty and exits the method.

**5. Table Layout for Room Infos:**

* **Table Header:**
    * `GUILayout.BeginHorizontal();`: Starts a horizontal layout group.
    * `GUILayout.Label("Room ID", EditorStyles.boldLabel, GUILayout.Width(80));`: Displays the "Room ID" header with bold label style and a width of 80 pixels.
    * `GUILayout.Label("Collapsing Time", EditorStyles.boldLabel, GUILayout.Width(120));`: Displays the "Collapsing Time" header with bold label style and a width of 120 pixels.
    * `GUILayout.EndHorizontal();`: Ends the horizontal layout group.
* **Table Rows:**
    * `foreach (KeyValuePair<int, DungeonHolderNetworked.RoomInfoNetworkedData> kvp in _target.RoomInfosDict)`: Iterates through each key-value pair (room ID, room info) in the `RoomInfosDict`.
        * `GUILayout.BeginHorizontal();`: Starts a horizontal layout group.
        * `GUILayout.Label(kvp.Key.ToString(), GUILayout.Width(80));`: Displays the room ID.
        * `GUILayout.Label(kvp.Value.CollapsingTime.ToString("F2"), GUILayout.Width(120));`: Displays the collapsing time for the current room.
        * `GUILayout.EndHorizontal();`: Ends the horizontal layout group.

**Assumptions:**

* The `DungeonHolderNetworked` class has a dictionary named `RoomInfosDict` that stores information about different rooms in the dungeon.
* `RoomInfoNetworkedData` is a nested class within `DungeonHolderNetworked` that holds room-specific data, including `CollapsingTime`.

**How to Use:**

1. **Create the `DungeonHolderNetworked` Script:**
    * Create a new C# script named `DungeonHolderNetworked`.
    * Add the `RoomInfoNetworkedData` nested class and the `RoomInfosDict` dictionary within this script.
2. **Add the `CustomEditor` Attribute:**
    * Add the `[CustomEditor(typeof(DungeonHolderNetworked))]` attribute to the `DungeonHolderNetworkedEditor` class.
3. **Attach to a GameObject:**
    * Create a GameObject in your scene and attach the `DungeonHolderNetworked` script to it.
4. **Inspect the GameObject:**
    * Select the GameObject in the Hierarchy window.
    * Open the Inspector window.
    * You should see the custom inspector for the `DungeonHolderNetworked` script, displaying the room information as described in the code.

This custom editor helps you visualize the room data within the `DungeonHolderNetworked` script in a clear and organized way in the Unity editor.