```csharp
 using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using DungeonScrollerCore;
using FishNet.Object;
using Pathfinding;
using Unity.Collections;
using Unity.Jobs;
using UnityEngine;
using UnityEngine.Serialization;
using Zomb.Creatures.Module;


namespace _ZombieRoyale.Scripts.Core
{
public struct SearchNearestCreaturesToEachPlayerJob : IJobParallelFor
{
    //Unmanaged types:
    //sbyte, byte, short, ushort, int, uint, long, ulong, char, float, double, decimal, or bool, Any enum type, Any pointer type
    //NativeStream example: https://github.com/Unity-Technologies/SimpleUIDemo/blob/master/Tiny3D/Library/PackageCache/com.unity.collections%400.3.0-preview.0/Unity.Collections.Tests/NativeStreamTests.cs

    private static readonly float DISTANCE_TO_SPAWN_AI_SQUARED = 200f;//14.1f
    private static readonly float DISTANCE_TO_DESPAWN_AI_SQUARED = 1600f;//40f
    private static readonly float DISTANCE_TO_BLOCK_POINTS_SQUARED = 225f;
    // Jobs declare all data that will be accessed in the job
    // By declaring it as read only, multiple jobs are allowed to access the data in parallel
    [ReadOnly]
    public NativeArray<SpawnPointForJob> JSpawnPointsArray;
    [ReadOnly]
    public NativeArray<Vector3> PlayersPosArray;
    
    
    public NativeList<ushort>.ParallelWriter ResultPointsToSpawn;
    public NativeList<ushort>.ParallelWriter ResultPointsToDespawn;
    public bool IsSpawnBasedOnPlayers;
    

    public void Execute(int index)
    {
        var spawnPoint = JSpawnPointsArray[index];
        if (spawnPoint.isUsed)
        {
            byte playerNearby = 0;
            for (int i = 0; i < PlayersPosArray.Length; i++)
            {
                var playerPos = PlayersPosArray[i];
                float distSquared = (playerPos - spawnPoint.position).sqrMagnitude;
                if (distSquared < DISTANCE_TO_DESPAWN_AI_SQUARED)
                    playerNearby++;
            }
            if (playerNearby > 0)
                return;
                    
            ResultPointsToDespawn.AddNoResize(spawnPoint.id);
        }
        else
        {
            for (int i = 0; i < PlayersPosArray.Length; i++)
            {
                var playerPos = PlayersPosArray[i];
                float distSquared = (playerPos - spawnPoint.position).sqrMagnitude;
                if (distSquared > DISTANCE_TO_SPAWN_AI_SQUARED)
                    continue;
                    
                ResultPointsToSpawn.AddNoResize(spawnPoint.id);
                break;
            }
        }
        
        //TODO check and insert this logic
        // if (IsSpawnBasedOnPlayers)
        // {
        //     for (int i = 0; i < JSpawnPointsArray.Length; i++)
        //     {
        //         var spawnPoint = JSpawnPointsArray[i];
        //         if (spawnPoint.isUsed)
        //             continue;
        //         
        //         if (spawnPoint.IsUsedAsNeighbourToOtherPoint)
        //             continue;
        //         
        //         byte playerNearby = 0;
        //         for (int j = 0; j < PlayersPosArray.Length; j++)
        //         {
        //             var playerPos = PlayersPosArray[j];
        //             float distSquared = (playerPos - spawnPoint.position).sqrMagnitude;
        //             if (distSquared > DISTANCE_TO_BLOCK_POINTS_SQUARED)
        //                 continue;
        //             playerNearby++;
        //             spawnPoint.closestPlayerDistance = distSquared;
        //         }
        //         if (playerNearby <= 0)
        //             continue;
        //         ResultPointsToSpawn.Add(spawnPoint.id);
        //         for (int j = 0; j < JSpawnPointsArray.Length; j++)
        //         {
        //             if (i == j)
        //                 continue;
        //             var point = JSpawnPointsArray[j];
        //             if (point.isUsed)
        //             {
        //                 continue;
        //             }
        //             float distance = (spawnPoint.position - point.position).sqrMagnitude;
        //             if (distance > DISTANCE_TO_BLOCK_POINTS_SQUARED)
        //             {
        //                 continue;
        //             }
        //             point.IsUsedAsNeighbourToOtherPoint = true;
        //         }
        //     }
        // }
    }
}

public struct CheckTargetsInRangeJob : IJobParallelFor
{
    [ReadOnly] public NativeArray<FixedString32Bytes> Tags;
    [ReadOnly] public NativeArray<FishnetInvectorHealthController> PossibleTargets;
    [ReadOnly] public Vector3 Center;
    [ReadOnly] public float Radius;
    
    public NativeArray<bool> Results;

    public void Execute(int index)
    {
        var target = PossibleTargets[index];
        if (target.NetworkObject == null)
        {
            return;
        }
        
        for (int i = 0; i < Tags.Length; i++)
        {
            if (target.NetworkObject.CompareTag(Tags[i].ToString()))
            {
                return;
            }
        }
            
        if (!CommonMath.Math.IsWithinRange(Center, target.NetworkObject.transform.position, Radius))
        {
            return;
        }
        
        Results[index] = true;
    }
}

[ExecuteInEditMode]
public class RespawnManager : RoomManager {
    protected const float DEFAULT_MONSTER_RESPAWN_TIME = 600f;
    public static string TAG_PORTAL_SPAWN_POINT = "EscapePortalPoint";
    public static string TAG_MONSTER_SPAWN_POINT = "MonsterSpawnPoint";
    public static string TAG_BOSS_SPAWN_POINT = "BossSpawnPoint";
    protected static float DISTANCE_TO_SPAWN_AI = 20f;
    protected static float DISTANCE_TO_DESPAWN_AI = 40f;
    protected static float DISTANCE_TO_BLOCK_POINTS = 15f;
    [SerializeField] protected List<SpawnPoint> _spawnPoints = new List<SpawnPoint>();
    protected NativeArray<SpawnPointForJob> SpawnPointsArray;
    [SerializeField] protected EnemyDefinitionsHolderSO _enemyDefinitionsHolderSO;
    [SerializeField] protected bool _isSpawnBasedOnPlayers;
    protected CreaturesFactory _creaturesFactory;
    protected bool _isActivated = true;
    protected ushort _startingFromIndex = 0;
    public Action<List<Vector3>> OnBossSpawnPointsPopulated;
    [field: SerializeField] public List<Vector3> PortalPoints { get; protected set; } = new (); 
    protected bool _isDebug = true;
    protected bool _isSpawnPointsInitialized;
    [SerializeField] private bool _isSpawnPointsInsideHolder = false;
    public static RespawnManager Instance { get; protected set; }

    protected void OnDisable() { Debug.Log($"[RespawnManager] OnDisable"); }
    protected void OnEnable() { Debug.Log($"[RespawnManager] OnEnable"); }

    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else
        {
            Destroy(this);
        }
    }

    public override void OnStartNetwork() {
        base.OnStartNetwork();

        if (IsServer || IsHost) {
            _creaturesFactory = GetComponent<CreaturesFactory>();
        }
    }
    
    public override void OnStopNetwork() {
        base.OnStopNetwork();
        if (IsServer || IsHost) {
            if (SpawnPointsArray.IsCreated)
                SpawnPointsArray.Dispose();
        }
    }

    protected IEnumerator CorUpdate()
    {
        var time = new WaitForSeconds(1f);
        while (true)
        {
            if (!_isActivated)
                yield return null;
            // StartCoroutine(SpawnCreaturesIfRequired());
            // StartCoroutine(DespawnCreaturesIfRequired());
            CheckPlayers();
            yield return time;
        }
    }

    private void CheckPlayers()
    {
        if (GameplayManager.SpawnedPlayerHeroes.Count == 0)
            return;
        
        if (SpawnPointsArray.Length == 0)
        {
            Debug.LogError($"[RespawnManager] SpawnPointsArray.Length == 0");
            return;
        }
        var playerPosArray = new NativeArray<Vector3>(
            GameplayManager.SpawnedPlayerHeroes.Count, Allocator.TempJob);
        for (int i = 0; i < GameplayManager.SpawnedPlayerHeroes.Count; i++)
        {
            playerPosArray[i] = GameplayManager.SpawnedPlayerHeroes[i].transform.position;
        }
        
        NativeList<ushort> resultPointsToSpawn = new NativeList<ushort>(Allocator.TempJob);
        NativeList<ushort> resultPointsToDespawn = new NativeList<ushort>(Allocator.TempJob);
        var job = new SearchNearestCreaturesToEachPlayerJob
        {
            JSpawnPointsArray = SpawnPointsArray,
            PlayersPosArray = playerPosArray,
            ResultPointsToSpawn = resultPointsToSpawn.AsParallelWriter(),
            ResultPointsToDespawn = resultPointsToDespawn.AsParallelWriter(),
            IsSpawnBasedOnPlayers = _isSpawnBasedOnPlayers
        };
        job.Schedule(SpawnPointsArray.Length, 1).Complete();
        StringBuilder result = new StringBuilder("[RespawnManager] CheckPlayers ");
        if (resultPointsToSpawn.Length > 0)
        {
            result.Append($"Spawn(resultPointsToSpawn.Length): ");
            for (int i = 0; i < resultPointsToSpawn.Length; i++)
            {
                result.Append($"{resultPointsToSpawn[i]}, ");
            }
        }
        
        if (resultPointsToDespawn.Length > 0)
        {
            result.Append($". Despawn(resultPointsToDespawn.Length): ");
            for (int i = 0; i < resultPointsToDespawn.Length; i++)
            {
                result.Append($"{resultPointsToDespawn[i]}, ");
            }
        }
        //Debug.Log($"{result}");
        
        foreach (var pointId in resultPointsToDespawn)
        {
            SpawnPoint point = _spawnPoints[pointId];
            point.UpdateClosestPlayerDistance(DISTANCE_TO_DESPAWN_AI+1f);
            _creaturesFactory.DeallocateCreature(point.SpawnedAI);
            point.RemoveAIUnit();
            point.SetUsedAs(false);
            SpawnPointsArray[pointId] = new SpawnPointForJob()
            {
                id = point.Id,
                type = point.GetCreatureType(),
                position = point.Position,
                isUsed = false,
                spawnedAIObjectId = -1,
                IsUsedAsNeighbourToOtherPoint = false
            };
            Debug.Log($"{ClassAndRoomName} despawned point {pointId}");
        }
        
        foreach (var pointId in resultPointsToSpawn)
        {
            SpawnPoint point = _spawnPoints[pointId];
            ushort creatureType = point.GetCreatureType();
            var creature = SpawnCreatureAtPoint(point.Position, creatureType);
            _spawnPoints[pointId].SetUsedAs(true);
            _spawnPoints[pointId].StoreAIUnit(creature.Controller);
            SpawnPointsArray[pointId] = new SpawnPointForJob()
            {
                id = point.Id,
                type = creatureType,
                position = point.Position,
                isUsed = true,
                spawnedAIObjectId = creature.Controller.ObjectId,
                IsUsedAsNeighbourToOtherPoint = false
            };
            creature.Controller.OnHideCreature += Controller_OnHideCreature;
        }
        
        resultPointsToSpawn.Dispose();
        resultPointsToDespawn.Dispose();
        playerPosArray.Dispose();
    }
    
    protected bool IsThereAnySpawnPointsToDespawn(out HashSet<int> pointsToDespawn) {
        pointsToDespawn = new HashSet<int>();
        for (int i = 0; i < _spawnPoints.Count; i++)
        {
            var spawnPoint = _spawnPoints[i];
            if (!spawnPoint.IsUsed)
                continue;
            
            if (spawnPoint.IsUsedAsNeighbourToOtherPoint) {
                continue;
            }
            
            int playersNearby = 0;
            foreach (var playerNob in UnitComponentsManager.GetAllPlayersHeroes())
            {
                var playerPosition = playerNob.transform.position;
                float distance = Vector3.Distance(spawnPoint.Position, playerPosition);
                if (distance < DISTANCE_TO_DESPAWN_AI)
                    playersNearby++;
            }
            
            if (playersNearby > 0)
                continue;
            
            pointsToDespawn.Add(spawnPoint.Id);
        }
        if (pointsToDespawn.Count == 0)
            return false;
        return true;
    }

    protected bool IsThereAnySpawnPointsToSpawn(out HashSet<int> pointsToSpawn) {
        //TODO optimize from O(n2) -> O(nlogn) using chunks
        pointsToSpawn = new HashSet<int>();

        for (int i = 0; i < _spawnPoints.Count; i++)
        {
            var spawnPoint = _spawnPoints[i];
            if (spawnPoint.IsUsed) {
                continue;
            }
            
            if (spawnPoint.IsUsedAsNeighbourToOtherPoint) {
                continue;
            }
            
            int playersNearby = 0;
            foreach (var playerNob in GameplayManager.SpawnedPlayerHeroes)
            {
                var playerPosition = playerNob.transform.position;
                float distance = Vector3.Distance(spawnPoint.Position, playerPosition);
                if (distance > DISTANCE_TO_SPAWN_AI) {
                    continue;
                }
                playersNearby++;
                spawnPoint.UpdateClosestPlayerDistance(distance);
            }
            if (playersNearby <= 0)
                continue;
            
            pointsToSpawn.Add(spawnPoint.Id);
            
            SpawnFilterBasedOnPlayersCountIfRequired(i, spawnPoint, playersNearby);
        }

        //Debug.Log($"{ClassAndRoomName} need to spawn {_pointsToSpawn.Count} points");
        if (pointsToSpawn.Count == 0)
            return false;
        return true;
    }

    protected void SpawnFilterBasedOnPlayersCountIfRequired(int i, SpawnPoint spawnPoint, int playersNearby)
    {
        if (!_isSpawnBasedOnPlayers) return;
        
        List<SpawnPoint> pointsNearby = new List<SpawnPoint>();
        //near each point should be only players*points active points
        for (int j = 0; j < _spawnPoints.Count; j++)
        {
            if (i == j)
                continue;
            var point = _spawnPoints[j];
            if (point.IsUsed)
            {
                continue;
            }

            float distance = Vector3.Distance(spawnPoint.Position, point.Position);
            if (distance > DISTANCE_TO_BLOCK_POINTS)
            {
                continue;
            }

            pointsNearby.Add(point);
        }

        foreach (var pointNear in pointsNearby)
        {
            if (playersNearby > 0)
            {
                playersNearby--;
                pointNear.IsUsedAsNeighbourToOtherPoint = true;
                continue;
            }
            else
            {
                pointNear.SetUsedAs(true);
            }
        }
    }

    public CreaturesFactory.PooledCreature SpawnCreatureAtPoint(Vector3 pos, ushort creatureType)
    {
        NNInfo astarPoint = GameplayManager.AstarPath.GetNearest(pos);
        Vector3 point = astarPoint.position;
        if(astarPoint.node == null)
        {
            Debug.LogError($"[RespawnManager] SpawnCreatureAtPoint {pos} astarPoint.node == null");
            point = pos;
        }
        CreaturesFactory.PooledCreature creature =
            _creaturesFactory.AllocateCreature(creatureType, point, GameplayManager);
        return creature;
    }

    protected void Controller_OnHideCreature(AIUnit controller) {
        //TODO spawn point id not setting properly
        ushort pointId = controller.SpawnPointId;
        SpawnPoint point = SpawnPointsGetFromId(pointId);
        point.SetUsedAs(false);
    }

    protected SpawnPoint SpawnPointsGetFromId(ushort id) { return _spawnPoints[id]; }

    [Server]
    public void MonsterSpawnPointsPopulate() {
        ushort index = 0;
        PopulateMonsterSpots(EnemyDefinition.Type.Monster);
        PopulateMonsterSpots(EnemyDefinition.Type.Boss);
        Debug.Log($"[RespawnManager] SpawnPointsPopulate: {_spawnPoints.Count}");
        _isSpawnPointsInitialized = true;
    }

    public void InitIfAllRequirementsMet()
    {
        StartCoroutine(LateInit());
    }

    protected IEnumerator LateInit()
    {
        if (!IsHost)
        {
            yield return new WaitUntil(() => GameplayManager.IsAllPlayersSpawned);
        }
        DebugWrite.Log($"[RespawnManager] Init", gameObject, _isDebug);
        StartCoroutine(CorUpdate());
    }
    
    public void RemovePortalSpawnPoints() {
        GameObject[] spawnPointHolders = GameObject.FindGameObjectsWithTag(TAG_PORTAL_SPAWN_POINT);
        for (int j = 0; j < spawnPointHolders.Length; j++) {
            Destroy(spawnPointHolders[j]);
        }
    }
    
    public void RemoveMonsterSpawnPoints() {
        StringBuilder sb = new StringBuilder($"{ClassAndRoomName} RemoveMonsterSpawnPoints ");
        GameObject[] spawnPointHolders = GameObject.FindGameObjectsWithTag(TAG_MONSTER_SPAWN_POINT);
        sb.Append($"[RespawnManager] RemoveMonsterSpawnPoints {TAG_MONSTER_SPAWN_POINT}: {spawnPointHolders.Length}");
        for (int j = 0; j < spawnPointHolders.Length; j++) {
            Destroy(spawnPointHolders[j]);
        }
        spawnPointHolders = GameObject.FindGameObjectsWithTag(TAG_BOSS_SPAWN_POINT);
        sb.Append($"[RespawnManager] RemoveMonsterSpawnPoints {TAG_BOSS_SPAWN_POINT}: {spawnPointHolders.Length}");
        for (int j = 0; j < spawnPointHolders.Length; j++) {
            Destroy(spawnPointHolders[j]);
        }
        DebugWrite.Log($"{sb}", gameObject, _isDebug);
        if (!IsHost)
            Destroy(this.gameObject);
    }

    [Server]
    public void PopulatePortalPoints()
    {
        GameObject[] spawnPointHolders = GameObject.FindGameObjectsWithTag(TAG_PORTAL_SPAWN_POINT);
        for (int j = 0; j < spawnPointHolders.Length; j++) {
            PortalPoints.Add(spawnPointHolders[j].transform.position);
            Destroy(spawnPointHolders[j]);
        }
    }

    [Server]
    protected void PopulateMonsterSpots(EnemyDefinition.Type type)
    {
        StringBuilder sb = new StringBuilder();
        string tag = "";
        float respawnTime = DEFAULT_MONSTER_RESPAWN_TIME;
        switch (type)
        {
            case EnemyDefinition.Type.Monster:
                tag = TAG_MONSTER_SPAWN_POINT;
                break;
            case EnemyDefinition.Type.Boss:
                tag = TAG_BOSS_SPAWN_POINT;
                respawnTime = 999999f;
                break;
        }

        sb.Append($"[RespawnManager] PopulateMonsterSpots of type: {tag}. ");
        GameObject[] spawnPointHolders = GameObject.FindGameObjectsWithTag(tag);
        sb.Append($"Found {spawnPointHolders.Length} points. ");
        List<Transform> spawnPoints = new List<Transform>();
        if (_isSpawnPointsInsideHolder)
        {
            List<Transform> spawnPointHoldersCleared = new List<Transform>();
            //Clear from those that dont have children, because in unity calling FindGameObjectsWithTag gives results with gameobjects that are not tagged with that tag, but they are children of game objects with that tag
            for (int i = 0; i < spawnPointHolders.Length; i++)
            {
                if (spawnPointHolders[i].transform.childCount > 0)
                {
                    spawnPointHoldersCleared.Add(spawnPointHolders[i].transform);
                }
            }
            sb.Append($"generate enemies: ");
            foreach (var holderGo in spawnPointHoldersCleared)
            {
                int childCount = holderGo.childCount;
                byte[] randomEnemies = new byte[childCount];
                for (int i = 0; i < childCount; i++)
                {
                    spawnPoints.Add(holderGo.GetChild(i));
                    randomEnemies[i] = _enemyDefinitionsHolderSO.GetRandomEnemyId(type);
                    sb.Append($"id: {randomEnemies[i]}, ");
                }
                PopulateSpawnPointsWith(randomEnemies, spawnPoints, respawnTime);
            }
            DebugWrite.Log($"[RespawnManager] {sb}", gameObject, _isDebug);
        }
        else
        {
            byte[] randomEnemies = new byte[spawnPointHolders.Length];
            for (int i = 0; i < spawnPointHolders.Length; i++)
            {
                spawnPoints.Add(spawnPointHolders[i].transform);
                randomEnemies[i] = _enemyDefinitionsHolderSO.GetRandomEnemyId(type);
                sb.Append($"id: {randomEnemies[i]}, ");
            }
            PopulateSpawnPointsWith(randomEnemies, spawnPoints, respawnTime);
            DebugWrite.Log($"[RespawnManager] {sb}", gameObject, _isDebug);
        }
        
        
        
        if (type == EnemyDefinition.Type.Boss)
            AddBossPoints(spawnPoints);
        
        for (int j = 0; j < spawnPointHolders.Length; j++) {
            Destroy(spawnPointHolders[j]);
        }
    }

    [Server]
    protected void AddBossPoints(List<Transform> spawnPointHoldersCleared)
    {
        List<Vector3> positions = new List<Vector3>();
        foreach (var holderGo in spawnPointHoldersCleared)
        {
            positions.Add(holderGo.position);
        }
        Debug.Log($"[RespawnManager] Added {positions.Count} BossPoints");
        OnBossSpawnPointsPopulated?.Invoke(positions);
    }

    protected void PopulateSpawnPointsWith(byte[] randomEnemies, List<Transform> spawnPoints, float respawnTime)
    {
        foreach (var trans in spawnPoints)
        {
            byte randomEnemy = randomEnemies[spawnPoints.IndexOf(trans)];
            SpawnPoint spawnPoint = new SpawnPoint(_startingFromIndex, randomEnemy, trans.position, respawnTime);
            
            Debug.Log($"[RespawnManager] Added spawnPoint #{_startingFromIndex} with enemyId {randomEnemy}, at {trans.position} with respawnTime {respawnTime}", gameObject);
            _spawnPoints.Add(spawnPoint);
            _startingFromIndex++;
        }
        
        SpawnPointsArray = new NativeArray<SpawnPointForJob>(_spawnPoints.Count, Allocator.Persistent);
        for (int i = 0; i < _spawnPoints.Count; i++)
        {
            SpawnPointsArray[i] = new SpawnPointForJob()
            {
                id = _spawnPoints[i].Id,
                type = _spawnPoints[i].GetCreatureType(),
                position = _spawnPoints[i].Position,
                isUsed = _spawnPoints[i].IsUsed,
                spawnedAIObjectId = -1,
                IsUsedAsNeighbourToOtherPoint = false
            };
        }
    }
    
#if UNITY_EDITOR
    protected void OnDrawGizmos()
    {
        //draw spheres
        if (_spawnPoints == null)
            return;
        for (int i = 0; i < _spawnPoints.Count; i++)
        {
            var spawnPoint = _spawnPoints[i];
            if (spawnPoint.IsUsed)
            {
                Gizmos.color = Color.red;
            }
            else
            {
                Gizmos.color = Color.green;
            }
            Gizmos.DrawSphere(spawnPoint.Position, 1f);
        }
    }
#endif
}
} 

// Assets\-ZombieRoyale\Scripts\Core\UnitComponents.cs:
 using System;
using _ZombieRoyale.Scripts.Clients;
using FishNet.Connection;
using FishNet.Object;
using FishnetInvector;
using UnityEngine;
using Zomb.Creatures.Helpers;

namespace _ZombieRoyale.Scripts.Core
{
    [Serializable]
    public class UnitComponents {
        public FishnetInvectorManager InvectorManager;
        public FishnetInvectorItemManager ItemManager;
        public FishnetInvectorHealthController HealthController;
        public FishnetInvectorShooterManager ShooterManager;
        public FishnetInvectorProjectilesManager ProjectilesManager;
        public FNStatsController StatsController;
        public FNXpController XpController;
        public FNAbilityController AbilityController;
        public FNvMeleeManager MeleeManager;
        public AttachmentPoints AttachmentPoints;
        public AIUnit AiUnit;
        public TeamUIController TeamUiController;
        public FishnetInvectorBuffController BuffController;
        public AnimatorDecorator AnimatorDecorator;
        public NetworkedActionsAnimator ActionsAnimator;
        public Transform Trans => HealthController.transform;
        public NetworkConnection Owner => HealthController.NetworkObject.Owner;
        public NetworkObject NetworkObject => HealthController.NetworkObject;
    
        public UnitComponents(){}
        public UnitComponents(NetworkObject netObj) {
            InvectorManager = netObj.GetComponent<FishnetInvectorManager>();
            ItemManager = netObj.GetComponent<FishnetInvectorItemManager>();
            HealthController = netObj.GetComponent<FishnetInvectorHealthController>();
            ShooterManager = netObj.GetComponent<FishnetInvectorShooterManager>();
            ProjectilesManager = netObj.GetComponent<FishnetInvectorProjectilesManager>();
            StatsController = netObj.GetComponent<FNStatsController>();
            XpController = netObj.GetComponent<FNXpController>();
            AbilityController = netObj.GetComponent<FNAbilityController>();
            MeleeManager = netObj.GetComponent<FNvMeleeManager>();
            AttachmentPoints = netObj.GetComponent<AttachmentPoints>();
            AiUnit = netObj.GetComponent<AIUnit>();
            TeamUiController = netObj.GetComponent<TeamUIController>();
            BuffController = netObj.GetComponent<FishnetInvectorBuffController>();
            AnimatorDecorator = netObj.GetComponent<AnimatorDecorator>();
            ActionsAnimator = netObj.GetComponent<NetworkedActionsAnimator>();
        
            SetParentReference();
        }

        public void Init()
        {
            SetParentReference();
        }

        private void SetParentReference() {
            if (ItemManager != null) ItemManager.UnitComponents = this;
            if (HealthController != null) HealthController.UnitComponents = this;
            if (ShooterManager != null) ShooterManager.UnitComponents = this;
            if (ProjectilesManager != null) ProjectilesManager.UnitComponents = this;
            if (StatsController != null) StatsController.UnitComponents = this;
            if (XpController != null) XpController.UnitComponents = this;
            if (AbilityController != null) AbilityController.UnitComponents = this;
            if (MeleeManager != null) MeleeManager.UnitComponents = this;
            if (AttachmentPoints != null) AttachmentPoints.UnitComponents = this;
            if (AiUnit != null) AiUnit.UnitComponents = this;
            if (TeamUiController != null) TeamUiController.UnitComponents = this;
            if (BuffController != null) BuffController.UnitComponents = this;
            if (AnimatorDecorator != null) AnimatorDecorator.UnitComponents = this;
            if (ActionsAnimator != null) ActionsAnimator.UnitComponents = this;
        }

        public static UnitComponents AssignUnitComponents(NetworkObject nob)
        {
            UnitComponents unitComps = nob.GetComponent<Unit>().UnitComps;
            unitComps.Init();
            return unitComps;
        }
    }
} 

// Assets\FishNet Invector\Scripts\Networked\FishnetInvectorHealthController.cs:
 using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using _ZombieRoyale.Scripts.Core;
using DamageNumbersPro;
using DungeonScrollerCore;
using FishNet;
using FishNet.Connection;
using FishNet.Object;
using FishNet.Object.Synchronizing;
using Invector;
using UnityEngine;
using UnityEngine.Events;

namespace FishnetInvector {
    [RequireComponent(typeof(FishnetInvectorBuffController))]
    public class FishnetInvectorHealthController : NetworkBehaviour
    {
        private static float DEFAULT_HEALTH_VALUE = 500.0f;
        private static float DEFAULT_HEALTH_RECOVERY_DELAY = 1f;
        private static float HEALTH_REGEN_AMOUNT = 1f;
        private static float HEALTH_REGEN_INTERVAL = 1f;
        private static float MINIMAL_DAMAGE_TO_SHOW_DAMAGE_VFX = float.Epsilon;
        public static float TEAM_ADDITIONAL_XP_MODIFIER = 1.1f;

        #region Public Properties

        public FNvHealthController FNvHealthController { get; private set; }
        public float CurrentHealth => _currentHealth;
        public float MaxHealth => _maxHealth;
        public Action OnRessurect;
        public Action<vDamage> OnDead;
        public Action<vDamage> OnTakeDamage;
        public Action<FishnetInvectorHealthController, HealthType, float> OnHealthChanged;
        public Action<HealthType, float> OnMineHealthChanged;
        public Collider[] DamageReceivers => _damageReceivers;
        public FNvDamage LastDamageTaken => _lastDamageTaken;
        
        public bool IsAI => _isAI;
        public bool IsPlayer => _isPlayer;
        private string _className;
        public string ClassName => _className ??= StringToHexColor.GetColoredClassName(GetType());


        public enum HealthType
        {
            Current,
            Max,
            Regen
        }


        /// <summary>
        /// Subscribe to this event to update health bar on clients
        /// </summary>
        public Action<float> OnChangeCurrentHealthInfo;

        #endregion

        #region Private Properties

        [SyncVar(OnChange = nameof(OnCurrentHealthChange))]
        private float _currentHealth;

        [SyncVar(OnChange = nameof(OnMaxHealthChange))]
        private float _maxHealth;

        [SyncVar] private float _healthRecoveryDelay;
        [SyncVar] private float _healthRecoveryRate;
        [SyncVar] private bool _isImmortal = false;
        [SyncVar] private FNvDamage _lastDamageTaken;
        
        public bool IsDead => _isDead;
        [SyncVar(OnChange = nameof(OnIsDeadChanged))] private bool _isDead;
        [SerializeField] public UnitComponents UnitComponents;
        [SerializeField] private BloodController _bloodController;
        [SerializeField] private DamageNumber _critDamagePrefab;
        [SerializeField] private DamageNumber _damagePrefab;
        [SerializeField] private DamageNumber _healPrefab;
        [SerializeField] private FNArmor _armor;
        [SerializeField] private Collider[] _damageReceivers;
        [SerializeField] private bool _isAI;
        [SerializeField] private bool _isPlayer;
        private float _healthWithoutConstitution;
        private Coroutine _healthRegenCoroutine;
        private DamageSystem _damageSystem;
        [SerializeField] private Unit unit;
        public Action<bool> OnCollidersChanged;
        
        #endregion

        protected override void OnValidate()
        {
            base.OnValidate();
            AssignComponentsIfRequired();
        }

        private void AssignComponentsIfRequired()
        {
            unit ??= GetComponent<Unit>();
        }

        private void Awake()
        {
            AssignComponentsIfRequired();
            _armor ??= GetComponent<FNArmor>();
            if (unit.UnitComps.InvectorManager != null) {
                _isPlayer = true;
            }
            if (unit.UnitComps.AiUnit != null) {
                _isAI = true;
            }
        }

        public override void OnStartNetwork()
        {
            base.OnStartNetwork();
            if (base.Owner.IsLocalClient)
            {
                FNvHealthController = GetComponent<FNvHealthController>();
                FNvHealthController.InitLocalPlayer(this);
            }

            if (base.IsServer || base.IsHost)
            {
                StartCoroutine(OnStatsControllerActivatorListener());
                
            }
        }

        private IEnumerator OnStatsControllerActivatorListener()
        {
            yield return new WaitUntil(() => UnitComponents.StatsController != null);
            yield return new WaitUntil(() => UnitComponents.StatsController.IsStatsActivated);
            StatsControllerOnOnStatsActivated();
        }

        public void UpdateDamageSystem(UnitComponents damagerUnit, bool isAllyOnlyForPlayers)
        {
            _damageSystem = new DamageSystem(unit.UnitComps, damagerUnit, isAllyOnlyForPlayers);
        }

        public override void OnStartClient()
        {
            base.OnStartClient();
            GameplayManager.Instance.RegisterDamageReceivers(_damageReceivers, this);
            if (IsOwner && IsPlayer)
            {
                OnChangeCurrentHealthInfo?.Invoke(CurrentHealth);
            }
        }
        
        private void StatsControllerOnOnStatsActivated()
        {

            List<float> healthValues = new List<float>();
            healthValues.Add(UnitComponents.StatsController.GetAllCurrentValueServerOnly(Stat.STAT_TYPE.HEALTH));

            float resultHealthValue;

            if (UnitComponents.AiUnit != null)
            {
                healthValues.Add(UnitComponents.AiUnit.EnemyDefinition.MaxHealth);
                resultHealthValue = healthValues.Sum() * UnitComponents.AiUnit.GlobalPowerMultiplier;
            }
            else
            {
                resultHealthValue = healthValues.Sum();
            }
        
            var healData = new HealData {amount = resultHealthValue