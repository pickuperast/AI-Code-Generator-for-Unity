```json
[
  {
    "FilePath": "Assets\\-ZombieRoyale\\Scripts\\InRoomSystems\\Gameplay\\DamagingCollider.cs",
    "Content": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Reflection;\nusing _ZombieRoyale.Scripts.Core;\nusing FishnetInvector;\nusing Invector;\nusing UnityEngine;\nusing UnityEngine.Rendering;\nusing UnityEngine.Rendering.Universal;\nusing Zomb.Creatures.Helpers;\n\npublic class DamagingCollider : MonoBehaviour\n{\n    [SerializeField] private Collider _collider;\n    [SerializeField] private vDamage _damagePerTick = new vDamage();\n    [SerializeField] private float _damageTickRate = 1.0f;\n    [SerializeField] private Transform _fxPrefab;\n    [SerializeField] private AttachmentPoints.Point _fxSpawnPoint;\n    [SerializeField] private string screenEffectPropertyName = \"_VignetteIntensity\";\n    \n    [Header(\"OnScreenEffect\")] \n    [SerializeField] private string screenEffectName = \"LavaEffect\";\n    [SerializeField] private FullScreenFX fullScreenFX;\n    private int _voronoiIntensity = Shader.PropertyToID(\"_VoronoiIntensity\");\n    private int _vignetteIntensity = Shader.PropertyToID(\"_VignetteIntensity\");\n    private const float VIGNETTE_INTENSITY_START_AMOUNT = 0.6f;\n    private const float VORONOI_INTENSITY_START_AMOUNT = 1.0f;\n\n    [Header(\"Time Stats\")] \n    [SerializeField] private float _hurtDisplayTime = 1.5f;\n    [SerializeField] private float _hurtFadeOutTime = .5f;\n    [field:SerializeField] public bool IsActive { get; private set; }\n    \n    private Dictionary<FishnetInvectorHealthController, Coroutine> _damageTimer = new ();\n    private ObjectsPool<Transform> _fxPool;\n    [SerializeField] private AnimatorDecorator _animatorDecorator;\n\n    public Action<UnitComponents> OnUnitEnter;\n    public Action<UnitComponents> OnUnitExit;\n    public Action<UnitComponents> OnUnitStay;\n\n    #region Initialization\n    private void OnValidate()\n    {\n        AssignComponentsIfRequired();\n    }\n\n    private void AssignComponentsIfRequired()\n    {\n        _collider ??= GetComponent<BoxCollider>();\n        _animatorDecorator ??= GetComponent<AnimatorDecorator>();\n    }\n\n    private void Awake()\n    {\n        if (_fxPrefab != null)\n            _fxPool = new ObjectsPool<Transform>(transform, _fxPrefab, 3);\n        AssignComponentsIfRequired();\n    }\n\n    #endregion\n    \n    public void Activate()\n    {\n        IsActive = true;\n        _collider.enabled = true;\n        ShowScreenFXIfRequired();\n    }\n    \n    public void Deactivate()\n    {\n        IsActive = false;\n        _collider.enabled = false;\n        HideScreenFXIfRequired();\n    }\n    \n    private UnitComponents GetUnitComponents(Collider other) {\n        if (other.CompareTag(\"Player\"))\n        {\n            if (GameplayManager.Instance.GetHealthController(other) != null)\n                return GameplayManager.Instance.GetHealthController(other).UnitComponents;\n        }\n\n        return new NullUnitComponents();\n    }\n\n    private void OnTriggerEnter(Collider other)\n    {\n        if (!IsActive)\n        {\n            return;\n        }\n        var unitComponents = GetUnitComponents(other);\n        \n        if (unitComponents != NullUnitComponents.Instance)\n        {\n            OnUnitEnter?.Invoke(unitComponents);\n        }\n        \n        if (!enabled)\n            return;\n        \n        if (!GameplayManager.IsOwningPlayer(other))\n            return;\n        \n        if (_animatorDecorator != null)\n            _animatorDecorator.SetTrigger(\"DoActivate\");\n\n        StartDamagingIfRequired(other);\n    }\n\n    private void OnTriggerStay(Collider other)\n    {\n        if (!IsActive)\n        {\n            return;\n        }\n        \n        var unitComponents = GetUnitComponents(other);\n        \n        if (unitComponents != NullUnitComponents.Instance)\n        {\n            OnUnitStay?.Invoke(unitComponents);\n        }\n        \n        if (!enabled)\n            return;\n        \n        if (!GameplayManager.IsOwningPlayer(other))\n            return;\n        \n        if (_animatorDecorator != null)\n            _animatorDecorator.SetTrigger(\"DoActivate\");\n        \n       // StartDamagingIfRequired(other);\n    }\n\n    private void OnTriggerExit(Collider other)\n    {\n        if (!IsActive)\n        {\n            return;\n        }\n        \n        var unitComponents = GetUnitComponents(other);\n        \n        if (unitComponents != NullUnitComponents.Instance)\n        {\n            OnUnitExit?.Invoke(unitComponents);\n        }\n        \n        if (!GameplayManager.IsOwningPlayer(other))\n            return;\n        \n        Debug.Log($\"[DamagingCollider] OnTriggerExit room: {gameObject.name}; player: {other.name}\");\n        FishnetInvectorHealthController hc = GameplayManager.Instance.GetHealthController(other);\n        if (!_damageTimer.ContainsKey(hc))\n            return;\n        StopCoroutine(_damageTimer[hc]);\n        _damageTimer.Remove(hc);\n    }\n\n    private void StartDamagingIfRequired(Collider other)\n    {\n        FishnetInvectorHealthController hc = GameplayManager.Instance.GetHealthController(other);\n        if (_damageTimer.ContainsKey(hc))\n            return;\n        \n        Debug.Log($\"[DamagingCollider] StartDamagingIfRequired room: {gameObject.name}; player: {other.name}\");\n        Vector3 closestPoint = other.ClosestPoint(transform.position);\n        _damageTimer.Add(hc, StartCoroutine(DamagingCoroutine(hc, closestPoint)));\n    }\n\n    private IEnumerator DamagingCoroutine(FishnetInvectorHealthController hc, Vector3 closestPoint)\n    {\n        while (true)\n        {\n            SetupAndDealDamage(hc, closestPoint);\n            yield return new WaitForSeconds(_damageTickRate);\n        }\n    }\n\n    private IEnumerator Hurt(float hurtDisplayTime)\n    {\n        Debug.Log($\"[DamagingCollider] Hurt room: {gameObject.name}\");\n        ShowFullScreenEffect();\n        yield return new WaitForSeconds(hurtDisplayTime);\n        \n        float elapsedTime = 0;\n        while (elapsedTime < _hurtFadeOutTime)\n        {\n            elapsedTime += Time.deltaTime;\n            float lerpedVoronoi = Mathf.Lerp(VORONOI_INTENSITY_START_AMOUNT, 0f, elapsedTime / _hurtFadeOutTime);\n            float lerpedVignette = Mathf.Lerp(VIGNETTE_INTENSITY_START_AMOUNT, 0f, elapsedTime / _hurtFadeOutTime);\n            \n            fullScreenFX.screenEffectMaterial.SetFloat(_voronoiIntensity, lerpedVoronoi);\n            fullScreenFX.screenEffectMaterial.SetFloat(_vignetteIntensity, lerpedVignette);\n            yield return null;\n        }\n    }\n\n    private void ShowFullScreenEffect()\n    {\n        ExtractScriptableRendererData();\n        foreach ( var renderObjSetting in _scriptableRendererData.rendererFeatures)\n        {\n            if (renderObjSetting.name == screenEffectName)\n            {\n                renderObjSetting.SetActive(true);\n            }\n        }\n    }\n\n    private ScriptableRendererData _scriptableRendererData;\n    \n    private void ExtractScriptableRendererData()\n    {\n        var pipeline = ((UniversalRenderPipelineAsset)GraphicsSettings.renderPipelineAsset);\n        FieldInfo propertyInfo = pipeline.GetType(  ).GetField( \"m_RendererDataList\", BindingFlags.Instance | BindingFlags.NonPublic );\n        _scriptableRendererData = ((ScriptableRendererData[]) propertyInfo?.GetValue( pipeline ))?[0];\n    }\n\n    private void HideFullScreenEffect()\n    {\n        ExtractScriptableRendererData();\n        foreach ( var renderObjSetting in _scriptableRendererData.rendererFeatures)\n        {\n            if (renderObjSetting.name == screenEffectName)\n            {\n                renderObjSetting.SetActive(false);\n            }\n        }\n        //StartCoroutine(Hurt(.0f));\n    }\n\n    public void ShowScreenFXIfRequired()\n    {\n        if (screenEffectName == string.Empty)\n            return;\n\n        ShowFullScreenEffect();\n    }\n\n    public void HideScreenFXIfRequired()\n    {\n        if (screenEffectName == string.Empty)\n            return;\n        \n        HideFullScreenEffect();\n    }\n\n    private void SetupAndDealDamage(FishnetInvectorHealthController hc, Vector3 closestPoint)\n    {\n        _damagePerTick.senderNetworkObjectID = hc.ObjectId;\n        _damagePerTick.receiver = hc.transform;\n        _damagePerTick.hitPosition = closestPoint;\n        _damagePerTick.type = vDamage.DamageType.Trap;\n        Debug.Log($\"[DamagingCollider] SetupAndDealDamage room: {gameObject.name}; player: {hc.gameObject.name}\");\n        FNvDamage fNvDamage = _damagePerTick.ToFNvDamage();\n        hc.CmdDealMeDamagePlease(fNvDamage);\n        var unitComps = hc.UnitComponents;\n        unitComps.AttachmentPoints.GetAttachmentPoint(_fxSpawnPoint);\n        //itween allocate _fxPool.Allocate() and deallocate _fxPool.Deallocate() after 1 sec\n        if (_fxPrefab != null)\n        {\n            var fx = _fxPool.Allocate();\n            fx.position = unitComps.AttachmentPoints.GetAttachmentPoint(_fxSpawnPoint).position;\n            fx.rotation = unitComps.AttachmentPoints.GetAttachmentPoint(_fxSpawnPoint).rotation;\n            StartCoroutine(DestroyFX(fx));\n        }\n    }\n\n    private IEnumerator DestroyFX(Transform fx)\n    {\n        yield return new WaitForSeconds(1f);\n        _fxPool.Deallocate(fx);\n    }\n\n    [Serializable]\n    public struct FullScreenFX\n    {\n        public ScriptableRendererFeature[] renderFeatures;\n        public Material screenEffectMaterial;\n    }\n}"
  }
]
```