```json
[
  {
    "FilePath": "Assets\\Sanat\\CodeGenerator\\ApiGemini\\ApiGemini.cs",
    "Content": "using System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Networking;\n\nnamespace Sanat.ApiGemini\n{\n    public static class Gemini\n    {\n        public static string BaseURL { get; set; } = \"https://us-central1-aiplatform.googleapis.com/v1/\";\n        public static string BaseURL2 { get; set; } = \"https://generativelanguage.googleapis.com/v1beta/models/\";\n        public const string PREFS_GEMINI_PROJECT_NAME = \"GeminiProjectName\";\n        public static string TextToSpeechURL = \"https://texttospeech.googleapis.com/v1/text:synthesize\";\n        public static string GetGeminiProjectName()\n        {\n            return PlayerPrefs.GetString(PREFS_GEMINI_PROJECT_NAME, \"\");\n        }\n\n        public static UnityWebRequestAsyncOperation SubmitChatAsync(\n            string apiKey, \n            string model, \n            float temperature, \n            int maxTokens,\n            List<ChatMessage> messages, \n            Action<string> callback)\n        {\n            var chatRequest = new ChatRequest(messages[0].content, temperature);\n            string jsonData = JsonUtility.ToJson(chatRequest);\n            string generatedUrl = $"{BaseURL2}{model}:generateContent?key={apiKey}";\n            UnityWebRequest webRequest = CreateWebRequest(apiKey, generatedUrl, jsonData);\n\n            UnityWebRequestAsyncOperation asyncOp = webRequest.SendWebRequest();\n            asyncOp.completed += (op) =>\n            {\n                var success = webRequest.result == UnityWebRequest.Result.Success;\n                var text = success ? webRequest.downloadHandler.text : string.Empty;\n                if (!success) Debug.Log($"{webRequest.error} {apiKey}\n{webRequest.downloadHandler.text}");\n                webRequest.Dispose();\n\n                if (!string.IsNullOrEmpty(text))\n                {\n                    var responseData = JsonUtility.FromJson<ChatResponse>(text);\n                    if (responseData.candidates != null && responseData.candidates.Count > 0 && responseData.candidates[0].content != null && responseData.candidates[0].content.parts != null && responseData.candidates[0].content.parts.Count > 0) \n                    {\n                        text = responseData.candidates[0].content.parts[0].text.Trim();\n                    }\n                    else\n                    {\n                        Debug.LogError(\"Unexpected response format: \" + text);\n                        text = \"Error: Unexpected response format.\";\n                    }\n                    var tokensPrompt = responseData.usageMetadata.promptTokenCount;\n                    var tokensCompletion = responseData.usageMetadata.candidatesTokenCount;\n                    var tokensTotal = responseData.usageMetadata.totalTokenCount;\n\n                    Debug.Log($"{model} Usage: prompt_tokens: {tokensPrompt}; completion_tokens: {tokensCompletion}; total_tokens: {tokensTotal}");\n                }\n                callback?.Invoke(text);\n            };\n\n            return asyncOp;\n        }\n\n        public static UnityWebRequest CreateWebRequest(string apiKey, string url, string jsonData)\n        {\n            byte[] postData = System.Text.Encoding.UTF8.GetBytes(jsonData);\n            UnityWebRequest webRequest = new UnityWebRequest(url, \"POST\")\n            {\n                uploadHandler = new UploadHandlerRaw(postData),\n                downloadHandler = new DownloadHandlerBuffer(),\n                disposeUploadHandlerOnDispose = true,\n                disposeDownloadHandlerOnDispose = true\n            };\n            webRequest.SetRequestHeader(\"Content-Type\", \"application/json\");\n\n            return webRequest;\n        }\n\n        public static void GenerateTextToSpeech(string text, string languageCode, string name, string ssmlGender, Action<AudioClip> callback)\n        {\n            var request = new TextToSpeechRequest(text, languageCode, name, ssmlGender);\n            string jsonData = JsonUtility.ToJson(request);\n            UnityWebRequest webRequest = CreateWebRequest(GetGeminiProjectName(), TextToSpeechURL, jsonData);\n\n            UnityWebRequestAsyncOperation asyncOp = webRequest.SendWebRequest();\n            asyncOp.completed += (op) =>\n            {\n                var success = webRequest.result == UnityWebRequest.Result.Success;\n                if (!success)\n                {\n                    Debug.Log($"{webRequest.error} {GetGeminiProjectName()}\n{webRequest.downloadHandler.text}");\n                    callback?.Invoke(null);\n                    return;\n                }\n                \n                var audioData = webRequest.downloadHandler.data;\n                float[] floatData = ConvertByteToFloatArray(audioData);\n                AudioClip audioClip = AudioClip.Create(\"TextToSpeech\", floatData.Length, 1, 44100, false);\n                audioClip.SetData(floatData, 0);\n                callback?.Invoke(audioClip);\n            };\n        }\n\n        private static float[] ConvertByteToFloatArray(byte[] byteArray)\n        {\n            int floatArrayLength = byteArray.Length / 4;\n            float[] floatArray = new float[floatArrayLength];\n            for (int i = 0; i < floatArrayLength; i++)\n            {\n                floatArray[i] = BitConverter.ToSingle(byteArray, i * 4);\n            }\n            return floatArray;\n        }\n    }\n\n    [Serializable]\n    public class TextToSpeechRequest\n    {\n        public Input input;\n        public Voice voice;\n        public AudioConfig audioConfig;\n\n        public TextToSpeechRequest(string text, string languageCode, string name, string ssmlGender)\n        {\n            input = new Input { text = text };\n            voice = new Voice { languageCode = languageCode, name = name, ssmlGender = ssmlGender };\n            audioConfig = new AudioConfig { audioEncoding = \"MP3\" };\n        }\n    }\n\n    [Serializable]\n    public class Input\n    {\n        public string text;\n    }\n\n    [Serializable]\n    public class Voice\n    {\n        public string languageCode;\n        public string name;\n        public string ssmlGender;\n    }\n\n    [Serializable]\n    public class AudioConfig\n    {\n        public string audioEncoding;\n    }\n\n    [Serializable]\n    public class ChatRequest\n    {\n        public Contents contents;\n        public SafetySettings safety_settings;\n        public GenerationConfig generation_config;\n\n        public ChatRequest(string message, float temperature)\n        {\n            contents = new Contents\n            {\n                role = \"user\",\n                parts = new Parts { text = message }\n            };\n            safety_settings = new SafetySettings\n            {\n                category = \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n                threshold = \"BLOCK_LOW_AND_ABOVE\"\n            };\n            generation_config = new GenerationConfig\n            {\n                temperature = temperature,\n                topP = 0.8f,\n                topK = 40\n            };\n        }\n    }\n\n    [Serializable]\n    public class Contents\n    {\n        public string role;\n        public Parts parts;\n    }\n\n    [Serializable]\n    public class Parts\n    {\n        public string text;\n    }\n\n    [Serializable]\n    public class SafetySettings\n    {\n        public string category;\n        public string threshold;\n    }\n\n    [Serializable]\n    public class GenerationConfig\n    {\n        public float temperature;\n        public float topP;\n        public int topK;\n    }\n\n    [Serializable]\n    public class ChatMessage\n    {\n        public string role;\n        public string content;\n\n        public ChatMessage(string role, string content)\n        {\n            this.role = role;\n            this.content = content;\n        }\n    }\n\n    [Serializable]\n    public class ChatResponse\n    {\n        public List<Candidate> candidates;\n        public UsageMetadata usageMetadata;\n    }\n\n    [Serializable]\n    public class Candidate\n    {\n        public Content content;\n        public string finishReason;\n        public List<SafetyRating> safetyRatings;\n    }\n\n    [Serializable]\n    public class Content\n    {\n        public List<Part> parts;\n        public string role;\n    }\n\n    [Serializable]\n    public class Part\n    {\n        public string text;\n    }\n\n    [Serializable]\n    public class SafetyRating\n    {\n        public string category;\n        public string probability;\n    }\n\n    [Serializable]\n    public class UsageMetadata\n    {\n        public int promptTokenCount;\n        public int candidatesTokenCount;\n        public int totalTokenCount;\n    }\n}"
  }
]
```