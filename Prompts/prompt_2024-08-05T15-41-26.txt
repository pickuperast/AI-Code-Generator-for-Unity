# ROLE:
Unity3D code architect.

# GOAL:
Write specific and detailed code for Unity3D projects.

# BACKSTORY:
You are a Unity 3D Code Writer. You write specific and detailed code for Unity 3D projects in C#.
You provide solutions to coding problems, write scripts for game mechanics, and integrate various assets and systems.
You have a deep understanding of Unity 3D, C#, and game development principles.
You follow best practices for performance optimization, code organization, and version control.
You collaborate closely with the Unity 3D Architect to ensure that the codebase aligns with the overall project architecture.
Stick and balance between with Clean code principles and SOLID principles and 'Clean' Code, Horrible Performance - by Casey Muratori.
Make clean and efficient code, remember that focusing exclusively on either aspect can lead to less optimal results.
Maintaining a good understanding of the trade-offs between readability, maintainability, and performance is crucial.
Keep in mind that NetworkBehaviour constructors are not allowed.
Remember that [SyncObject], [SyncVar] are allowed only in NetworkBehaviour classes.
Always provide FULL CODE of the file just to copy paste code and application should run.
DO NOT write explanations for the code.
DO NOT skip showing fully method where code was changed.
DO NOT provide comments in code.
include file path as first row for example(without quotes): "// Assets\-ZombieRoyale\Scripts\LLM AI\Personality\Personality.cs"
# CODE: // Assets\Sanat\CodeGenerator\ApiGemini\ApiGemini.cs:
 // Assets\Sanat\CodeGenerator\ApiGemini\ApiGemini.cs:
 using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Networking;

namespace Sanat.ApiGemini
{
    public static class Gemini
    {
        public static string BaseURL { get; set; } = "https://us-central1-aiplatform.googleapis.com/v1/";
        public static string BaseURL2 { get; set; } = "https://generativelanguage.googleapis.com/v1beta/models/";
        public const string PREFS_GEMINI_PROJECT_NAME = "GeminiProjectName";
        public static string TextToSpeechURL = "https://texttospeech.googleapis.com/v1/text:synthesize";
        public static string GetGeminiProjectName()
        {
            return PlayerPrefs.GetString(PREFS_GEMINI_PROJECT_NAME, "");
        }

        public static UnityWebRequestAsyncOperation SubmitChatAsync(
            string apiKey, 
            string model, 
            float temperature, 
            int maxTokens,
            List<ChatMessage> messages, 
            Action<string> callback)
        {
            var chatRequest = new ChatRequest(messages[0].content, temperature, maxTokens);
            string jsonData = JsonUtility.ToJson(chatRequest);
            string generatedUrl = $"{BaseURL2}{model}:generateContent?key={apiKey}";
            UnityWebRequest webRequest = CreateWebRequest(apiKey, generatedUrl, jsonData);

            UnityWebRequestAsyncOperation asyncOp = webRequest.SendWebRequest();
            asyncOp.completed += (op) =>
            {
                var success = webRequest.result == UnityWebRequest.Result.Success;
                var text = success ? webRequest.downloadHandler.text : string.Empty;
                if (!success) Debug.Log($"{webRequest.error} {apiKey}\n{webRequest.downloadHandler.text}");
                webRequest.Dispose();

                if (!string.IsNullOrEmpty(text))
                {
                    var responseData = JsonUtility.FromJson<ChatResponse>(text);
                    text = responseData.candidates[0].content.parts[0].text.Trim();
                    var tokensPrompt = responseData.usageMetadata.promptTokenCount;
                    var tokensCompletion = responseData.usageMetadata.candidatesTokenCount;
                    var tokensTotal = responseData.usageMetadata.totalTokenCount;

                    Debug.Log($"{model} Usage: prompt_tokens: {tokensPrompt}; completion_tokens: {tokensCompletion}; total_tokens: {tokensTotal}");
                }
                callback?.Invoke(text);
            };

            return asyncOp;
        }

        public static UnityWebRequest CreateWebRequest(string apiKey, string url, string jsonData)
        {
            byte[] postData = System.Text.Encoding.UTF8.GetBytes(jsonData);
            UnityWebRequest webRequest = new UnityWebRequest(url, "POST")
            {
                uploadHandler = new UploadHandlerRaw(postData),
                downloadHandler = new DownloadHandlerBuffer(),
                disposeUploadHandlerOnDispose = true,
                disposeDownloadHandlerOnDispose = true
            };
            webRequest.SetRequestHeader("Content-Type", "application/json");

            return webRequest;
        }

        public static void GenerateTextToSpeech(string text, string languageCode, string name, string ssmlGender, Action<AudioClip> callback)
        {
            var request = new TextToSpeechRequest(text, languageCode, name, ssmlGender);
            string jsonData = JsonUtility.ToJson(request);
            UnityWebRequest webRequest = CreateWebRequest(GetGeminiProjectName(), TextToSpeechURL, jsonData);

            UnityWebRequestAsyncOperation asyncOp = webRequest.SendWebRequest();
            asyncOp.completed += (op) =>
            {
                var success = webRequest.result == UnityWebRequest.Result.Success;
                if (!success)
                {
                    Debug.Log($"{webRequest.error} {GetGeminiProjectName()}\n{webRequest.downloadHandler.text}");
                    callback?.Invoke(null);
                    return;
                }
                
                var audioData = webRequest.downloadHandler.data;
                float[] floatData = ConvertByteToFloatArray(audioData);
                AudioClip audioClip = AudioClip.Create("TextToSpeech", floatData.Length, 1, 44100, false);
                audioClip.SetData(floatData, 0);
                callback?.Invoke(audioClip);
            };
        }

        private static float[] ConvertByteToFloatArray(byte[] byteArray)
        {
            int floatArrayLength = byteArray.Length / 4;
            float[] floatArray = new float[floatArrayLength];
            for (int i = 0; i < floatArrayLength; i++)
            {
                floatArray[i] = BitConverter.ToSingle(byteArray, i * 4);
            }
            return floatArray;
        }
    }

    [Serializable]
    public class TextToSpeechRequest
    {
        public Input input;
        public Voice voice;
        public AudioConfig audioConfig;

        public TextToSpeechRequest(string text, string languageCode, string name, string ssmlGender)
        {
            input = new Input { text = text };
            voice = new Voice { languageCode = languageCode, name = name, ssmlGender = ssmlGender };
            audioConfig = new AudioConfig { audioEncoding = "MP3" };
        }
    }

    [Serializable]
    public class Input
    {
        public string text;
    }

    [Serializable]
    public class Voice
    {
        public string languageCode;
        public string name;
        public string ssmlGender;
    }

    [Serializable]
    public class AudioConfig
    {
        public string audioEncoding;
    }

    [Serializable]
    public class ChatRequest
    {
        public Contents contents;
        public SafetySettings safety_settings;
        public GenerationConfig generation_config;
        public ToolConfig tool_config;

        public ChatRequest(string message, float temperature, int maxTokens)
        {
            contents = new Contents
            {
                role = "user",
                parts = new Parts { text = message }
            };
            safety_settings = new SafetySettings
            {
                category = "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                threshold = "BLOCK_LOW_AND_ABOVE"
            };
            generation_config = new GenerationConfig
            {
                temperature = temperature,
                topP = 0.8f,
                topK = 40,
                maxOutputTokens = maxTokens
            };
            tool_config = new ToolConfig
            {
                functionCallingConfig = new FunctionCallingConfig
                {
                    mode = "FUNCTION_CALLING_MODE_ENABLED"
                }
            };
        }
    }

    [Serializable]
    public class Contents
    {
        public string role;
        public Parts parts;
    }

    [Serializable]
    public class Parts
    {
        public string text;
    }

    [Serializable]
    public class SafetySettings
    {
        public string category;
        public string threshold;
    }

    [Serializable]
    public class GenerationConfig
    {
        public float temperature;
        public float topP;
        public int topK;
        public int maxOutputTokens;
    }

    [Serializable]
    public class ToolConfig
    {
        public FunctionCallingConfig functionCallingConfig;
    }

    [Serializable]
    public class FunctionCallingConfig
    {
        public string mode;
    }

    [Serializable]
    public class ChatMessage
    {
        public string role;
        public string content;

        public ChatMessage(string role, string content)
        {
            this.role = role;
            this.content = content;
        }
    }

    [Serializable]
    public class ChatResponse
    {
        public List<Candidate> candidates;
        public UsageMetadata usageMetadata;
    }

    [Serializable]
    public class Candidate
    {
        public Content content;
        public string finishReason;
        public List<SafetyRating> safetyRatings;
    }

    [Serializable]
    public class Content
    {
        public List<Part> parts;
        public string role;
    }

    [Serializable]
    public class Part
    {
        public string text;
    }

    [Serializable]
    public class SafetyRating
    {
        public string category;
        public string probability;
    }

    [Serializable]
    public class UsageMetadata
    {
        public int promptTokenCount;
        public int candidatesTokenCount;
        public int totalTokenCount;
    }
} 



# TASK: Create additional helping script file, that will have all this structures: ## API Report File for "@google/generative-ai"

> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).

```ts

// @public
export interface BaseParams {
    // (undocumented)
    generationConfig?: GenerationConfig;
    // (undocumented)
    safetySettings?: SafetySetting[];
}

// @public
export interface BatchEmbedContentsRequest {
    // (undocumented)
    requests: EmbedContentRequest[];
}

// @public
export interface BatchEmbedContentsResponse {
    // (undocumented)
    embeddings: ContentEmbedding[];
}

// @public
export enum BlockReason {
    // (undocumented)
    BLOCKED_REASON_UNSPECIFIED = "BLOCKED_REASON_UNSPECIFIED",
    // (undocumented)
    OTHER = "OTHER",
    // (undocumented)
    SAFETY = "SAFETY"
}

// @public
export interface CachedContent extends CachedContentBase {
    createTime?: string;
    // (undocumented)
    name?: string;
    ttl?: string;
    updateTime?: string;
}

// @public (undocumented)
export interface CachedContentBase {
    // (undocumented)
    contents: Content[];
    // (undocumented)
    displayName?: string;
    expireTime?: string;
    // (undocumented)
    model?: string;
    // (undocumented)
    systemInstruction?: string | Part | Content;
    // (undocumented)
    toolConfig?: ToolConfig;
    // (undocumented)
    tools?: Tool[];
}

// @public
export class ChatSession {
    constructor(apiKey: string, model: string, params?: StartChatParams, _requestOptions?: RequestOptions);
    getHistory(): Promise<Content[]>;
    // (undocumented)
    model: string;
    // (undocumented)
    params?: StartChatParams;
    sendMessage(request: string | Array<string | Part>, requestOptions?: SingleRequestOptions): Promise<GenerateContentResult>;
    sendMessageStream(request: string | Array<string | Part>, requestOptions?: SingleRequestOptions): Promise<GenerateContentStreamResult>;
}

// @public
export interface CitationMetadata {
    // (undocumented)
    citationSources: CitationSource[];
}

// @public
export interface CitationSource {
    // (undocumented)
    endIndex?: number;
    // (undocumented)
    license?: string;
    // (undocumented)
    startIndex?: number;
    // (undocumented)
    uri?: string;
}

// @public
export interface CodeExecutionResult {
    outcome: Outcome;
    output: string;
}

// @public
export interface CodeExecutionResultPart {
    // (undocumented)
    codeExecutionResult: CodeExecutionResult;
    // (undocumented)
    executableCode?: never;
    // (undocumented)
    fileData?: never;
    // (undocumented)
    functionCall?: never;
    // (undocumented)
    functionResponse?: never;
    // (undocumented)
    inlineData?: never;
    // (undocumented)
    text?: never;
}

// @public
export interface CodeExecutionTool {
    codeExecution: {};
}

// @public
export interface Content {
    // (undocumented)
    parts: Part[];
    // (undocumented)
    role: string;
}

// @public
export interface ContentEmbedding {
    // (undocumented)
    values: number[];
}

// @public
export interface CountTokensRequest {
    // (undocumented)
    contents?: Content[];
    // (undocumented)
    generateContentRequest?: GenerateContentRequest;
}

// @internal
export interface _CountTokensRequestInternal {
    // (undocumented)
    contents?: Content[];
    // (undocumented)
    generateContentRequest?: _GenerateContentRequestInternal;
}

// @public
export interface CountTokensResponse {
    // (undocumented)
    totalTokens: number;
}

// @public
export interface EmbedContentRequest {
    // (undocumented)
    content: Content;
    // (undocumented)
    taskType?: TaskType;
    // (undocumented)
    title?: string;
}

// @public
export interface EmbedContentResponse {
    // (undocumented)
    embedding: ContentEmbedding;
}

// @public
export interface EnhancedGenerateContentResponse extends GenerateContentResponse {
    // @deprecated
    functionCall: () => FunctionCall | undefined;
    functionCalls: () => FunctionCall[] | undefined;
    text: () => string;
}

// @public
export interface ErrorDetails {
    // (undocumented)
    "@type"?: string;
    // (undocumented)
    [key: string]: unknown;
    // (undocumented)
    domain?: string;
    // (undocumented)
    metadata?: Record<string, unknown>;
    // (undocumented)
    reason?: string;
}

// @public
export interface ExecutableCode {
    code: string;
    language: ExecutableCodeLanguage;
}

// @public (undocumented)
export enum ExecutableCodeLanguage {
    // (undocumented)
    LANGUAGE_UNSPECIFIED = "language_unspecified",
    // (undocumented)
    PYTHON = "python"
}

// @public
export interface ExecutableCodePart {
    // (undocumented)
    codeExecutionResult?: never;
    // (undocumented)
    executableCode: ExecutableCode;
    // (undocumented)
    fileData?: never;
    // (undocumented)
    functionCall?: never;
    // (undocumented)
    functionResponse?: never;
    // (undocumented)
    inlineData?: never;
    // (undocumented)
    text?: never;
}

// @public
export interface FileData {
    // (undocumented)
    fileUri: string;
    // (undocumented)
    mimeType: string;
}

// @public
export interface FileDataPart {
    // (undocumented)
    codeExecutionResult?: never;
    // (undocumented)
    executableCode?: never;
    // (undocumented)
    fileData: FileData;
    // (undocumented)
    functionCall?: never;
    // (undocumented)
    functionResponse?: never;
    // (undocumented)
    inlineData?: never;
    // (undocumented)
    text?: never;
}

// @public
export enum FinishReason {
    // (undocumented)
    FINISH_REASON_UNSPECIFIED = "FINISH_REASON_UNSPECIFIED",
    // (undocumented)
    LANGUAGE = "LANGUAGE",
    // (undocumented)
    MAX_TOKENS = "MAX_TOKENS",
    // (undocumented)
    OTHER = "OTHER",
    // (undocumented)
    RECITATION = "RECITATION",
    // (undocumented)
    SAFETY = "SAFETY",
    // (undocumented)
    STOP = "STOP"
}

// @public
export interface FunctionCall {
    // (undocumented)
    args: object;
    // (undocumented)
    name: string;
}

// @public (undocumented)
export interface FunctionCallingConfig {
    // (undocumented)
    allowedFunctionNames?: string[];
    // (undocumented)
    mode?: FunctionCallingMode;
}

// @public (undocumented)
export enum FunctionCallingMode {
    // (undocumented)
    ANY = "ANY",
    // (undocumented)
    AUTO = "AUTO",
    // (undocumented)
    MODE_UNSPECIFIED = "MODE_UNSPECIFIED",
    // (undocumented)
    NONE = "NONE"
}

// @public
export interface FunctionCallPart {
    // (undocumented)
    codeExecutionResult?: never;
    // (undocumented)
    executableCode?: never;
    // (undocumented)
    fileData?: never;
    // (undocumented)
    functionCall: FunctionCall;
    // (undocumented)
    functionResponse?: never;
    // (undocumented)
    inlineData?: never;
    // (undocumented)
    text?: never;
}

// @public
export interface FunctionDeclaration {
    description?: string;
    name: string;
    parameters?: FunctionDeclarationSchema;
}

// @public
export interface FunctionDeclarationSchema {
    description?: string;
    properties: {
        [k: string]: FunctionDeclarationSchemaProperty;
    };
    required?: string[];
    type: FunctionDeclarationSchemaType;
}

// @public
export interface FunctionDeclarationSchemaProperty extends Schema {
}

// @public
export enum FunctionDeclarationSchemaType {
    ARRAY = "ARRAY",
    BOOLEAN = "BOOLEAN",
    INTEGER = "INTEGER",
    NUMBER = "NUMBER",
    OBJECT = "OBJECT",
    STRING = "STRING"
}

// @public
export interface FunctionDeclarationsTool {
    functionDeclarations?: FunctionDeclaration[];
}

// @public
export interface FunctionResponse {
    // (undocumented)
    name: string;
    // (undocumented)
    response: object;
}

// @public
export interface FunctionResponsePart {
    // (undocumented)
    codeExecutionResult?: never;
    // (undocumented)
    executableCode?: never;
    // (undocumented)
    fileData?: never;
    // (undocumented)
    functionCall?: never;
    // (undocumented)
    functionResponse: FunctionResponse;
    // (undocumented)
    inlineData?: never;
    // (undocumented)
    text?: never;
}

// @public
export interface GenerateContentCandidate {
    // (undocumented)
    citationMetadata?: CitationMetadata;
    // (undocumented)
    content: Content;
    // (undocumented)
    finishMessage?: string;
    // (undocumented)
    finishReason?: FinishReason;
    // (undocumented)
    index: number;
    // (undocumented)
    safetyRatings?: SafetyRating[];
}

// @public
export interface GenerateContentRequest extends BaseParams {
    cachedContent?: string;
    // (undocumented)
    contents: Content[];
    // (undocumented)
    systemInstruction?: string | Part | Content;
    // (undocumented)
    toolConfig?: ToolConfig;
    // (undocumented)
    tools?: Tool[];
}

// @internal
export interface _GenerateContentRequestInternal extends GenerateContentRequest {
    // (undocumented)
    model?: string;
}

// @public
export interface GenerateContentResponse {
    candidates?: GenerateContentCandidate[];
    promptFeedback?: PromptFeedback;
    usageMetadata?: UsageMetadata;
}

// @public
export interface GenerateContentResult {
    // (undocumented)
    response: EnhancedGenerateContentResponse;
}

// @public
export interface GenerateContentStreamResult {
    // (undocumented)
    response: Promise<EnhancedGenerateContentResponse>;
    // (undocumented)
    stream: AsyncGenerator<EnhancedGenerateContentResponse>;
}

// @public
export interface GenerationConfig {
    // (undocumented)
    candidateCount?: number;
    // (undocumented)
    maxOutputTokens?: number;
    responseMimeType?: string;
    responseSchema?: ResponseSchema;
    // (undocumented)
    stopSequences?: string[];
    // (undocumented)
    temperature?: number;
    // (undocumented)
    topK?: number;
    // (undocumented)
    topP?: number;
}

// @public
export interface GenerativeContentBlob {
    data: string;
    // (undocumented)
    mimeType: string;
}

// @public
export class GenerativeModel {
    constructor(apiKey: string, modelParams: ModelParams, _requestOptions?: RequestOptions);
    // (undocumented)
    apiKey: string;
    batchEmbedContents(batchEmbedContentRequest: BatchEmbedContentsRequest, requestOptions?: SingleRequestOptions): Promise<BatchEmbedContentsResponse>;
    // (undocumented)
    cachedContent: CachedContent;
    countTokens(request: CountTokensRequest | string | Array<string | Part>, requestOptions?: SingleRequestOptions): Promise<CountTokensResponse>;
    embedContent(request: EmbedContentRequest | string | Array<string | Part>, requestOptions?: SingleRequestOptions): Promise<EmbedContentResponse>;
    generateContent(request: GenerateContentRequest | string | Array<string | Part>, requestOptions?: SingleRequestOptions): Promise<GenerateContentResult>;
    generateContentStream(request: GenerateContentRequest | string | Array<string | Part>, requestOptions?: SingleRequestOptions): Promise<GenerateContentStreamResult>;
    // (undocumented)
    generationConfig: GenerationConfig;
    // (undocumented)
    model: string;
    // (undocumented)
    requestOptions: RequestOptions;
    // (undocumented)
    safetySettings: SafetySetting[];
    startChat(startChatParams?: StartChatParams): ChatSession;
    // (undocumented)
    systemInstruction?: Content;
    // (undocumented)
    toolConfig?: ToolConfig;
    // (undocumented)
    tools?: Tool[];
}

// @public
export class GoogleGenerativeAI {
    constructor(apiKey: string);
    // (undocumented)
    apiKey: string;
    getGenerativeModel(modelParams: ModelParams, requestOptions?: RequestOptions): GenerativeModel;
    getGenerativeModelFromCachedContent(cachedContent: CachedContent, requestOptions?: RequestOptions): GenerativeModel;
}

// @public
export class GoogleGenerativeAIError extends Error {
    constructor(message: string);
}

// @public
export class GoogleGenerativeAIFetchError extends GoogleGenerativeAIError {
    constructor(message: string, status?: number, statusText?: string, errorDetails?: ErrorDetails[]);
    // (undocumented)
    errorDetails?: ErrorDetails[];
    // (undocumented)
    status?: number;
    // (undocumented)
    statusText?: string;
}

// @public
export class GoogleGenerativeAIRequestInputError extends GoogleGenerativeAIError {
}

// @public
export class GoogleGenerativeAIResponseError<T> extends GoogleGenerativeAIError {
    constructor(message: string, response?: T);
    // (undocumented)
    response?: T;
}

// @public
export enum HarmBlockThreshold {
    // (undocumented)
    BLOCK_LOW_AND_ABOVE = "BLOCK_LOW_AND_ABOVE",
    // (undocumented)
    BLOCK_MEDIUM_AND_ABOVE = "BLOCK_MEDIUM_AND_ABOVE",
    // (undocumented)
    BLOCK_NONE = "BLOCK_NONE",
    // (undocumented)
    BLOCK_ONLY_HIGH = "BLOCK_ONLY_HIGH",
    // (undocumented)
    HARM_BLOCK_THRESHOLD_UNSPECIFIED = "HARM_BLOCK_THRESHOLD_UNSPECIFIED"
}

// @public
export enum HarmCategory {
    // (undocumented)
    HARM_CATEGORY_DANGEROUS_CONTENT = "HARM_CATEGORY_DANGEROUS_CONTENT",
    // (undocumented)
    HARM_CATEGORY_HARASSMENT = "HARM_CATEGORY_HARASSMENT",
    // (undocumented)
    HARM_CATEGORY_HATE_SPEECH = "HARM_CATEGORY_HATE_SPEECH",
    // (undocumented)
    HARM_CATEGORY_SEXUALLY_EXPLICIT = "HARM_CATEGORY_SEXUALLY_EXPLICIT",
    // (undocumented)
    HARM_CATEGORY_UNSPECIFIED = "HARM_CATEGORY_UNSPECIFIED"
}

// @public
export enum HarmProbability {
    // (undocumented)
    HARM_PROBABILITY_UNSPECIFIED = "HARM_PROBABILITY_UNSPECIFIED",
    // (undocumented)
    HIGH = "HIGH",
    // (undocumented)
    LOW = "LOW",
    // (undocumented)
    MEDIUM = "MEDIUM",
    // (undocumented)
    NEGLIGIBLE = "NEGLIGIBLE"
}

// @public
export interface InlineDataPart {
    // (undocumented)
    codeExecutionResult?: never;
    // (undocumented)
    executableCode?: never;
    // (undocumented)
    fileData?: never;
    // (undocumented)
    functionCall?: never;
    // (undocumented)
    functionResponse?: never;
    // (undocumented)
    inlineData: GenerativeContentBlob;
    // (undocumented)
    text?: never;
}

// @public
export interface ModelParams extends BaseParams {
    // (undocumented)
    cachedContent?: CachedContent;
    // (undocumented)
    model: string;
    // (undocumented)
    systemInstruction?: string | Part | Content;
    // (undocumented)
    toolConfig?: ToolConfig;
    // (undocumented)
    tools?: Tool[];
}

// @public
export enum Outcome {
    OUTCOME_DEADLINE_EXCEEDED = "outcome_deadline_exceeded",
    OUTCOME_FAILED = "outcome_failed",
    OUTCOME_OK = "outcome_ok",
    OUTCOME_UNSPECIFIED = "outcome_unspecified"
}

// @public
export type Part = TextPart | InlineDataPart | FunctionCallPart | FunctionResponsePart | FileDataPart | ExecutableCodePart | CodeExecutionResultPart;

// @public
export const POSSIBLE_ROLES: readonly ["user", "model", "function", "system"];

// @public
export interface PromptFeedback {
    // (undocumented)
    blockReason: BlockReason;
    // (undocumented)
    blockReasonMessage?: string;
    // (undocumented)
    safetyRatings: SafetyRating[];
}

// @public
export interface RequestOptions {
    apiClient?: string;
    apiVersion?: string;
    baseUrl?: string;
    customHeaders?: Headers | Record<string, string>;
    timeout?: number;
}

// @public
export interface ResponseSchema extends Schema {
}

// @public
export interface SafetyRating {
    // (undocumented)
    category: HarmCategory;
    // (undocumented)
    probability: HarmProbability;
}

// @public
export interface SafetySetting {
    // (undocumented)
    category: HarmCategory;
    // (undocumented)
    threshold: HarmBlockThreshold;
}

// @public
export interface Schema {
    description?: string;
    enum?: string[];
    example?: unknown;
    format?: string;
    items?: FunctionDeclarationSchema;
    nullable?: boolean;
    properties?: {
        [k: string]: FunctionDeclarationSchema;
    };
    required?: string[];
    type?: FunctionDeclarationSchemaType;
}

// @public
export interface SingleRequestOptions extends RequestOptions {
    signal?: AbortSignal;
}

// @public
export interface StartChatParams extends BaseParams {
    cachedContent?: string;
    // (undocumented)
    history?: Content[];
    // (undocumented)
    systemInstruction?: string | Part | Content;
    // (undocumented)
    toolConfig?: ToolConfig;
    // (undocumented)
    tools?: Tool[];
}

// @public
export enum TaskType {
    // (undocumented)
    CLASSIFICATION = "CLASSIFICATION",
    // (undocumented)
    CLUSTERING = "CLUSTERING",
    // (undocumented)
    RETRIEVAL_DOCUMENT = "RETRIEVAL_DOCUMENT",
    // (undocumented)
    RETRIEVAL_QUERY = "RETRIEVAL_QUERY",
    // (undocumented)
    SEMANTIC_SIMILARITY = "SEMANTIC_SIMILARITY",
    // (undocumented)
    TASK_TYPE_UNSPECIFIED = "TASK_TYPE_UNSPECIFIED"
}

// @public
export interface TextPart {
    // (undocumented)
    codeExecutionResult?: never;
    // (undocumented)
    executableCode?: never;
    // (undocumented)
    fileData?: never;
    // (undocumented)
    functionCall?: never;
    // (undocumented)
    functionResponse?: never;
    // (undocumented)
    inlineData?: never;
    // (undocumented)
    text: string;
}

// @public
export type Tool = FunctionDeclarationsTool | CodeExecutionTool;

// @public
export interface ToolConfig {
    // (undocumented)
    functionCallingConfig: FunctionCallingConfig;
}

// @public
export interface UsageMetadata {
    cachedContentTokenCount?: number;
    candidatesTokenCount: number;
    promptTokenCount: number;
    totalTokenCount: number;
}

// (No @packageDocumentation comment for this package)

```
