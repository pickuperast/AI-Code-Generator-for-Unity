# ROLE:
Unity3D code architect.

# GOAL:
Write specific and detailed code for Unity3D projects.

# BACKSTORY:
You are a Unity 3D Code Writer. You write specific and detailed code for Unity 3D projects in C#.
You provide solutions to coding problems, write scripts for game mechanics, and integrate various assets and systems.
You have a deep understanding of Unity 3D, C#, and game development principles.
You follow best practices for performance optimization, code organization, and version control.
You collaborate closely with the Unity 3D Architect to ensure that the codebase aligns with the overall project architecture.
Stick and balance between with Clean code principles and SOLID principles and 'Clean' Code, Horrible Performance - by Casey Muratori.
Make clean and efficient code, remember that focusing exclusively on either aspect can lead to less optimal results.
Maintaining a good understanding of the trade-offs between readability, maintainability, and performance is crucial.
Keep in mind that NetworkBehaviour constructors are not allowed.
Remember that [SyncObject], [SyncVar] are allowed only in NetworkBehaviour classes.
Always provide FULL CODE of the file just to copy paste code and application should run.
DO NOT write explanations for the code.
DO NOT skip showing fully method where code was changed.
DO NOT provide comments in code.
# CODE: // Assets\Sanat\CodeGenerator\ApiGemini\ApiGemini.cs:
 using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Networking;

namespace Sanat.ApiGemini
{
    public static class Gemini
    {
        public static string BaseURL { get; set; } = "https://us-central1-aiplatform.googleapis.com/v1/";
        public static string BaseURL2 { get; set; } = "https://generativelanguage.googleapis.com/v1beta/models/";
        public const string PREFS_GEMINI_PROJECT_NAME = "GeminiProjectName";

        public static string GenerateContentURL2 => $"{BaseURL}projects/{GetGeminiProjectName()}/locations/us-central1/publishers/google/models/gemini-1.5-pro-preview-0514:generateContent";
        public static string GenerateContentURL => $"{BaseURL}projects/{GetGeminiProjectName()}/locations/us-central1/publishers/google/models/gemini-1.5-pro-preview-0514:generateContent";

        public static string GetGeminiProjectName()
        {
            return PlayerPrefs.GetString(PREFS_GEMINI_PROJECT_NAME, "");
        }

        public static UnityWebRequestAsyncOperation SubmitChatAsync(
            string apiKey, 
            string model, 
            float temperature, 
            int maxTokens,
            List<ChatMessage> messages, 
            Action<string> callback)
        {
            var chatRequest = new ChatRequest(messages[0].content, temperature);
            string jsonData = JsonUtility.ToJson(chatRequest);
            string generatedUrl = $"{BaseURL2}{model}:generateContent?key={apiKey}";
            UnityWebRequest webRequest = CreateWebRequest(apiKey, generatedUrl, jsonData);

            UnityWebRequestAsyncOperation asyncOp = webRequest.SendWebRequest();
            asyncOp.completed += (op) =>
            {
                var success = webRequest.result == UnityWebRequest.Result.Success;
                var text = success ? webRequest.downloadHandler.text : string.Empty;
                if (!success) Debug.Log($"{webRequest.error}\n{webRequest.downloadHandler.text}");
                webRequest.Dispose();

                if (!string.IsNullOrEmpty(text))
                {
                    var responseData = JsonUtility.FromJson<ChatResponse>(text);
                    text = responseData.candidates[0].content.parts[0].text.Trim();
                    var tokensPrompt = responseData.usageMetadata.promptTokenCount;
                    var tokensCompletion = responseData.usageMetadata.candidatesTokenCount;
                    var tokensTotal = responseData.usageMetadata.totalTokenCount;

                    Debug.Log($"{model} Usage: prompt_tokens: {tokensPrompt}; completion_tokens: {tokensCompletion}; total_tokens: {tokensTotal}");
                }
                callback?.Invoke(text);
            };

            return asyncOp;
        }

        public static UnityWebRequest CreateWebRequest(string apiKey, string url, string jsonData)
        {
            byte[] postData = System.Text.Encoding.UTF8.GetBytes(jsonData);
            UnityWebRequest webRequest = new UnityWebRequest(url, "POST")
            {
                uploadHandler = new UploadHandlerRaw(postData),
                downloadHandler = new DownloadHandlerBuffer(),
                disposeUploadHandlerOnDispose = true,
                disposeDownloadHandlerOnDispose = true
            };
            webRequest.SetRequestHeader("Content-Type", "application/json");
            //webRequest.SetRequestHeader("Authorization", "Bearer " + apiKey);

            return webRequest;
        }
    }

    [Serializable]
    public class ChatRequest
    {
        public Contents contents;
        public SafetySettings safety_settings;
        public GenerationConfig generation_config;

        public ChatRequest(string message, float temperature)
        {
            contents = new Contents
            {
                role = "user",
                parts = new Parts { text = message }
            };
            safety_settings = new SafetySettings
            {
                category = "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                threshold = "BLOCK_LOW_AND_ABOVE"
            };
            generation_config = new GenerationConfig
            {
                temperature = temperature,
                topP = 0.8f,
                topK = 40
            };
        }
    }

    [Serializable]
    public class Contents
    {
        public string role;
        public Parts parts;
    }

    [Serializable]
    public class Parts
    {
        public string text;
    }

    [Serializable]
    public class SafetySettings
    {
        public string category;
        public string threshold;
    }

    [Serializable]
    public class GenerationConfig
    {
        public float temperature;
        public float topP;
        public int topK;
    }

    [Serializable]
    public class ChatMessage
    {
        public string role;
        public string content;

        public ChatMessage(string role, string content)
        {
            this.role = role;
            this.content = content;
        }
    }

    [Serializable]
    public class ChatResponse
    {
        public List<Candidate> candidates;
        public UsageMetadata usageMetadata;
    }

    [Serializable]
    public class Candidate
    {
        public Content content;
        public string finishReason;
        public List<SafetyRating> safetyRatings;
    }

    [Serializable]
    public class Content
    {
        public List<Part> parts;
        public string role;
    }

    [Serializable]
    public class Part
    {
        public string text;
    }

    [Serializable]
    public class SafetyRating
    {
        public string category;
        public string probability;
    }

    [Serializable]
    public class UsageMetadata
    {
        public int promptTokenCount;
        public int candidatesTokenCount;
        public int totalTokenCount;
    }
} 

// Assets\Sanat\CodeGenerator\Agents\AbstractAgentHandler.cs:
 // Copyright (c) Sanat. All rights reserved.
using System;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using Sanat.ApiOpenAI;
using Sanat.ApiAnthropic;
using Sanat.ApiGemini;
using Sanat.ApiGroq;
using UnityEngine;
using UnityEngine.Networking;

namespace Sanat.CodeGenerator.Agents
{
    public abstract class AbstractAgentHandler
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public string[] Tools { get; set; }
        public float Temperature { get; set; }
        public string Instructions { get; set; }
        public ApiProviders SelectedApiProvider = ApiProviders.Anthropic;
        public ApiKeys Apikeys;
        public Action OnComplete;
        public enum ApiProviders { OpenAI, Anthropic, Groq, Gemini }
        
        
        
        public AbstractAgentHandler SetNext(AbstractAgentHandler handler)
        {
            _nextHandler = handler;
            return handler;
        }

        protected AbstractAgentHandler _nextHandler;

        protected abstract string PromptFilename();

        protected void StoreOpenAIKey(string key)
        {
            Apikeys.openAI = key;
        }
        
        public void StoreKeys(ApiKeys keys)
        {
            Apikeys = keys;
        }

        protected virtual Model GetModel()
        {
            return Model.GPT4o;
        }
        
        public static string LoadPrompt(string path)
        {
            if (File.Exists(path))
            {
                try
                {
                    Debug.Log($"Successfully loaded instructions from: {path}");
                    return File.ReadAllText(path);
                }
                catch (Exception e)
                {
                    Debug.LogError($"Error reading .md file: {e.Message}");
                }
            }
            else
            {
                Debug.LogError("The .md file does not exist in the specified path.");
            }
            return String.Empty;
        }

        public virtual void Handle(string input)
        {
            OnComplete?.Invoke();
            if (_nextHandler != null)
            {
                _nextHandler.Handle(input);
            }
        }
        
        public void AskBot(string prompt, float temp, Action<string> onComplete) {
            switch (SelectedApiProvider)
            {
                case ApiProviders.OpenAI:
                    AskChatGpt(prompt, temp, onComplete);
                    break;
                case ApiProviders.Anthropic:
                    AskAntrophic(prompt, temp, onComplete);
                    break;
                case ApiProviders.Groq:
                    AskGroq(prompt, temp, onComplete);
                    break;
                case ApiProviders.Gemini:
                    AskGemini(prompt, temp, onComplete);
                    break;
            }
        }
        
        public void AskChatGpt(string prompt, float temp, Action<string> onComplete) {
            List<ApiOpenAI.ChatMessage> messages = new List<ApiOpenAI.ChatMessage>();
            messages.Add(new ApiOpenAI.ChatMessage("user", prompt));
            var model = GetModel();
            
            UnityWebRequestAsyncOperation request = OpenAI.SubmitChatAsync(
                Apikeys.openAI,
                model,
                temp,
                model.MaxOutput,
                messages,
                onComplete
            );
        }
        
        public void AskAntrophic(string prompt, float temp, Action<string> onComplete) {
            List<ApiAnthropic.ChatMessage> messages = new List<ApiAnthropic.ChatMessage>();
            messages.Add(new ApiAnthropic.ChatMessage("user", prompt));

            UnityWebRequestAsyncOperation request = Anthropic.SubmitChatAsync(
                Apikeys.antrophic,
                ApiAnthropicModels.Claude35,
                temp,
                4000,
                messages,
                onComplete
            );
        }
        
        public void AskGroq(string prompt, float temp, Action<string> onComplete) {
            List<ApiGroq.ChatMessage> messages = new List<ApiGroq.ChatMessage>();
            messages.Add(new ApiGroq.ChatMessage("user", prompt));

            UnityWebRequestAsyncOperation request = Groq.SubmitChatAsync(
                Apikeys.groq,
                ApiGroqModels.Llama3_70b_8192,
                temp,
                4095,
                messages,
                onComplete
            );
        }
        
        public void AskGemini(string prompt, float temp, Action<string> onComplete) {
            List<ApiGemini.ChatMessage> messages = new List<ApiGemini.ChatMessage>();
            messages.Add(new ApiGemini.ChatMessage("user", prompt));

            UnityWebRequestAsyncOperation request = Gemini.SubmitChatAsync(
                Apikeys.gemini,
                ApiGeminiModels.Pro, // or whatever model you're using
                temp,
                4095,
                messages,
                onComplete
            );
        }

        public enum Brackets { round, square, curly, angle }
        
        public static string ClearResult(string input, Brackets bracket = Brackets.square)
        {
            string pattern = @"(\[.*\])";
            switch (bracket)
            {
                case Brackets.round:
                    pattern = @"(\(.*\))";
                    break;
                case Brackets.curly:
                    pattern = @"(\{.*\})";
                    break;
                case Brackets.angle:
                    pattern = @"(\<.*\>)";
                    break;
            }
            Match match = Regex.Match(input, pattern, RegexOptions.Singleline);
    
            if (match.Success)
            {
                return match.Groups[1].Value;
            }
            Debug.LogError("No match found");
            return input;
        }

        public struct ApiKeys
        {
            public string openAI;
            public string antrophic;
            public string groq;
            public string gemini;
            
            public ApiKeys(string openAI, string antrophic, string groq, string gemini)
            {
                this.openAI = openAI;
                this.antrophic = antrophic;
                this.groq = groq;
                this.gemini = gemini;
            }
        }
    }
} 



# TASK: update ApiGemini SubmitChatAsync prompt usage prices using this result json from calling that api: {
    "candidates": [
        {
            "content": {
                "role": "model",
                "parts": [
                    {
                        "text": "## Classic Banana Bread\n\n**Ingredients:**\n\n* 1 1/2 cups (190g) all-purpose flour\n* 1 teaspoon baking soda\n* 1/2 teaspoon salt\n* 1/2 cup (1 stick) unsalted butter, softened\n* 3/4 cup (150g) granulated sugar\n* 2 large eggs\n* 1 teaspoon vanilla extract\n* 1 cup (225g) mashed ripe bananas (about 2-3 bananas)\n\n**Instructions:**\n\n1. **Preheat oven to 350°F (175°C).** Grease and flour a 9x5 inch loaf pan.\n2. **Whisk dry ingredients:** In a medium bowl, whisk together the flour, baking soda, and salt.\n3. **Cream butter and sugar:** In a large bowl, cream together the softened butter and sugar until light and fluffy.\n4. **Add eggs and vanilla:** Beat in the eggs one at a time, then stir in the vanilla extract.\n5. **Fold in dry ingredients:** Gradually add the dry ingredients to the wet ingredients, mixing until just combined. Do not overmix.\n6. **Stir in bananas:** Gently fold in the mashed bananas until evenly distributed.\n7. **Pour batter into prepared pan:** Pour the batter into the greased and floured loaf pan.\n8. **Bake:** Bake for 50-60 minutes, or until a toothpick inserted into the center comes out clean.\n9. **Cool:** Let the bread cool in the pan for 10 minutes before inverting it onto a wire rack to cool completely.\n\n**Tips:**\n\n* For a richer flavor, use brown sugar instead of granulated sugar.\n* Add 1/2 cup chopped walnuts or chocolate chips for extra texture and flavor.\n* To prevent the top from browning too quickly, tent the loaf with foil after 30 minutes of baking.\n* Leftover banana bread can be stored in an airtight container at room temperature for up to 3 days, or frozen for longer storage.\n\nEnjoy your delicious homemade banana bread! \n"
                    }
                ]
            },
            "finishReason": "STOP",
            "safetyRatings": [
                {
                    "category": "HARM_CATEGORY_HATE_SPEECH",
                    "probability": "NEGLIGIBLE",
                    "probabilityScore": 0.09859887,
                    "severity": "HARM_SEVERITY_NEGLIGIBLE",
                    "severityScore": 0.116965584
                },
                {
                    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                    "probability": "NEGLIGIBLE",
                    "probabilityScore": 0.078925885,
                    "severity": "HARM_SEVERITY_NEGLIGIBLE",
                    "severityScore": 0.082253955
                },
                {
                    "category": "HARM_CATEGORY_HARASSMENT",
                    "probability": "NEGLIGIBLE",
                    "probabilityScore": 0.15674922,
                    "severity": "HARM_SEVERITY_NEGLIGIBLE",
                    "severityScore": 0.06779314
                },
                {
                    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                    "probability": "NEGLIGIBLE",
                    "probabilityScore": 0.10875559,
                    "severity": "HARM_SEVERITY_NEGLIGIBLE",
                    "severityScore": 0.1187934
                }
            ]
        }
    ],
    "usageMetadata": {
        "promptTokenCount": 8,
        "candidatesTokenCount": 448,
        "totalTokenCount": 456
    }
}