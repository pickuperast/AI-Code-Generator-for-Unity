# ROLE:
Unity3D code architect.

# GOAL:
Write specific and detailed code for Unity3D projects.

# BACKSTORY:
You are a Unity 3D Code Writer. You write specific and detailed code for Unity 3D projects in C#.
You provide solutions to coding problems, write scripts for game mechanics, and integrate various assets and systems.
You have a deep understanding of Unity 3D, C#, and game development principles.
You follow best practices for performance optimization, code organization, and version control.
You collaborate closely with the Unity 3D Architect to ensure that the codebase aligns with the overall project architecture.
Stick and balance between with Clean code principles and SOLID principles and 'Clean' Code, Horrible Performance - by Casey Muratori.
Make clean and efficient code, remember that focusing exclusively on either aspect can lead to less optimal results.
Maintaining a good understanding of the trade-offs between readability, maintainability, and performance is crucial.
Keep in mind that NetworkBehaviour constructors are not allowed.
Remember that [SyncObject], [SyncVar] are allowed only in NetworkBehaviour classes.
Always provide FULL CODE of the file just to copy paste code and application should run.
DO NOT write explanations for the code.
DO NOT skip showing fully method where code was changed.
DO NOT provide comments in code.
IF you generate code for Editor scripts, make sure to run game related logic only if Application.isPlaying is true.
include file path as first row for example(without quotes): "// Assets\-ZombieRoyale\Scripts\LLM AI\Personality\Personality.cs"
# CODE: // Assets\-ZombieRoyale\Scripts\InRoomSystems\Gameplay\DamagingCollider.cs:
 using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using _ZombieRoyale.Scripts.Core;
using FishnetInvector;
using Invector;
using UnityEngine;
using UnityEngine.Rendering;
using UnityEngine.Rendering.Universal;
using Zomb.Creatures.Helpers;

public class DamagingCollider : MonoBehaviour
{
    [SerializeField] private Collider _collider;
    [SerializeField] private vDamage _damagePerTick = new vDamage();
    [SerializeField] private float _damageTickRate = 1.0f;
    [SerializeField] private Transform _fxPrefab;
    [SerializeField] private AttachmentPoints.Point _fxSpawnPoint;
    [SerializeField] private string screenEffectPropertyName = "_VignetteIntensity";
    
    [Header("OnScreenEffect")] 
    [SerializeField] private string screenEffectName = "LavaEffect";
    [SerializeField] private FullScreenFX fullScreenFX;

    [Header("Time Stats")] 
    [SerializeField] private float _hurtDisplayTime = 1.5f;
    [SerializeField] private float _hurtFadeOutTime = .5f;
    [field:SerializeField] public bool IsActive { get; private set; }
    private Coroutine _hurtCoroutine;
    private ObjectsPool<Transform> _fxPool;
    [SerializeField] private AnimatorDecorator _animatorDecorator;
    private HashSet<UnitComponents> _playersInside;

    public Action<UnitComponents> OnUnitEnter;
    public Action<UnitComponents> OnUnitExit;
    public Action<UnitComponents> OnUnitStay;

    #region Initialization
    private void OnValidate()
    {
        AssignComponentsIfRequired();
    }

    private void AssignComponentsIfRequired()
    {
        _collider ??= GetComponent<BoxCollider>();
        _animatorDecorator ??= GetComponent<AnimatorDecorator>();
    }

    private void Awake()
    {
        if (_fxPrefab != null)
            _fxPool = new ObjectsPool<Transform>(transform, _fxPrefab, 3);
        AssignComponentsIfRequired();
    }

    #endregion
    
    public void Activate()
    {
        IsActive = true;
        _collider.enabled = true;
        ShowScreenFXIfRequired();
        _hurtCoroutine = StartCoroutine(Hurt());
    }
    
    public void Deactivate()
    {
        IsActive = false;
        _collider.enabled = false;
        HideScreenFXIfRequired();
        StopCoroutine(_hurtCoroutine);
    }
    
    private UnitComponents GetUnitComponents(Collider other) {
        if (other.CompareTag("Player"))
        {
            if (GameplayManager.Instance.GetHealthController(other) != null)
                return GameplayManager.Instance.GetHealthController(other).UnitComponents;
        }

        return new NullUnitComponents();
    }

    private void OnTriggerEnter(Collider other)
    {
        if (!IsActive)
        {
            return;
        }
        var unitComponents = GetUnitComponents(other);
        
        if (unitComponents != NullUnitComponents.Instance)
        {
            OnUnitEnter?.Invoke(unitComponents);
        }
        
        if (!enabled)
            return;
        
        if (!GameplayManager.IsOwningPlayer(other))
            return;
        
        if (_animatorDecorator != null)
            _animatorDecorator.SetTrigger("DoActivate");
        
        _playersInside.Add(unitComponents);
    }

    private void OnTriggerStay(Collider other)
    {
        if (!IsActive)
        {
            return;
        }
        
        var unitComponents = GetUnitComponents(other);
        
        if (unitComponents != NullUnitComponents.Instance)
        {
            OnUnitStay?.Invoke(unitComponents);
        }
        
        if (!enabled)
            return;
        
        if (!GameplayManager.IsOwningPlayer(other))
            return;
        
        if (_animatorDecorator != null)
            _animatorDecorator.SetTrigger("DoActivate");
        
        _playersInside.Add(unitComponents);
    }

    private void OnTriggerExit(Collider other)
    {
        if (!IsActive)
        {
            return;
        }
        
        var unitComponents = GetUnitComponents(other);
        
        if (unitComponents != NullUnitComponents.Instance)
        {
            OnUnitExit?.Invoke(unitComponents);
        }
        
        if (!GameplayManager.IsOwningPlayer(other))
            return;
        
        _playersInside.Remove(unitComponents);
    }

    private IEnumerator Hurt()
    {
        Debug.Log($"[DamagingCollider] Hurt room: {gameObject.name}");
        var cooldownTime = new WaitForSeconds(_damageTickRate);
        while (IsActive)
        {
            foreach (var player in _playersInside)
            {
                SetupAndDealDamage(player.HealthController, player.AttachmentPoints.GetAttachmentPoint(_fxSpawnPoint).position);
            }
            yield return cooldownTime;
        }
    }

    private void ShowFullScreenEffect()
    {
        ExtractScriptableRendererData();
        foreach ( var renderObjSetting in _scriptableRendererData.rendererFeatures)
        {
            if (renderObjSetting.name == screenEffectName)
            {
                renderObjSetting.SetActive(true);
            }
        }
    }

    private ScriptableRendererData _scriptableRendererData;
    
    private void ExtractScriptableRendererData()
    {
        var pipeline = ((UniversalRenderPipelineAsset)GraphicsSettings.renderPipelineAsset);
        FieldInfo propertyInfo = pipeline.GetType(  ).GetField( "m_RendererDataList", BindingFlags.Instance | BindingFlags.NonPublic );
        _scriptableRendererData = ((ScriptableRendererData[]) propertyInfo?.GetValue( pipeline ))?[0];
    }

    private void HideFullScreenEffect()
    {
        ExtractScriptableRendererData();
        foreach ( var renderObjSetting in _scriptableRendererData.rendererFeatures)
        {
            if (renderObjSetting.name == screenEffectName)
            {
                renderObjSetting.SetActive(false);
            }
        }
        //StartCoroutine(Hurt(.0f));
    }

    public void ShowScreenFXIfRequired()
    {
        if (screenEffectName == string.Empty)
            return;

        ShowFullScreenEffect();
    }

    public void HideScreenFXIfRequired()
    {
        if (screenEffectName == string.Empty)
            return;
        
        HideFullScreenEffect();
    }

    private void SetupAndDealDamage(FishnetInvectorHealthController hc, Vector3 closestPoint)
    {
        _damagePerTick.senderNetworkObjectID = hc.ObjectId;
        _damagePerTick.receiver = hc.transform;
        _damagePerTick.hitPosition = closestPoint;
        _damagePerTick.type = vDamage.DamageType.Trap;
        Debug.Log($"[DamagingCollider] SetupAndDealDamage room: {gameObject.name}; player: {hc.gameObject.name}");
        FNvDamage fNvDamage = _damagePerTick.ToFNvDamage();
        hc.CmdDealMeDamagePlease(fNvDamage);
        var unitComps = hc.UnitComponents;
        unitComps.AttachmentPoints.GetAttachmentPoint(_fxSpawnPoint);
        //itween allocate _fxPool.Allocate() and deallocate _fxPool.Deallocate() after 1 sec
        if (_fxPrefab != null)
        {
            var fx = _fxPool.Allocate();
            fx.position = unitComps.AttachmentPoints.GetAttachmentPoint(_fxSpawnPoint).position;
            fx.rotation = unitComps.AttachmentPoints.GetAttachmentPoint(_fxSpawnPoint).rotation;
            StartCoroutine(DestroyFX(fx));
        }
    }

    private IEnumerator DestroyFX(Transform fx)
    {
        yield return new WaitForSeconds(1f);
        _fxPool.Deallocate(fx);
    }

    [Serializable]
    public struct FullScreenFX
    {
        public ScriptableRendererFeature[] renderFeatures;
        public Material screenEffectMaterial;
    }
} 

// Assets\-ZombieRoyale\Scripts\InRoomSystems\Gameplay\Editor\DamagingColliderEditor.cs:
 using UnityEditor;
using UnityEngine;

[CustomEditor(typeof(DamagingCollider))]
public class DamagingColliderEditor : Editor
{
    private SerializedProperty _colliderProperty;

    private void OnEnable()
    {
        _colliderProperty = serializedObject.FindProperty("_collider");
        AssignColliderIfRequired();
    }

    public override void OnInspectorGUI()
    {
        //serializedObject.Update();

        //EditorGUILayout.PropertyField(_colliderProperty);

        //serializedObject.ApplyModifiedProperties();
        DrawDefaultInspector();
    }

    private void AssignColliderIfRequired()
    {
        DamagingCollider damagingCollider = (DamagingCollider)target;

        if (damagingCollider.GetComponent<Collider>() != null && _colliderProperty.objectReferenceValue == null)
        {
            _colliderProperty.objectReferenceValue = damagingCollider.GetComponent<Collider>();
            serializedObject.ApplyModifiedProperties();
        }

        damagingCollider.enabled = false;
    }
} 

// Assets\-ZombieRoyale\Scripts\InRoomSystems\Gameplay\Editor\DamagingColliderEditor.cs:
 using UnityEditor;
using UnityEngine;

[CustomEditor(typeof(DamagingCollider))]
public class DamagingColliderEditor : Editor
{
    private SerializedProperty _colliderProperty;

    private void OnEnable()
    {
        _colliderProperty = serializedObject.FindProperty("_collider");
        AssignColliderIfRequired();
    }

    public override void OnInspectorGUI()
    {
        //serializedObject.Update();

        //EditorGUILayout.PropertyField(_colliderProperty);

        //serializedObject.ApplyModifiedProperties();
        DrawDefaultInspector();
    }

    private void AssignColliderIfRequired()
    {
        DamagingCollider damagingCollider = (DamagingCollider)target;

        if (damagingCollider.GetComponent<Collider>() != null && _colliderProperty.objectReferenceValue == null)
        {
            _colliderProperty.objectReferenceValue = damagingCollider.GetComponent<Collider>();
            serializedObject.ApplyModifiedProperties();
        }

        damagingCollider.enabled = false;
    }
} 



# TASK: DamagingColliderEditor additionally should show players inside in inspector