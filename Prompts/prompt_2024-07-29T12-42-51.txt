# ROLE:
Unity3D code architect.

# GOAL:
Write specific and detailed code for Unity3D projects.

# BACKSTORY:
You are a Unity 3D Code Writer. You write specific and detailed code for Unity 3D projects in C#.
You provide solutions to coding problems, write scripts for game mechanics, and integrate various assets and systems.
You have a deep understanding of Unity 3D, C#, and game development principles.
You follow best practices for performance optimization, code organization, and version control.
You collaborate closely with the Unity 3D Architect to ensure that the codebase aligns with the overall project architecture.
Stick and balance between with Clean code principles and SOLID principles and 'Clean' Code, Horrible Performance - by Casey Muratori.
Make clean and efficient code, remember that focusing exclusively on either aspect can lead to less optimal results.
Maintaining a good understanding of the trade-offs between readability, maintainability, and performance is crucial.
Keep in mind that NetworkBehaviour constructors are not allowed.
Remember that [SyncObject], [SyncVar] are allowed only in NetworkBehaviour classes.
Always provide FULL CODE of the file just to copy paste code and application should run.
DO NOT write explanations for the code.
DO NOT skip showing fully method where code was changed.
DO NOT provide comments in code.
# CODE: // Assets\-ZombieRoyale\Scripts\AI\Creatures\Editor\EnemyDefinitionsHolderSOEditor.cs:
 #if UNITY_EDITOR
using UnityEditor;
using UnityEngine;

[CustomEditor(typeof(EnemyDefinitionsHolderSO))]
public class EnemyDefinitionsHolderSOEditor : Editor
{
    private string _jsonRepresentation;
    public override void OnInspectorGUI()
    {
        base.OnInspectorGUI();
        
        // Get the scriptable object instance
        EnemyDefinitionsHolderSO definitionsHolder = (EnemyDefinitionsHolderSO)target;

        // Serialize the enemy definitions to JSON when the button is clicked
        if (GUILayout.Button("Serialize to JSON"))
        {
            _jsonRepresentation = definitionsHolder.SerializeToJson();
        }

        // Display the JSON in a text area with 5 rows
        _jsonRepresentation = EditorGUILayout.TextArea(_jsonRepresentation, GUILayout.MinHeight(5 * EditorGUIUtility.singleLineHeight));

        if (definitionsHolder.EnemyDefinitions != null)
        {
            // Set the Id for each enemyDefinition based on their position.
            for(byte i = 0; i < definitionsHolder.EnemyDefinitions.Length; i++)
            {
                definitionsHolder.EnemyDefinitions[i].Id = i;
            }

            // Mark the scriptable object as dirty so changes persist
            EditorUtility.SetDirty(definitionsHolder);
            for (byte i = 0; i < definitionsHolder.EnemyDefinitions.Length; i++)
            {
                EditorUtility.SetDirty(definitionsHolder.EnemyDefinitions[i]);
            }
        }
    }
}
#endif 

// Assets\-ZombieRoyale\Scripts\AI\Creatures\Editor\EnemyDefinitionsHolderSOEditor.cs:
 #if UNITY_EDITOR
using UnityEditor;
using UnityEngine;

[CustomEditor(typeof(EnemyDefinitionsHolderSO))]
public class EnemyDefinitionsHolderSOEditor : Editor
{
    private string _jsonRepresentation;
    public override void OnInspectorGUI()
    {
        base.OnInspectorGUI();
        
        // Get the scriptable object instance
        EnemyDefinitionsHolderSO definitionsHolder = (EnemyDefinitionsHolderSO)target;

        // Serialize the enemy definitions to JSON when the button is clicked
        if (GUILayout.Button("Serialize to JSON"))
        {
            _jsonRepresentation = definitionsHolder.SerializeToJson();
        }

        // Display the JSON in a text area with 5 rows
        _jsonRepresentation = EditorGUILayout.TextArea(_jsonRepresentation, GUILayout.MinHeight(5 * EditorGUIUtility.singleLineHeight));

        if (definitionsHolder.EnemyDefinitions != null)
        {
            // Set the Id for each enemyDefinition based on their position.
            for(byte i = 0; i < definitionsHolder.EnemyDefinitions.Length; i++)
            {
                definitionsHolder.EnemyDefinitions[i].Id = i;
            }

            // Mark the scriptable object as dirty so changes persist
            EditorUtility.SetDirty(definitionsHolder);
            for (byte i = 0; i < definitionsHolder.EnemyDefinitions.Length; i++)
            {
                EditorUtility.SetDirty(definitionsHolder.EnemyDefinitions[i]);
            }
        }
    }
}
#endif 

// Assets\-ZombieRoyale\Scripts\AI\Creatures\Editor\EnemyDefinitionsHolderSOEditor.cs:
 #if UNITY_EDITOR
using UnityEditor;
using UnityEngine;

[CustomEditor(typeof(EnemyDefinitionsHolderSO))]
public class EnemyDefinitionsHolderSOEditor : Editor
{
    private string _jsonRepresentation;
    public override void OnInspectorGUI()
    {
        base.OnInspectorGUI();
        
        // Get the scriptable object instance
        EnemyDefinitionsHolderSO definitionsHolder = (EnemyDefinitionsHolderSO)target;

        // Serialize the enemy definitions to JSON when the button is clicked
        if (GUILayout.Button("Serialize to JSON"))
        {
            _jsonRepresentation = definitionsHolder.SerializeToJson();
        }

        // Display the JSON in a text area with 5 rows
        _jsonRepresentation = EditorGUILayout.TextArea(_jsonRepresentation, GUILayout.MinHeight(5 * EditorGUIUtility.singleLineHeight));

        if (definitionsHolder.EnemyDefinitions != null)
        {
            // Set the Id for each enemyDefinition based on their position.
            for(byte i = 0; i < definitionsHolder.EnemyDefinitions.Length; i++)
            {
                definitionsHolder.EnemyDefinitions[i].Id = i;
            }

            // Mark the scriptable object as dirty so changes persist
            EditorUtility.SetDirty(definitionsHolder);
            for (byte i = 0; i < definitionsHolder.EnemyDefinitions.Length; i++)
            {
                EditorUtility.SetDirty(definitionsHolder.EnemyDefinitions[i]);
            }
        }
    }
}
#endif 

// Assets\-ZombieRoyale\Scripts\AI\EnemyDefinition.cs:
 using System;
using System.Collections.Generic;
using System.Text;
using Custom.Scripts.Melee;
using _ZombieRoyale.Scripts.Core;

using UnityEngine;
using Invector.vItemManager;
using Unity.VisualScripting;

[CreateAssetMenu(menuName = "ScriptableObjects/EnemyDefinition", fileName = "EnemyDefinition")]
public class EnemyDefinition : ScriptableObject
{
    public byte Id;
    public AIUnit VisualPrefab;
    public DeadBody DeadBodyPrefab;
    public string Name;
    public int MaxHealth = 100;
    public float AttackCooldown = 2f;
    public float MoveSpeed = 1.6f;
    public float RunSpeed = 1.6f;
    public float Acceleration = 2.0f;
    [HideInInspector] public float CurrentRotationSpeed = 0f;
    public float MaxRotationSpeed = 2.0f;
    public float FieldOfView = 290.0f;
    public float ViewDistance = 30.0f;
    public float AttackDistance = 2.0f;
    public float MaxDistanceFromSpot = 80.0f;
    public float MoveSpeedMultiplier = 1.0f;
    public int Experience = 30;
    public List<SoundsInfo> Sounds;
    [Header("Should not have duplicative chances. Sorted by chance to spawn.")]
    public float ChanceToSpawn = 0.3f;
    public Type EnemyType;
    public CratesSystem.Zone LootBagZone = CratesSystem.Zone.level1;
    public GameObject _bloodPool;
    public GameObject _bloodSplatter;
    public HitAnimationClips[] hitAnimations;
    public MeleeAttackData[] meleeAttackDatas;

    public int Strength = 10;
    
    [Header("Loot")]
    public PossibleItemRanges[] ItemsDropChances = new []{new PossibleItemRanges(2, 32), new PossibleItemRanges(35, 10000)};
    public float LootBagChanceMod = .0f;
    public int LootBagItemsCount = 1;
    public float GoldDropChance = .3f;
    public int MinGoldDrop = 1;
    public int MaxGoldDrop = 10;
    
    public LootDefinition[] Loot;
    
    [field:SerializeField] public AnimationClip AnimationTakeOff { get; private set; }
    [field:SerializeField] public AnimationClip AnimationLanding { get; private set; }

    [System.Serializable]
    public class LootDefinition
    {
        public vItem Item;
        public float Chance;
        public int MinQuantity = 1;
        public int MaxQuantity = 1;
    }
    
    public enum Type {Monster, Boss, Summon}

    [System.Serializable]
    public class SoundsInfo
    {
        public enum SoundType
        {
            Idle,
            Attack,
            Combat,
            Death,
            Hit,
            Moan,
            Run,
            Walk
        }
        
        public SoundType Type;
        public AudioClip[] Clips;
        
        public AudioClip GetRandomClip()
        {
            return Clips[UnityEngine.Random.Range(0, Clips.Length)];
        }
    }

    [Serializable]
    public struct PossibleItemRanges {
        [Range(0, 20000)]
        public int FromId;
        [Range(0, 20000)]
        public int ToId;
        
        public PossibleItemRanges(int fromId, int toId)
        {
            FromId = fromId;
            ToId = toId;
        }
    }

    public string GetJsonRepresentation()
    {
        StringBuilder jsonBuilder = new StringBuilder();
        jsonBuilder.Append("{\n");
        jsonBuilder.AppendFormat("  \"Name\": \"{0}\",\n", Name);
        jsonBuilder.AppendFormat("  \"Type\": \"{0}\",\n", EnemyType.ToString());
        jsonBuilder.AppendFormat("  \"Strength\": {0},\n", Strength);
        jsonBuilder.AppendFormat("  \"RunSpeed\": {0},\n", RunSpeed);
        jsonBuilder.AppendFormat("  \"MaxHealth\": {0},\n", MaxHealth);
        jsonBuilder.AppendFormat("  \"Attack cooldown\": {0},\n", AttackCooldown);
        jsonBuilder.AppendFormat("  \"Attack distance\": {0},\n", AttackDistance);
        jsonBuilder.AppendFormat("  \"Attack animation\": {0},\n", GetAttackAnimationsLength());
        jsonBuilder.AppendFormat("  \"RewardExperience\": {0},\n", Experience);
        jsonBuilder.AppendFormat("  \"ChanceToSpawn\": {0},\n", ChanceToSpawn.ToString("F2"));
        // Add other necessary fields in the same pattern
        jsonBuilder.Append("}");
        return jsonBuilder.ToString();
    }

    private float GetAttackAnimationsLength() {
        if (VisualPrefab == null)
            return 1f;
        
        Animator animator = VisualPrefab.GetComponentInChildren<Animator>();
        if (animator == null)
            return 1f;
        
        // Dictionary to map animation clips to their corresponding FNvMeleeAttackControl
        Dictionary<AnimationClip, FNvMeleeAttackControl> attackControlMap = new Dictionary<AnimationClip, FNvMeleeAttackControl>();

        // Fill the attackControlMap with the corresponding FNvMeleeAttackControls
        foreach (var state in animator.runtimeAnimatorController.animationClips)
        {
            if (!state.name.Contains("ttack"))
            {
                continue;
            }
            
            float length = state.length;
            return length;
            float totalLength = 0f;
            FNvMeleeAttackControl attackControl = GetStateMachineBehaviour<FNvMeleeAttackControl>(animator, state.name);
            if (attackControl == null)
                continue;
            
            AnimationCurve attackCurve = attackControl.SpeedCurve;
            // Applying the curve to the length
            float maxTime =
                attackCurve.keys[attackCurve.length - 1]
                    .time; // Assuming the curve goes from 0 to some maximum time
            float timeIncrement = maxTime / length; // Adjust the time according to the length of the animation
            float modifiedLength = 0f;
            for (float t = 0f; t <= maxTime; t += timeIncrement) {
                float speedMultiplier = attackCurve.Evaluate(t);
                modifiedLength += timeIncrement / speedMultiplier;
            }

            totalLength += modifiedLength;
            return totalLength;
        }

        return 1f;
    }

    // Helper method to get StateMachineBehaviour from Animator by state name
    private T GetStateMachineBehaviour<T>(Animator animator, string stateName) where T : StateMachineBehaviour
    {
        foreach (var state in animator.runtimeAnimatorController.animationClips)
        {
            if (state.name == stateName)
            {
                foreach (var behaviour in animator.GetBehaviours<T>())
                {
                    return behaviour;
                }
            }
        }
        return null;
    }

    [Serializable]
    public struct HitAnimationClips
    {
        public AnimationClip clip;
        public AIUnit.HitDirection hitDir;
        public float hitHeight;
    }
} 

// Assets\-ZombieRoyale\Scripts\AI\Creatures\EnemyDefinitionsHolderSO.cs:
 using System.Text;
using DungeonScrollerCore;
using UnityEngine;
using UnityEngine.Serialization;

[CreateAssetMenu(fileName = "EnemyDefinitionsHolder", menuName = "ScriptableObjects/EnemyDefinitionsHolderSO")]
public class EnemyDefinitionsHolderSO : ScriptableObject
{
    public EnemyDefinition[] EnemyDefinitions => _enemyDefinitions;
    [SerializeField] private EnemyDefinition[] _enemyDefinitions;
    private EnemyDefinition[] _sortedEnemyDefinitions;

    public EnemyDefinition[] GetSortedEnemyDefinitions()
    {
        if (_sortedEnemyDefinitions == null || _sortedEnemyDefinitions.Length == 0)
        {
            _sortedEnemyDefinitions = new EnemyDefinition[EnemyDefinitions.Length];
            for (int i = 0; i < EnemyDefinitions.Length; i++)
            {
                _sortedEnemyDefinitions[i] = EnemyDefinitions[i];
            }
            //sort asscending
            System.Array.Sort(_sortedEnemyDefinitions, (x, y) => x.ChanceToSpawn.CompareTo(y.ChanceToSpawn));
        }

        return _sortedEnemyDefinitions;
    }
    
    /// <summary>
    /// Returns enemy with highest chance to spawn according to random value from 0f to 1f. Drop chance should not be equal between enemies.
    /// </summary>
    /// <param name="type"></param>
    /// <returns></returns>
    public byte GetRandomEnemyId(EnemyDefinition.Type type)
    {
        byte result = 255;
        byte any = 255;
        float roll = Random.Range(0.0f, 1.0f);

        //EnemyDefinition[] sorted = GetSortedEnemyDefinitions();
        if (type == EnemyDefinition.Type.Boss)
        {
            DebugWrite.Log("Boss");
        }
        for (byte id = 0; id < GetSortedEnemyDefinitions().Length; id++){
            if (GetSortedEnemyDefinitions()[id].EnemyType != type)
                continue;
            
            any = GetSortedEnemyDefinitions()[id].Id;
            if (any == 2)
            {
                DebugWrite.Log("Any");
            }
            if (roll < GetSortedEnemyDefinitions()[id].ChanceToSpawn)
            {
                result = GetSortedEnemyDefinitions()[id].Id;
                break;
            }
        }
        if (result != 255)
            return result;
        return any;
    }
    
    public EnemyDefinition GetEnemyDefinition(int id){
        for(int i = 0; i < GetSortedEnemyDefinitions().Length; i++){
            if(GetSortedEnemyDefinitions()[i].Id == id){
                return GetSortedEnemyDefinitions()[i];
            }
        }
        DebugWrite.LogError($"EnemyDefinition with id {id} not found");
        return null;
    }
    
    public byte GetId(EnemyDefinition enemyDefinition){
        for(int i = 0; i < _enemyDefinitions.Length; i++){
            if(_enemyDefinitions[i] == enemyDefinition){
                return _enemyDefinitions[i].Id;
            }
        }
        return 0;
    }
    
    #if UNITY_EDITOR
    public void SetEnemyDefinitions(EnemyDefinition[] enemyDefinitions){
        _enemyDefinitions = enemyDefinitions;
    }
    #endif
    
    public string SerializeToJson()
    {
        StringBuilder jsonBuilder = new StringBuilder();
        jsonBuilder.Append("[");

        for (int i = 0; i < _enemyDefinitions.Length; i++)
        {
            jsonBuilder.Append(_enemyDefinitions[i].GetJsonRepresentation());
            if (i < _enemyDefinitions.Length - 1)
                jsonBuilder.Append(",");
        }

        jsonBuilder.Append("]");
        return jsonBuilder.ToString();
    }
}
 

// Assets\-ZombieRoyale\Scripts\AI\Creatures\EnemyDefinitionsHolderSO.cs:
 using System.Text;
using DungeonScrollerCore;
using UnityEngine;
using UnityEngine.Serialization;

[CreateAssetMenu(fileName = "EnemyDefinitionsHolder", menuName = "ScriptableObjects/EnemyDefinitionsHolderSO")]
public class EnemyDefinitionsHolderSO : ScriptableObject
{
    public EnemyDefinition[] EnemyDefinitions => _enemyDefinitions;
    [SerializeField] private EnemyDefinition[] _enemyDefinitions;
    private EnemyDefinition[] _sortedEnemyDefinitions;

    public EnemyDefinition[] GetSortedEnemyDefinitions()
    {
        if (_sortedEnemyDefinitions == null || _sortedEnemyDefinitions.Length == 0)
        {
            _sortedEnemyDefinitions = new EnemyDefinition[EnemyDefinitions.Length];
            for (int i = 0; i < EnemyDefinitions.Length; i++)
            {
                _sortedEnemyDefinitions[i] = EnemyDefinitions[i];
            }
            //sort asscending
            System.Array.Sort(_sortedEnemyDefinitions, (x, y) => x.ChanceToSpawn.CompareTo(y.ChanceToSpawn));
        }

        return _sortedEnemyDefinitions;
    }
    
    /// <summary>
    /// Returns enemy with highest chance to spawn according to random value from 0f to 1f. Drop chance should not be equal between enemies.
    /// </summary>
    /// <param name="type"></param>
    /// <returns></returns>
    public byte GetRandomEnemyId(EnemyDefinition.Type type)
    {
        byte result = 255;
        byte any = 255;
        float roll = Random.Range(0.0f, 1.0f);

        //EnemyDefinition[] sorted = GetSortedEnemyDefinitions();
        if (type == EnemyDefinition.Type.Boss)
        {
            DebugWrite.Log("Boss");
        }
        for (byte id = 0; id < GetSortedEnemyDefinitions().Length; id++){
            if (GetSortedEnemyDefinitions()[id].EnemyType != type)
                continue;
            
            any = GetSortedEnemyDefinitions()[id].Id;
            if (any == 2)
            {
                DebugWrite.Log("Any");
            }
            if (roll < GetSortedEnemyDefinitions()[id].ChanceToSpawn)
            {
                result = GetSortedEnemyDefinitions()[id].Id;
                break;
            }
        }
        if (result != 255)
            return result;
        return any;
    }
    
    public EnemyDefinition GetEnemyDefinition(int id){
        for(int i = 0; i < GetSortedEnemyDefinitions().Length; i++){
            if(GetSortedEnemyDefinitions()[i].Id == id){
                return GetSortedEnemyDefinitions()[i];
            }
        }
        DebugWrite.LogError($"EnemyDefinition with id {id} not found");
        return null;
    }
    
    public byte GetId(EnemyDefinition enemyDefinition){
        for(int i = 0; i < _enemyDefinitions.Length; i++){
            if(_enemyDefinitions[i] == enemyDefinition){
                return _enemyDefinitions[i].Id;
            }
        }
        return 0;
    }
    
    #if UNITY_EDITOR
    public void SetEnemyDefinitions(EnemyDefinition[] enemyDefinitions){
        _enemyDefinitions = enemyDefinitions;
    }
    #endif
    
    public string SerializeToJson()
    {
        StringBuilder jsonBuilder = new StringBuilder();
        jsonBuilder.Append("[");

        for (int i = 0; i < _enemyDefinitions.Length; i++)
        {
            jsonBuilder.Append(_enemyDefinitions[i].GetJsonRepresentation());
            if (i < _enemyDefinitions.Length - 1)
                jsonBuilder.Append(",");
        }

        jsonBuilder.Append("]");
        return jsonBuilder.ToString();
    }
}
 

// Assets\-ZombieRoyale\Scripts\AI\Editor\EnemyDefinitionEditor.cs:
 using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System.Text;
using Custom.Scripts.Melee;

// Make sure this script is placed under an Editor folder.
[CustomEditor(typeof(EnemyDefinition))]
public class EnemyDefinitionEditor : Editor
{
    EnemyDefinition enemyDef;
    public void OnEnable()
    {
        enemyDef = (EnemyDefinition)target;
        FindAndAssignMeleeAttackDatas(enemyDef);
    }

    public override void OnInspectorGUI()
    {
        // Draw the default inspector
        DrawDefaultInspector();

        // Generate the JSON representation of the necessary information
        string json = enemyDef.GetJsonRepresentation();

        // Draw a text area with the JSON representation
        GUIStyle textAreaStyle = new GUIStyle(EditorStyles.textArea);
        textAreaStyle.wordWrap = true;
        EditorGUILayout.LabelField("JSON Representation:", EditorStyles.boldLabel);
        EditorGUILayout.TextArea(json, textAreaStyle, GUILayout.MinHeight(45));
    }
    
    private void FindAndAssignMeleeAttackDatas(EnemyDefinition enemyDef)
    {
        if (enemyDef.meleeAttackDatas != null && enemyDef.meleeAttackDatas.Length > 0)
        {
            return; // MeleeAttackDatas are already assigned
        }

        // Find the MeleeAttackDataLibrary asset
        MeleeAttackDataLibrary library = AssetDatabase.LoadAssetAtPath<MeleeAttackDataLibrary>("Assets/FishNet Invector/Scripts/Non-networked/MeleeAttackDatas/MeleeAttackDataLibrary.asset");
        if (library == null)
        {
            Debug.LogError("MeleeAttackDataLibrary not found at the specified path.");
            return;
        }

        List<MeleeAttackData> matchingAttackDatas = new List<MeleeAttackData>();

        // Get the EnemyDefinition name
        string enemyName = enemyDef.Name;

        // Loop through all MeleeAttacks in the library
        foreach (MeleeAttackData attackData in library.meleeAttacks)
        {
            // Check if the attack data name contains the enemy name
            if (attackData.name.Contains(enemyName, StringComparison.OrdinalIgnoreCase))
            {
                matchingAttackDatas.Add(attackData);
            }
        }

        // Assign the matching MeleeAttackDatas to the EnemyDefinition
        if (matchingAttackDatas.Count > 0)
        {
            SerializedObject serializedObject = new SerializedObject(enemyDef);
            SerializedProperty meleeAttackDatasProperty = serializedObject.FindProperty("meleeAttackDatas");
            meleeAttackDatasProperty.arraySize = matchingAttackDatas.Count;

            for (int i = 0; i < matchingAttackDatas.Count; i++)
            {
                meleeAttackDatasProperty.GetArrayElementAtIndex(i).objectReferenceValue = matchingAttackDatas[i];
            }

            serializedObject.ApplyModifiedProperties();
            Debug.Log($"Assigned {matchingAttackDatas.Count} MeleeAttackDatas to {enemyDef.Name}");
        }
        else
        {
            Debug.LogWarning($"No matching MeleeAttackDatas found for {enemyDef.Name}");
        }
    }
} 

// Assets\-ZombieRoyale\Scripts\AI\Editor\EnemyDefinitionEditor.cs:
 using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System.Text;
using Custom.Scripts.Melee;

// Make sure this script is placed under an Editor folder.
[CustomEditor(typeof(EnemyDefinition))]
public class EnemyDefinitionEditor : Editor
{
    EnemyDefinition enemyDef;
    public void OnEnable()
    {
        enemyDef = (EnemyDefinition)target;
        FindAndAssignMeleeAttackDatas(enemyDef);
    }

    public override void OnInspectorGUI()
    {
        // Draw the default inspector
        DrawDefaultInspector();

        // Generate the JSON representation of the necessary information
        string json = enemyDef.GetJsonRepresentation();

        // Draw a text area with the JSON representation
        GUIStyle textAreaStyle = new GUIStyle(EditorStyles.textArea);
        textAreaStyle.wordWrap = true;
        EditorGUILayout.LabelField("JSON Representation:", EditorStyles.boldLabel);
        EditorGUILayout.TextArea(json, textAreaStyle, GUILayout.MinHeight(45));
    }
    
    private void FindAndAssignMeleeAttackDatas(EnemyDefinition enemyDef)
    {
        if (enemyDef.meleeAttackDatas != null && enemyDef.meleeAttackDatas.Length > 0)
        {
            return; // MeleeAttackDatas are already assigned
        }

        // Find the MeleeAttackDataLibrary asset
        MeleeAttackDataLibrary library = AssetDatabase.LoadAssetAtPath<MeleeAttackDataLibrary>("Assets/FishNet Invector/Scripts/Non-networked/MeleeAttackDatas/MeleeAttackDataLibrary.asset");
        if (library == null)
        {
            Debug.LogError("MeleeAttackDataLibrary not found at the specified path.");
            return;
        }

        List<MeleeAttackData> matchingAttackDatas = new List<MeleeAttackData>();

        // Get the EnemyDefinition name
        string enemyName = enemyDef.Name;

        // Loop through all MeleeAttacks in the library
        foreach (MeleeAttackData attackData in library.meleeAttacks)
        {
            // Check if the attack data name contains the enemy name
            if (attackData.name.Contains(enemyName, StringComparison.OrdinalIgnoreCase))
            {
                matchingAttackDatas.Add(attackData);
            }
        }

        // Assign the matching MeleeAttackDatas to the EnemyDefinition
        if (matchingAttackDatas.Count > 0)
        {
            SerializedObject serializedObject = new SerializedObject(enemyDef);
            SerializedProperty meleeAttackDatasProperty = serializedObject.FindProperty("meleeAttackDatas");
            meleeAttackDatasProperty.arraySize = matchingAttackDatas.Count;

            for (int i = 0; i < matchingAttackDatas.Count; i++)
            {
                meleeAttackDatasProperty.GetArrayElementAtIndex(i).objectReferenceValue = matchingAttackDatas[i];
            }

            serializedObject.ApplyModifiedProperties();
            Debug.Log($"Assigned {matchingAttackDatas.Count} MeleeAttackDatas to {enemyDef.Name}");
        }
        else
        {
            Debug.LogWarning($"No matching MeleeAttackDatas found for {enemyDef.Name}");
        }
    }
} 



# TASK: EnemyDefinitionsHolderSOEditor should validate al enemydefinitions so that their chances to spawn will be unique for example if 2 or more will have same chance to spawn it shoul add random float value between .00001 and .001