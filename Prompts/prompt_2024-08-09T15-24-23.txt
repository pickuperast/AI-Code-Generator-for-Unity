# ROLE:
Unity3D code architect.

# GOAL:
Write specific and detailed code for Unity3D projects.

# BACKSTORY:
You are a Unity 3D Code Writer. You write specific and detailed code for Unity 3D projects in C#.
You provide solutions to coding problems, write scripts for game mechanics, and integrate various assets and systems.
You have a deep understanding of Unity 3D, C#, and game development principles.
You follow best practices for performance optimization, code organization, and version control.
You collaborate closely with the Unity 3D Architect to ensure that the codebase aligns with the overall project architecture.
Stick and balance between with Clean code principles and SOLID principles and 'Clean' Code, Horrible Performance - by Casey Muratori.
Make clean and efficient code, remember that focusing exclusively on either aspect can lead to less optimal results.
Maintaining a good understanding of the trade-offs between readability, maintainability, and performance is crucial.
Keep in mind that NetworkBehaviour constructors are not allowed.
Remember that [SyncObject], [SyncVar] are allowed only in NetworkBehaviour classes.
Always provide FULL CODE of the file just to copy paste code and application should run.
DO NOT write explanations for the code.
DO NOT skip showing fully method where code was changed.
DO NOT provide comments in code.
IF you generate code for Editor scripts, make sure to run game related logic only if Application.isPlaying is true.
include file path as first row for example(without quotes): "// Assets\-ZombieRoyale\Scripts\LLM AI\Personality\Personality.cs"
# CODE: // Assets\Invector-3rdPersonController\Melee Combat\Scripts\MeleeWeapon\Editor\vDamageDrawer.cs:
 using System;
using System.Collections;
using UnityEditor;
using UnityEngine;

namespace Invector.vMelee
{
    [CustomPropertyDrawer(typeof(vDamage))]
    public class vDamageDrawer : PropertyDrawer
    {
        public bool isOpen;
        public bool valid;
        GUISkin skin;
        float helpBoxHeight;

        public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
        {
            var oldSkin = GUI.skin;
            if (!skin) skin = Resources.Load("vSkin") as GUISkin;
            if (skin) GUI.skin = skin;
            position = EditorGUI.IndentedRect(position);
            GUI.Box(position, "");
            position.width -= 10;
            position.height = 15;
            position.y += 5f;
            position.x += 5;
            isOpen = GUI.Toggle(position, isOpen, "Damage Options", EditorStyles.miniButton);

            if (isOpen)
            {
                var attackName = property.FindPropertyRelative("damageType");
                var value = property.FindPropertyRelative("damageValue");
                var staminaBlockCost = property.FindPropertyRelative("staminaBlockCost");
                var staminaRecoveryDelay = property.FindPropertyRelative("staminaRecoveryDelay");
                var ignoreDefense = property.FindPropertyRelative("ignoreDefense");
                var activeRagdoll = property.FindPropertyRelative("activeRagdoll");
                var hitreactionID = property.FindPropertyRelative("reaction_id");
                var hitrecoilID = property.FindPropertyRelative("recoil_id");
                var senselessTime = property.FindPropertyRelative("senselessTime");
                var damageType = property.FindPropertyRelative("type");
                var canCrit = property.FindPropertyRelative("canCrit");
                var obj = (property.serializedObject.targetObject as MonoBehaviour);

                valid = true;
                if (obj != null)
                {
                    var parent = obj.transform.parent;
                    if (parent != null)
                    {
                        var manager = parent.GetComponentInParent<vMeleeManager>();
                        valid = !(obj.GetType() == typeof(vMeleeWeapon) || obj.GetType().IsSubclassOf(typeof(vMeleeWeapon))) || manager == null;
                    }
                }

                if (!valid)
                {
                    position.y += 20;
                    var style = new GUIStyle(EditorStyles.helpBox);
                    var content = new GUIContent("Damage type and other options can be overridden by the Animator Attack State\nIf the weapon is used by a character with an ItemManager, the damage value can be overridden by the item attribute");
                    helpBoxHeight = style.CalcHeight(content, position.width);
                    position.height = helpBoxHeight;
                    GUI.Box(position, content.text, style);
                    position.y += helpBoxHeight - 20;
                }
                position.height = EditorGUIUtility.singleLineHeight;
                if (attackName != null)
                {
                    position.y += 20;

                    EditorGUI.PropertyField(position, attackName);
                }
                if (value != null)
                {
                    position.y += 20;
                    EditorGUI.PropertyField(position, value);
                }
                if (staminaBlockCost != null)
                {
                    position.y += 20;
                    EditorGUI.PropertyField(position, staminaBlockCost);
                }
                if (staminaRecoveryDelay != null)
                {
                    position.y += 20;
                    EditorGUI.PropertyField(position, staminaRecoveryDelay);
                }
                if (ignoreDefense != null && valid)
                {
                    position.y += 20;
                    EditorGUI.PropertyField(position, ignoreDefense);
                }
                if (activeRagdoll != null && valid)
                {
                    position.y += 20;
                    EditorGUI.PropertyField(position, activeRagdoll);
                    position.y += 20;
                    EditorGUI.PropertyField(position, senselessTime);
                }
                if (hitreactionID != null && valid)
                {
                    position.y += 20;
                    EditorGUI.PropertyField(position, hitreactionID);
                }
                if (hitrecoilID != null && valid)
                {
                    position.y += 20;
                    EditorGUI.PropertyField(position, hitrecoilID);
                }
                if (damageType != null && valid)
                {
                    position.y += 20;
                    EditorGUI.PropertyField(position, damageType);
                }
                if (canCrit != null && valid)
                {
                    position.y += 20;
                    EditorGUI.PropertyField(position, canCrit);
                }
            }

            GUI.skin = oldSkin;
        }

        public override float GetPropertyHeight(SerializedProperty property, GUIContent label)
        {
            return !isOpen ? 25 : (valid ? 210 : 130 + helpBoxHeight);
        }
    }
} 

// Assets\Invector-3rdPersonController\Melee Combat\Scripts\MeleeWeapon\Editor\vDamageDrawer.cs:
 using System;
using System.Collections;
using UnityEditor;
using UnityEngine;

namespace Invector.vMelee
{
    [CustomPropertyDrawer(typeof(vDamage))]
    public class vDamageDrawer : PropertyDrawer
    {
        public bool isOpen;
        public bool valid;
        GUISkin skin;
        float helpBoxHeight;

        public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
        {
            var oldSkin = GUI.skin;
            if (!skin) skin = Resources.Load("vSkin") as GUISkin;
            if (skin) GUI.skin = skin;
            position = EditorGUI.IndentedRect(position);
            GUI.Box(position, "");
            position.width -= 10;
            position.height = 15;
            position.y += 5f;
            position.x += 5;
            isOpen = GUI.Toggle(position, isOpen, "Damage Options", EditorStyles.miniButton);

            if (isOpen)
            {
                var attackName = property.FindPropertyRelative("damageType");
                var value = property.FindPropertyRelative("damageValue");
                var staminaBlockCost = property.FindPropertyRelative("staminaBlockCost");
                var staminaRecoveryDelay = property.FindPropertyRelative("staminaRecoveryDelay");
                var ignoreDefense = property.FindPropertyRelative("ignoreDefense");
                var activeRagdoll = property.FindPropertyRelative("activeRagdoll");
                var hitreactionID = property.FindPropertyRelative("reaction_id");
                var hitrecoilID = property.FindPropertyRelative("recoil_id");
                var senselessTime = property.FindPropertyRelative("senselessTime");
                var damageType = property.FindPropertyRelative("type");
                var canCrit = property.FindPropertyRelative("canCrit");
                var obj = (property.serializedObject.targetObject as MonoBehaviour);

                valid = true;
                if (obj != null)
                {
                    var parent = obj.transform.parent;
                    if (parent != null)
                    {
                        var manager = parent.GetComponentInParent<vMeleeManager>();
                        valid = !(obj.GetType() == typeof(vMeleeWeapon) || obj.GetType().IsSubclassOf(typeof(vMeleeWeapon))) || manager == null;
                    }
                }

                if (!valid)
                {
                    position.y += 20;
                    var style = new GUIStyle(EditorStyles.helpBox);
                    var content = new GUIContent("Damage type and other options can be overridden by the Animator Attack State\nIf the weapon is used by a character with an ItemManager, the damage value can be overridden by the item attribute");
                    helpBoxHeight = style.CalcHeight(content, position.width);
                    position.height = helpBoxHeight;
                    GUI.Box(position, content.text, style);
                    position.y += helpBoxHeight - 20;
                }
                position.height = EditorGUIUtility.singleLineHeight;
                if (attackName != null)
                {
                    position.y += 20;

                    EditorGUI.PropertyField(position, attackName);
                }
                if (value != null)
                {
                    position.y += 20;
                    EditorGUI.PropertyField(position, value);
                }
                if (staminaBlockCost != null)
                {
                    position.y += 20;
                    EditorGUI.PropertyField(position, staminaBlockCost);
                }
                if (staminaRecoveryDelay != null)
                {
                    position.y += 20;
                    EditorGUI.PropertyField(position, staminaRecoveryDelay);
                }
                if (ignoreDefense != null && valid)
                {
                    position.y += 20;
                    EditorGUI.PropertyField(position, ignoreDefense);
                }
                if (activeRagdoll != null && valid)
                {
                    position.y += 20;
                    EditorGUI.PropertyField(position, activeRagdoll);
                    position.y += 20;
                    EditorGUI.PropertyField(position, senselessTime);
                }
                if (hitreactionID != null && valid)
                {
                    position.y += 20;
                    EditorGUI.PropertyField(position, hitreactionID);
                }
                if (hitrecoilID != null && valid)
                {
                    position.y += 20;
                    EditorGUI.PropertyField(position, hitrecoilID);
                }
                if (damageType != null && valid)
                {
                    position.y += 20;
                    EditorGUI.PropertyField(position, damageType);
                }
                if (canCrit != null && valid)
                {
                    position.y += 20;
                    EditorGUI.PropertyField(position, canCrit);
                }
            }

            GUI.skin = oldSkin;
        }

        public override float GetPropertyHeight(SerializedProperty property, GUIContent label)
        {
            return !isOpen ? 25 : (valid ? 210 : 130 + helpBoxHeight);
        }
    }
} 

// Assets\Invector-3rdPersonController\Basic Locomotion\Scripts\ObjectDamage\vDamage.cs:
 using System;
using System.Text;
using _ZombieRoyale.Scripts.Core;
using FirstGearGames.LobbyAndWorld.Demos.KingOfTheHill;
using FishNet;
using UnityEngine;
namespace Invector
{
    [System.Serializable]
    public class vDamage
    {
        [Tooltip("Apply damage to the Character Health")]
        public int damageValue = 15;
        [Tooltip("How much stamina the target will lost when blocking this attack")]
        public float staminaBlockCost = 5;
        [Tooltip("How much time the stamina of the target will wait to recovery")]
        public float staminaRecoveryDelay = 1;
        [Tooltip("Apply damage even if the Character is blocking")]
        public bool ignoreDefense;
        [Tooltip("Activated Ragdoll when hit the Character")]
        public bool activeRagdoll;
        [vHideInInspector("activeRagdoll"),Tooltip("Time to keep Ragdoll active")]
        public float senselessTime;

        [Tooltip("0 - for body, 1 - for head, 2 - for heavy")]
        public float hitHeight;
        [NonSerialized] public Transform Sender;
        public int senderNetworkObjectID;
        [NonSerialized]
        public Transform receiver;
        [HideInInspector]
        public Vector3 hitPosition = Vector3.zero;
        public bool IsCriticalDamage;
        public bool hitReaction = true;
        public bool IsShowDamage = true;
        [HideInInspector]
        public int recoil_id = 0;
        [HideInInspector]
        public int reaction_id = 0;
        public string damageType;
        public DamageType type;
        [HideInInspector] public byte SwingCounter;
        [HideInInspector] public Vector3 force;
        public int abilityId;
        public int weaponItemId;
        public bool canCrit;
        
        public enum DamageType {
            Melee,
            Arrow,
            Fire,
            Ice,
            Lightning,
            Poison,
            Bleeding,
            Magic,
            Fall,
            Shockwave,
            Explosion,
            Custom,
            Trap,
            Blood,
            Electric
        }

        public vDamage()
        {
            this.damageValue = 15;
            this.staminaBlockCost = 5;
            this.staminaRecoveryDelay = 1;
            this.hitReaction = true;
        }

        public void Copy (vDamage source)
        {
            this.damageValue = source.damageValue;
            this.hitPosition = source.hitPosition;
            this.Sender = source.Sender;
            this.senderNetworkObjectID = source.senderNetworkObjectID;
            this.staminaBlockCost = source.staminaBlockCost;
            this.staminaRecoveryDelay = source.staminaRecoveryDelay;
            this.ignoreDefense = source.ignoreDefense;
            this.reaction_id = source.reaction_id;
            this.recoil_id = source.recoil_id;
        }

        public vDamage(int value)
        {
            this.damageValue = value;
            this.hitReaction = true;
        }

        public vDamage(float value, int senderNetworkObjectID, Transform senderTrans, string damageType)
        {
            this.senderNetworkObjectID = senderNetworkObjectID;
            this.Sender = senderTrans;
            this.damageType = damageType;
            this.damageValue = (int)value;
            this.hitReaction = true;
        }

        public vDamage(int value, bool ignoreReaction)
        {
            this.damageValue = value;
            this.hitReaction = !ignoreReaction;
            if (ignoreReaction)
            {
                this.recoil_id = -1;
                this.reaction_id = -1;
            }                
        }

        public vDamage(vDamage damage)
        {
            this.damageValue = damage.damageValue;
            this.staminaBlockCost = damage.staminaBlockCost;
            this.staminaRecoveryDelay = damage.staminaRecoveryDelay;
            this.ignoreDefense = damage.ignoreDefense;
            this.activeRagdoll = damage.activeRagdoll;
            this.Sender = damage.Sender;
            this.receiver = damage.receiver;
            this.recoil_id = damage.recoil_id;
            this.reaction_id = damage.reaction_id;
            this.damageType = damage.damageType;
            this.hitPosition = damage.hitPosition;
            this.senselessTime = damage.senselessTime;
            this.force = damage.force;
            this.weaponItemId = damage.weaponItemId;
        }

        /// <summary>
        /// Calc damage Resuction percentage
        /// </summary>
        /// <param name="damageReduction"></param>
        public void ReduceDamage(float damageReduction)
        {
            int result = (int)(this.damageValue - ((this.damageValue * damageReduction) / 100));
            this.damageValue = result;
        }

        public FNvDamage ToFNvDamage()
        {
            FNvDamage damage = new FNvDamage();
            damage.damageValue = this.damageValue;
            damage.staminaBlockCost = this.staminaBlockCost;
            damage.ignoreDefense = this.ignoreDefense;
            damage.hitPosition = this.hitPosition;
            damage.force = this.force;
            damage.damageType = this.type;
            damage.senderNetworkObjectId = this.senderNetworkObjectID;
            damage.weaponItemId = this.weaponItemId;
            damage.canCrit = this.canCrit;
            return damage;
        }

        public void SetDamage(float newValue)
        {
            string senderName = Sender == null ? "null" : Sender.name;
            string receiverName = receiver == null ? "null" : receiver.name;
            #if UNITY_EDITOR
            senderName = $"<color=green>{senderName}</color>";
            receiverName = $"<color=red>{receiverName}</color>";
            #endif
            Debug.Log($"[vDamage] SetDamage {senderName} {damageValue}->{newValue} {receiverName}");
            this.damageValue = (int)newValue;
        }
    }

    public class FNvDamage
    {
        public int senderNetworkObjectId;
        public int damageValue;
        public float staminaBlockCost;
        public bool ignoreDefense;
        public float hitHeight;
        public Vector3 hitPosition;
        public Vector3 force;
        public vDamage.DamageType damageType;
        public byte SwingCounter;
        public int abilityId;
        public int weaponItemId;
        public bool canCrit = true;
        
        public FNvDamage() { }
        
        public vDamage ToVDamage()
        {
            vDamage damage = new vDamage();
            if (InstanceFinder.ServerManager.Objects.Spawned.ContainsKey(senderNetworkObjectId))
                damage.Sender = InstanceFinder.ServerManager.Objects.Spawned[senderNetworkObjectId].transform;
            else
            {
                var nob = UnitComponentsManager.GetUnitComponentsServerAndClient(senderNetworkObjectId);
                if (nob == null)
                    Debug.LogError($"[vDamage] Sender with network object id {senderNetworkObjectId} not found.");
                else
                    damage.Sender = nob.HealthController.transform;
            }
            damage.damageValue = this.damageValue;
            damage.staminaBlockCost = this.staminaBlockCost;
            damage.ignoreDefense = this.ignoreDefense;
            damage.hitPosition = this.hitPosition;
            damage.force = this.force;
            damage.type = this.damageType;
            damage.senderNetworkObjectID = this.senderNetworkObjectId;
            damage.SwingCounter = SwingCounter;
            damage.abilityId = abilityId;
            damage.weaponItemId = weaponItemId;
            return damage;
        }
    }
} 



# TASK: vDamageDrawer dont show all fields, please fix