# ROLE:
Unity3D code architect.

# GOAL:
Write specific and detailed code for Unity3D projects.

# BACKSTORY:
You are a Unity 3D Code Writer. You write specific and detailed code for Unity 3D projects in C#.
You provide solutions to coding problems, write scripts for game mechanics, and integrate various assets and systems.
You have a deep understanding of Unity 3D, C#, and game development principles.
You follow best practices for performance optimization, code organization, and version control.
You collaborate closely with the Unity 3D Architect to ensure that the codebase aligns with the overall project architecture.
Stick and balance between with Clean code principles and SOLID principles and 'Clean' Code, Horrible Performance - by Casey Muratori.
Make clean and efficient code, remember that focusing exclusively on either aspect can lead to less optimal results.
Maintaining a good understanding of the trade-offs between readability, maintainability, and performance is crucial.
Keep in mind that NetworkBehaviour constructors are not allowed.
Remember that [SyncObject], [SyncVar] are allowed only in NetworkBehaviour classes.
Always provide FULL CODE of the file just to copy paste code and application should run.
DO NOT write explanations for the code.
DO NOT skip showing fully method where code was changed.
DO NOT provide comments in code.
include file path as first row for example(without quotes): "// Assets\-ZombieRoyale\Scripts\LLM AI\Personality\Personality.cs"
# CODE: // Assets\-ZombieRoyale\Scripts\ServerLogic\Editor\RoomCollapsingTimerEditor.cs:
 using UnityEngine;
using UnityEditor;

[CustomEditor(typeof(RoomCollapsingTimer))]
public class RoomCollapsingTimerEditor : Editor
{
    public override void OnInspectorGUI()
    {
        base.OnInspectorGUI();

        RoomCollapsingTimer roomCollapsingTimer = (RoomCollapsingTimer)target;

        EditorGUILayout.Space();

        if (GUILayout.Button("Activate Lava"))
        {
            roomCollapsingTimer.ActivateLava();
        }
    }
} 

// Assets\-ZombieRoyale\Scripts\ServerLogic\Editor\RoomCollapsingTimerEditor.cs:
 using UnityEngine;
using UnityEditor;

[CustomEditor(typeof(RoomCollapsingTimer))]
public class RoomCollapsingTimerEditor : Editor
{
    public override void OnInspectorGUI()
    {
        base.OnInspectorGUI();

        RoomCollapsingTimer roomCollapsingTimer = (RoomCollapsingTimer)target;

        EditorGUILayout.Space();

        if (GUILayout.Button("Activate Lava"))
        {
            roomCollapsingTimer.ActivateLava();
        }
    }
} 

// Assets\-ZombieRoyale\Scripts\ServerLogic\RoomCollapsingTimer.cs:
 using System;
using System.Collections;
using _ZombieRoyale.Scripts.Core;
using FishNet;
using UnityEngine;

public class RoomCollapsingTimer : MonoBehaviour
{
    private readonly string PROPERTY_FIELD_NAME = "_FinalOpacityPower";
    public static float TIME_ROOM_SPAWN_COLLAPSE_IN = 120f;
    public double ServerUptime => InstanceFinder.TimeManager.TicksToTime(InstanceFinder.TimeManager.Tick);
    [SerializeField] private GameObject lavaFloorFX;
    [SerializeField] private Material floorMaterial;
    public static Action<RoomCollapsingTimer, float> OnCollapsingTimerRoomEnter;
    public static Action<RoomCollapsingTimer, float> OnCollapsingTimerUpdated;
    public static Action<RoomCollapsingTimer> OnCollapsingTimerRoomExit;
    public float CollapsingTime => _collapsingTime;
    [SerializeField] private float _collapsingTime;
    public bool IsInitialized => isInitialized;
    private bool isInitialized;
    private Coroutine _collapsingTimerCoroutine;
    [SerializeField] private DamagingCollider damagingCollider;

    private void OnValidate() => AssignComponentsIfRequired();
    private void AssignComponentsIfRequired()
    {
        damagingCollider ??= GetComponent<DamagingCollider>();
    }

    private void Awake()
    {
        AssignComponentsIfRequired();
        DeactivateLavaEffects();
    }

    private void DeactivateLavaEffects()
    {
        if (lavaFloorFX == null)
            return;
        lavaFloorFX.SetActive(false);
    }

    public bool IsLavaFloorActive
    {
        get
        {
            if (CollapsingTime - GameplayManager.GetCurrentServerTime() < 0)
                return true;
            return false;
        }
    }

    private void OnEnable()
    {
        if (!isInitialized)
            return;

        float timeLeft = _collapsingTime - GameplayManager.GetCurrentServerTime();
        if (timeLeft < 0)
        {
            ActivateLava();
        }
        else
        {
            _collapsingTimerCoroutine = StartCoroutine(CheckLavaActivation(timeLeft));
        }
    }

    private void OnDisable()
    {
        if (!isInitialized)
            return;
        
        if (_collapsingTimerCoroutine != null)
        {
            StopCoroutine(_collapsingTimerCoroutine);
        }
    }

    private IEnumerator CheckLavaActivation(float timeLeft)
    {
        yield return new WaitForSeconds(timeLeft);
        ActivateLava();
    }
    
    public void SetCollapsingTime(float time)
    {
        Debug.Log($"[RoomCollapsingTimer] {gameObject.name} SetCollapsingTime: {time}", gameObject);
        _collapsingTime = time;
        isInitialized = true;
        OnCollapsingTimerUpdated?.Invoke(this, time);
    }

    private void OnTriggerEnter(Collider other)
    {
        if (!GameplayManager.IsOwningPlayer(other))
            return;
        float collapsingTime = TIME_ROOM_SPAWN_COLLAPSE_IN;
        if (_collapsingTime > float.Epsilon)
            collapsingTime = _collapsingTime - GameplayManager.GetCurrentServerTime();
        ShowScreenFX(collapsingTime);
        OnCollapsingTimerRoomEnter?.Invoke(this, collapsingTime);
    }

    private void ShowScreenFX(float timeLeft)
    {
        if (timeLeft < 0f)
        {
            damagingCollider.ShowScreenFXIfRequired();
        }
    }

    // private void OnTriggerStay(Collider other)
    // {
    //     if (!GameplayManager.IsOwningPlayer(other))
    //         return;
    //     
    //     float timeLeft = _collapsingTime - GameplayManager.GetCurrentServerTime();
    //     ShowScreenFX(timeLeft);
    // }

    private void OnTriggerExit(Collider other)
    {
        if (!GameplayManager.IsOwningPlayer(other))
            return;
        
        damagingCollider.HideScreenFXIfRequired();
        OnCollapsingTimerRoomExit?.Invoke(this);
    }

    public void ActivateLava()
    {
        damagingCollider.enabled = true;
        floorMaterial.SetFloat(PROPERTY_FIELD_NAME, 0);
        lavaFloorFX.SetActive(true);
        StartCoroutine(LavaFadeIn());
    }
    
    private IEnumerator LavaFadeIn()
    {
        float time = 0f;
        while (time < 2f)
        {
            time += Time.deltaTime;
            floorMaterial.SetFloat(PROPERTY_FIELD_NAME, time);
            yield return null;
        }
    }
} 



# TASK: add to RoomCollapsingTimerEditor script logic to show info ServerUptime - CollapsingTime before default inspector so I could see debug values