# ROLE:
Unity3D code architect.

# GOAL:
Write specific and detailed code for Unity3D projects.

# BACKSTORY:
You are a Unity 3D Code Writer. You write specific and detailed code for Unity 3D projects in C#.
You provide solutions to coding problems, write scripts for game mechanics, and integrate various assets and systems.
You have a deep understanding of Unity 3D, C#, and game development principles.
You follow best practices for performance optimization, code organization, and version control.
You collaborate closely with the Unity 3D Architect to ensure that the codebase aligns with the overall project architecture.
Stick and balance between with Clean code principles and SOLID principles and 'Clean' Code, Horrible Performance - by Casey Muratori.
Make clean and efficient code, remember that focusing exclusively on either aspect can lead to less optimal results.
Maintaining a good understanding of the trade-offs between readability, maintainability, and performance is crucial.
Keep in mind that NetworkBehaviour constructors are not allowed.
Remember that [SyncObject], [SyncVar] are allowed only in NetworkBehaviour classes.
Always provide FULL CODE of the file just to copy paste code and application should run.
DO NOT write explanations for the code.
DO NOT skip showing fully method where code was changed.
DO NOT provide comments in code.
# CODE: // Assets\-ZombieRoyale\Scripts\AI\Editor\EnemyDefinitionEditor.cs:
 using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System.Text;
using Custom.Scripts.Melee;

// Make sure this script is placed under an Editor folder.
[CustomEditor(typeof(EnemyDefinition))]
public class EnemyDefinitionEditor : Editor
{
    EnemyDefinition enemyDef;
    public void OnEnable()
    {
        enemyDef = (EnemyDefinition)target;
        FindAndAssignMeleeAttackDatas(enemyDef);
    }

    public override void OnInspectorGUI()
    {
        // Draw the default inspector
        DrawDefaultInspector();

        // Generate the JSON representation of the necessary information
        string json = enemyDef.GetJsonRepresentation();

        // Draw a text area with the JSON representation
        GUIStyle textAreaStyle = new GUIStyle(EditorStyles.textArea);
        textAreaStyle.wordWrap = true;
        EditorGUILayout.LabelField("JSON Representation:", EditorStyles.boldLabel);
        EditorGUILayout.TextArea(json, textAreaStyle, GUILayout.MinHeight(45));
    }
    
    private void FindAndAssignMeleeAttackDatas(EnemyDefinition enemyDef)
    {
        if (enemyDef.meleeAttackDatas != null && enemyDef.meleeAttackDatas.Length > 0)
        {
            return; // MeleeAttackDatas are already assigned
        }

        // Find the MeleeAttackDataLibrary asset
        MeleeAttackDataLibrary library = AssetDatabase.LoadAssetAtPath<MeleeAttackDataLibrary>("Assets/FishNet Invector/Scripts/Non-networked/MeleeAttackDatas/MeleeAttackDataLibrary.asset");
        if (library == null)
        {
            Debug.LogError("MeleeAttackDataLibrary not found at the specified path.");
            return;
        }

        List<MeleeAttackData> matchingAttackDatas = new List<MeleeAttackData>();

        // Get the EnemyDefinition name
        string enemyName = enemyDef.Name;

        // Loop through all MeleeAttacks in the library
        foreach (MeleeAttackData attackData in library.meleeAttacks)
        {
            // Check if the attack data name contains the enemy name
            if (attackData.name.Contains(enemyName, StringComparison.OrdinalIgnoreCase))
            {
                matchingAttackDatas.Add(attackData);
            }
        }

        // Assign the matching MeleeAttackDatas to the EnemyDefinition
        if (matchingAttackDatas.Count > 0)
        {
            SerializedObject serializedObject = new SerializedObject(enemyDef);
            SerializedProperty meleeAttackDatasProperty = serializedObject.FindProperty("meleeAttackDatas");
            meleeAttackDatasProperty.arraySize = matchingAttackDatas.Count;

            for (int i = 0; i < matchingAttackDatas.Count; i++)
            {
                meleeAttackDatasProperty.GetArrayElementAtIndex(i).objectReferenceValue = matchingAttackDatas[i];
            }

            serializedObject.ApplyModifiedProperties();
            Debug.Log($"Assigned {matchingAttackDatas.Count} MeleeAttackDatas to {enemyDef.Name}");
        }
        else
        {
            Debug.LogWarning($"No matching MeleeAttackDatas found for {enemyDef.Name}");
        }
    }
} 



# TASK: generate quality of life methods that will be handy into EnemyDefinitionEditor