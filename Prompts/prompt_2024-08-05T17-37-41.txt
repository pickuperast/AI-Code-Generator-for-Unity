# ROLE:
Unity3D code architect.

# GOAL:
Write specific and detailed code for Unity3D projects.

# BACKSTORY:
You are a Unity 3D Code Writer. You write specific and detailed code for Unity 3D projects in C#.
You provide solutions to coding problems, write scripts for game mechanics, and integrate various assets and systems.
You have a deep understanding of Unity 3D, C#, and game development principles.
You follow best practices for performance optimization, code organization, and version control.
You collaborate closely with the Unity 3D Architect to ensure that the codebase aligns with the overall project architecture.
Stick and balance between with Clean code principles and SOLID principles and 'Clean' Code, Horrible Performance - by Casey Muratori.
Make clean and efficient code, remember that focusing exclusively on either aspect can lead to less optimal results.
Maintaining a good understanding of the trade-offs between readability, maintainability, and performance is crucial.
Keep in mind that NetworkBehaviour constructors are not allowed.
Remember that [SyncObject], [SyncVar] are allowed only in NetworkBehaviour classes.
Always provide FULL CODE of the file just to copy paste code and application should run.
DO NOT write explanations for the code.
DO NOT skip showing fully method where code was changed.
DO NOT provide comments in code.
include file path as first row for example(without quotes): "// Assets\-ZombieRoyale\Scripts\LLM AI\Personality\Personality.cs"
# CODE: // Assets\Sanat\CodeGenerator\ApiGemini\ApiGemini.cs:
 // Assets\Sanat\CodeGenerator\ApiGemini\ApiGemini.cs
 using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Networking;

namespace Sanat.ApiGemini
{
    public static class Gemini
    {
        public static string BaseURL { get; set; } = "https://us-central1-aiplatform.googleapis.com/v1/";
        public static string BaseURL2 { get; set; } = "https://generativelanguage.googleapis.com/v1beta/models/";
        public const string PREFS_GEMINI_PROJECT_NAME = "GeminiProjectName";
        public static string TextToSpeechURL = "https://texttospeech.googleapis.com/v1/text:synthesize";
        public static string GetGeminiProjectName()
        {
            return PlayerPrefs.GetString(PREFS_GEMINI_PROJECT_NAME, "");
        }

        public static UnityWebRequestAsyncOperation SubmitChatAsync(
            string apiKey, 
            string model, 
            float temperature, 
            int maxTokens,
            List<ChatMessage> messages, 
            Action<string> callback)
        {
            var chatRequest = new ChatRequest(messages[0].content, temperature);
            string jsonData = JsonUtility.ToJson(chatRequest);
            string generatedUrl = $"{BaseURL2}{model}:generateContent?key={apiKey}";
            UnityWebRequest webRequest = CreateWebRequest(apiKey, generatedUrl, jsonData);

            UnityWebRequestAsyncOperation asyncOp = webRequest.SendWebRequest();
            asyncOp.completed += (op) =>
            {
                var success = webRequest.result == UnityWebRequest.Result.Success;
                var text = success ? webRequest.downloadHandler.text : string.Empty;
                if (!success) Debug.Log($"{webRequest.error} {apiKey}\n{webRequest.downloadHandler.text}");
                webRequest.Dispose();

                if (!string.IsNullOrEmpty(text))
                {
                    var responseData = JsonUtility.FromJson<ChatResponse>(text);
                    if (responseData.candidates != null && responseData.candidates.Count > 0)
                    {
                        text = responseData.candidates[0].content.parts[0].text.Trim();
                    }
                    else
                    {
                        text = "No candidates found in response.";
                    }

                    var tokensPrompt = responseData.usageMetadata.promptTokenCount;
                    var tokensCompletion = responseData.usageMetadata.candidatesTokenCount;
                    var tokensTotal = responseData.usageMetadata.totalTokenCount;

                    Debug.Log($"{model} Usage: prompt_tokens: {tokensPrompt}; completion_tokens: {tokensCompletion}; total_tokens: {tokensTotal}");
                }
                callback?.Invoke(text);
            };

            return asyncOp;
        }

        public static UnityWebRequest CreateWebRequest(string apiKey, string url, string jsonData)
        {
            byte[] postData = System.Text.Encoding.UTF8.GetBytes(jsonData);
            UnityWebRequest webRequest = new UnityWebRequest(url, "POST")
            {
                uploadHandler = new UploadHandlerRaw(postData),
                downloadHandler = new DownloadHandlerBuffer(),
                disposeUploadHandlerOnDispose = true,
                disposeDownloadHandlerOnDispose = true
            };
            webRequest.SetRequestHeader("Content-Type", "application/json");

            return webRequest;
        }

        public static void GenerateTextToSpeech(string text, string languageCode, string name, string ssmlGender, Action<AudioClip> callback)
        {
            var request = new TextToSpeechRequest(text, languageCode, name, ssmlGender);
            string jsonData = JsonUtility.ToJson(request);
            UnityWebRequest webRequest = CreateWebRequest(GetGeminiProjectName(), TextToSpeechURL, jsonData);

            UnityWebRequestAsyncOperation asyncOp = webRequest.SendWebRequest();
            asyncOp.completed += (op) =>
            {
                var success = webRequest.result == UnityWebRequest.Result.Success;
                if (!success)
                {
                    Debug.Log($"{webRequest.error} {GetGeminiProjectName()}\n{webRequest.downloadHandler.text}");
                    callback?.Invoke(null);
                    return;
                }
                
                var audioData = webRequest.downloadHandler.data;
                float[] floatData = ConvertByteToFloatArray(audioData);
                AudioClip audioClip = AudioClip.Create("TextToSpeech", floatData.Length, 1, 44100, false);
                audioClip.SetData(floatData, 0);
                callback?.Invoke(audioClip);
            };
        }

        private static float[] ConvertByteToFloatArray(byte[] byteArray)
        {
            int floatArrayLength = byteArray.Length / 4;
            float[] floatArray = new float[floatArrayLength];
            for (int i = 0; i < floatArrayLength; i++)
            {
                floatArray[i] = BitConverter.ToSingle(byteArray, i * 4);
            }
            return floatArray;
        }
    }

    [Serializable]
    public class TextToSpeechRequest
    {
        public Input input;
        public Voice voice;
        public AudioConfig audioConfig;

        public TextToSpeechRequest(string text, string languageCode, string name, string ssmlGender)
        {
            input = new Input { text = text };
            voice = new Voice { languageCode = languageCode, name = name, ssmlGender = ssmlGender };
            audioConfig = new AudioConfig { audioEncoding = "MP3" };
        }
    }

    [Serializable]
    public class Input
    {
        public string text;
    }

    [Serializable]
    public class Voice
    {
        public string languageCode;
        public string name;
        public string ssmlGender;
    }

    [Serializable]
    public class AudioConfig
    {
        public string audioEncoding;
    }

    [Serializable]
    public class ChatRequest
    {
        public Contents contents;
        public SafetySettings safety_settings;
        public GenerationConfig generation_config;

        public ChatRequest(string message, float temperature)
        {
            contents = new Contents
            {
                role = "user",
                parts = new Parts { text = message }
            };
            safety_settings = new SafetySettings
            {
                category = "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                threshold = "BLOCK_LOW_AND_ABOVE"
            };
            generation_config = new GenerationConfig
            {
                temperature = temperature,
                topP = 0.8f,
                topK = 40
            };
        }
    }
} 

// Assets\Sanat\CodeGenerator\ApiGemini\ApiGeminiClasses.cs:
 using System;
using System.Collections.Generic;

namespace Sanat.ApiGemini
{
    [Serializable]
    public class ChatMessage
    {
        public string role;
        public string content;

        public ChatMessage(string role, string content)
        {
            this.role = role;
            this.content = content;
        }
    }

    [Serializable]
    public class ChatResponse
    {
        public List<Candidate> candidates;
        public UsageMetadata usageMetadata;
    }

    [Serializable]
    public class Candidate
    {
        public Content content;
        public string finishReason;
        public List<SafetyRating> safetyRatings;
    }

    [Serializable]
    public class Contents
    {
        public string role;
        public Parts parts;
    }

    [Serializable]
    public class Parts
    {
        public string text;
    }

    [Serializable]
    public class SafetySettings
    {
        public string category;
        public string threshold;
    }

    public enum BlockReason
    {
        BLOCKED_REASON_UNSPECIFIED,
        OTHER,
        SAFETY
    }

    public enum ExecutableCodeLanguage
    {
        LANGUAGE_UNSPECIFIED,
        PYTHON
    }

    public enum FinishReason
    {
        FINISH_REASON_UNSPECIFIED,
        LANGUAGE,
        MAX_TOKENS,
        OTHER,
        RECITATION,
        SAFETY,
        STOP
    }

    public enum FunctionCallingMode
    {
        ANY,
        AUTO,
        MODE_UNSPECIFIED,
        NONE
    }

    public enum FunctionDeclarationSchemaType
    {
        ARRAY,
        BOOLEAN,
        INTEGER,
        NUMBER,
        OBJECT,
        STRING
    }

    public enum HarmBlockThreshold
    {
        BLOCK_LOW_AND_ABOVE,
        BLOCK_MEDIUM_AND_ABOVE,
        BLOCK_NONE,
        BLOCK_ONLY_HIGH,
        HARM_BLOCK_THRESHOLD_UNSPECIFIED
    }

    public enum HarmCategory
    {
        HARM_CATEGORY_DANGEROUS_CONTENT,
        HARM_CATEGORY_HARASSMENT,
        HARM_CATEGORY_HATE_SPEECH,
        HARM_CATEGORY_SEXUALLY_EXPLICIT,
        HARM_CATEGORY_UNSPECIFIED
    }

    public enum HarmProbability
    {
        HARM_PROBABILITY_UNSPECIFIED,
        HIGH,
        LOW,
        MEDIUM,
        NEGLIGIBLE
    }

    public enum Outcome
    {
        OUTCOME_DEADLINE_EXCEEDED,
        OUTCOME_FAILED,
        OUTCOME_OK,
        OUTCOME_UNSPECIFIED
    }

    public enum TaskType
    {
        CLASSIFICATION,
        CLUSTERING,
        RETRIEVAL_DOCUMENT,
        RETRIEVAL_QUERY,
        SEMANTIC_SIMILARITY,
        TASK_TYPE_UNSPECIFIED
    }

    public class BaseParams
    {
        public GenerationConfig GenerationConfig;
        public List<SafetySetting> SafetySettings;
    }

    public class BatchEmbedContentsRequest
    {
        public List<EmbedContentRequest> Requests;
    }

    public class BatchEmbedContentsResponse
    {
        public List<ContentEmbedding> Embeddings;
    }

    public class CachedContent : CachedContentBase
    {
        public string CreateTime;
        public string Name;
        public string Ttl;
        public string UpdateTime;
    }

    public class CachedContentBase
    {
        public List<Content> Contents;
        public string DisplayName;
        public string ExpireTime;
        public string Model;
        public string SystemInstruction;
        public ToolConfig ToolConfig;
        public List<Tool> Tools;
    }

    public class CitationMetadata
    {
        public List<CitationSource> CitationSources;
    }

    public class CitationSource
    {
        public int EndIndex;
        public string License;
        public int StartIndex;
        public string Uri;
    }

    public class CodeExecutionResult
    {
        public Outcome Outcome;
        public string Output;
    }

    public class ContentEmbedding
    {
        public List<float> Values;
    }

    public class CountTokensRequest
    {
        public List<Content> Contents;
        public GenerateContentRequest GenerateContentRequest;
    }

    public class CountTokensResponse
    {
        public int TotalTokens;
    }

    public class EmbedContentRequest
    {
        public Content Content;
        public TaskType TaskType;
        public string Title;
    }

    public class EmbedContentResponse
    {
        public ContentEmbedding Embedding;
    }

    public class ExecutableCode
    {
        public string Code;
        public ExecutableCodeLanguage Language;
    }

    public class FileData
    {
        public string FileUri;
        public string MimeType;
    }

    public class FunctionCall
    {
        public object Args;
        public string Name;
    }

    public class FunctionCallingConfig
    {
        public List<string> AllowedFunctionNames;
        public FunctionCallingMode Mode;
    }

    public class FunctionDeclaration
    {
        public string Description;
        public string Name;
        public FunctionDeclarationSchema Parameters;
    }

    public class FunctionDeclarationSchema
    {
        public string Description;
        public Dictionary<string, FunctionDeclarationSchemaProperty> Properties;
        public List<string> Required;
        public FunctionDeclarationSchemaType Type;
    }

    public class FunctionDeclarationSchemaProperty : Schema
    {
    }

    public class FunctionResponse
    {
        public string Name;
        public object Response;
    }

    public class GenerateContentCandidate
    {
        public CitationMetadata CitationMetadata;
        public Content Content;
        public string FinishMessage;
        public FinishReason FinishReason;
        public int Index;
        public List<SafetyRating> SafetyRatings;
    }

    public class GenerateContentRequest : BaseParams
    {
        public string CachedContent;
        public List<Content> Contents;
        public string SystemInstruction;
        public ToolConfig ToolConfig;
        public List<Tool> Tools;
    }

    public class GenerateContentResponse
    {
        public List<GenerateContentCandidate> Candidates;
        public PromptFeedback PromptFeedback;
        public UsageMetadata UsageMetadata;
    }

    [Serializable]
    public class GenerationConfig
    {
        public int candidateCount;
        public int maxOutputTokens;
        public string responseMimeType;
        public ResponseSchema responseSchema;
        public List<string> stopSequences;
        public float temperature;
        public int topK;
        public float topP;
    }

    public class GenerativeContentBlob
    {
        public string Data;
        public string MimeType;
    }

    public class PromptFeedback
    {
        public BlockReason BlockReason;
        public string BlockReasonMessage;
        public List<SafetyRating> SafetyRatings;
    }

    public class ResponseSchema : Schema
    {
    }

    [Serializable]
    public class SafetyRating
    {
        public HarmCategory Category;
        public HarmProbability Probability;
    }

    [Serializable]
    public class SafetySetting
    {
        public HarmCategory Category;
        public HarmBlockThreshold Threshold;
    }

    public class Schema
    {
        public string Description;
        public List<string> Enum;
        public object Example;
        public string Format;
        public FunctionDeclarationSchema Items;
        public bool Nullable;
        public Dictionary<string, FunctionDeclarationSchema> Properties;
        public List<string> Required;
        public FunctionDeclarationSchemaType Type;
    }

    public class ToolConfig
    {
        public FunctionCallingConfig FunctionCallingConfig;
    }

    [Serializable]
    public class Part
    {
        public string text;
        public GenerativeContentBlob InlineData;
        public FunctionCall FunctionCall;
        public FunctionResponse FunctionResponse;
        public FileData FileData;
        public ExecutableCode ExecutableCode;
        public CodeExecutionResult CodeExecutionResult;
    }

    public class Tool
    {
        public List<FunctionDeclaration> FunctionDeclarations;
        public object CodeExecution;
    }

    [Serializable]
    public class Content
    {
        public List<Part> parts;
        public string role;
    }

    [Serializable]
    public class UsageMetadata
    {
        public int cachedContentTokenCount;
        public int promptTokenCount;
        public int candidatesTokenCount;
        public int totalTokenCount;
    }
} 

// Assets\Sanat\CodeGenerator\ApiGemini\ApiGeminiClasses.cs:
 using System;
using System.Collections.Generic;

namespace Sanat.ApiGemini
{
    [Serializable]
    public class ChatMessage
    {
        public string role;
        public string content;

        public ChatMessage(string role, string content)
        {
            this.role = role;
            this.content = content;
        }
    }

    [Serializable]
    public class ChatResponse
    {
        public List<Candidate> candidates;
        public UsageMetadata usageMetadata;
    }

    [Serializable]
    public class Candidate
    {
        public Content content;
        public string finishReason;
        public List<SafetyRating> safetyRatings;
    }

    [Serializable]
    public class Contents
    {
        public string role;
        public Parts parts;
    }

    [Serializable]
    public class Parts
    {
        public string text;
    }

    [Serializable]
    public class SafetySettings
    {
        public string category;
        public string threshold;
    }

    public enum BlockReason
    {
        BLOCKED_REASON_UNSPECIFIED,
        OTHER,
        SAFETY
    }

    public enum ExecutableCodeLanguage
    {
        LANGUAGE_UNSPECIFIED,
        PYTHON
    }

    public enum FinishReason
    {
        FINISH_REASON_UNSPECIFIED,
        LANGUAGE,
        MAX_TOKENS,
        OTHER,
        RECITATION,
        SAFETY,
        STOP
    }

    public enum FunctionCallingMode
    {
        ANY,
        AUTO,
        MODE_UNSPECIFIED,
        NONE
    }

    public enum FunctionDeclarationSchemaType
    {
        ARRAY,
        BOOLEAN,
        INTEGER,
        NUMBER,
        OBJECT,
        STRING
    }

    public enum HarmBlockThreshold
    {
        BLOCK_LOW_AND_ABOVE,
        BLOCK_MEDIUM_AND_ABOVE,
        BLOCK_NONE,
        BLOCK_ONLY_HIGH,
        HARM_BLOCK_THRESHOLD_UNSPECIFIED
    }

    public enum HarmCategory
    {
        HARM_CATEGORY_DANGEROUS_CONTENT,
        HARM_CATEGORY_HARASSMENT,
        HARM_CATEGORY_HATE_SPEECH,
        HARM_CATEGORY_SEXUALLY_EXPLICIT,
        HARM_CATEGORY_UNSPECIFIED
    }

    public enum HarmProbability
    {
        HARM_PROBABILITY_UNSPECIFIED,
        HIGH,
        LOW,
        MEDIUM,
        NEGLIGIBLE
    }

    public enum Outcome
    {
        OUTCOME_DEADLINE_EXCEEDED,
        OUTCOME_FAILED,
        OUTCOME_OK,
        OUTCOME_UNSPECIFIED
    }

    public enum TaskType
    {
        CLASSIFICATION,
        CLUSTERING,
        RETRIEVAL_DOCUMENT,
        RETRIEVAL_QUERY,
        SEMANTIC_SIMILARITY,
        TASK_TYPE_UNSPECIFIED
    }

    public class BaseParams
    {
        public GenerationConfig GenerationConfig;
        public List<SafetySetting> SafetySettings;
    }

    public class BatchEmbedContentsRequest
    {
        public List<EmbedContentRequest> Requests;
    }

    public class BatchEmbedContentsResponse
    {
        public List<ContentEmbedding> Embeddings;
    }

    public class CachedContent : CachedContentBase
    {
        public string CreateTime;
        public string Name;
        public string Ttl;
        public string UpdateTime;
    }

    public class CachedContentBase
    {
        public List<Content> Contents;
        public string DisplayName;
        public string ExpireTime;
        public string Model;
        public string SystemInstruction;
        public ToolConfig ToolConfig;
        public List<Tool> Tools;
    }

    public class CitationMetadata
    {
        public List<CitationSource> CitationSources;
    }

    public class CitationSource
    {
        public int EndIndex;
        public string License;
        public int StartIndex;
        public string Uri;
    }

    public class CodeExecutionResult
    {
        public Outcome Outcome;
        public string Output;
    }

    public class ContentEmbedding
    {
        public List<float> Values;
    }

    public class CountTokensRequest
    {
        public List<Content> Contents;
        public GenerateContentRequest GenerateContentRequest;
    }

    public class CountTokensResponse
    {
        public int TotalTokens;
    }

    public class EmbedContentRequest
    {
        public Content Content;
        public TaskType TaskType;
        public string Title;
    }

    public class EmbedContentResponse
    {
        public ContentEmbedding Embedding;
    }

    public class ExecutableCode
    {
        public string Code;
        public ExecutableCodeLanguage Language;
    }

    public class FileData
    {
        public string FileUri;
        public string MimeType;
    }

    public class FunctionCall
    {
        public object Args;
        public string Name;
    }

    public class FunctionCallingConfig
    {
        public List<string> AllowedFunctionNames;
        public FunctionCallingMode Mode;
    }

    public class FunctionDeclaration
    {
        public string Description;
        public string Name;
        public FunctionDeclarationSchema Parameters;
    }

    public class FunctionDeclarationSchema
    {
        public string Description;
        public Dictionary<string, FunctionDeclarationSchemaProperty> Properties;
        public List<string> Required;
        public FunctionDeclarationSchemaType Type;
    }

    public class FunctionDeclarationSchemaProperty : Schema
    {
    }

    public class FunctionResponse
    {
        public string Name;
        public object Response;
    }

    public class GenerateContentCandidate
    {
        public CitationMetadata CitationMetadata;
        public Content Content;
        public string FinishMessage;
        public FinishReason FinishReason;
        public int Index;
        public List<SafetyRating> SafetyRatings;
    }

    public class GenerateContentRequest : BaseParams
    {
        public string CachedContent;
        public List<Content> Contents;
        public string SystemInstruction;
        public ToolConfig ToolConfig;
        public List<Tool> Tools;
    }

    public class GenerateContentResponse
    {
        public List<GenerateContentCandidate> Candidates;
        public PromptFeedback PromptFeedback;
        public UsageMetadata UsageMetadata;
    }

    [Serializable]
    public class GenerationConfig
    {
        public int candidateCount;
        public int maxOutputTokens;
        public string responseMimeType;
        public ResponseSchema responseSchema;
        public List<string> stopSequences;
        public float temperature;
        public int topK;
        public float topP;
    }

    public class GenerativeContentBlob
    {
        public string Data;
        public string MimeType;
    }

    public class PromptFeedback
    {
        public BlockReason BlockReason;
        public string BlockReasonMessage;
        public List<SafetyRating> SafetyRatings;
    }

    public class ResponseSchema : Schema
    {
    }

    [Serializable]
    public class SafetyRating
    {
        public HarmCategory Category;
        public HarmProbability Probability;
    }

    [Serializable]
    public class SafetySetting
    {
        public HarmCategory Category;
        public HarmBlockThreshold Threshold;
    }

    public class Schema
    {
        public string Description;
        public List<string> Enum;
        public object Example;
        public string Format;
        public FunctionDeclarationSchema Items;
        public bool Nullable;
        public Dictionary<string, FunctionDeclarationSchema> Properties;
        public List<string> Required;
        public FunctionDeclarationSchemaType Type;
    }

    public class ToolConfig
    {
        public FunctionCallingConfig FunctionCallingConfig;
    }

    [Serializable]
    public class Part
    {
        public string text;
        public GenerativeContentBlob InlineData;
        public FunctionCall FunctionCall;
        public FunctionResponse FunctionResponse;
        public FileData FileData;
        public ExecutableCode ExecutableCode;
        public CodeExecutionResult CodeExecutionResult;
    }

    public class Tool
    {
        public List<FunctionDeclaration> FunctionDeclarations;
        public object CodeExecution;
    }

    [Serializable]
    public class Content
    {
        public List<Part> parts;
        public string role;
    }

    [Serializable]
    public class UsageMetadata
    {
        public int cachedContentTokenCount;
        public int promptTokenCount;
        public int candidatesTokenCount;
        public int totalTokenCount;
    }
} 



# TASK: Implement missing structs for tools functionality to Api from documentation:
Function declarations
When you implement function calling in a prompt, you create a tools object, which contains one or more function declarations. You define functions using JSON, specifically with a select subset of the OpenAPI schema format. A single function declaration can include the following parameters:

name (string): The unique identifier for the function within the API call.
description (string): A comprehensive explanation of the function's purpose and capabilities.
parameters (object): Defines the input data required by the function.
type (string): Specifies the overall data type, such as object.
properties (object): Lists individual parameters, each with:
type (string): The data type of the parameter, such as string, integer, boolean.
description (string): A clear explanation of the parameter's purpose and expected format.
required (array): An array of strings listing the parameter names that are mandatory for the function to operate.
For code examples of a function declaration using cURL commands, see the Function calling examples. For examples and information on creating function declarations for other platforms, see the Function Calling platforms guide.

Best practices for function declarations
Accurately defining your functions is essential when integrating them into your requests. Each function relies on specific parameters that guide its behavior and interaction with the model. The following listing provides guidance on defining the parameters of an individual function in a functions_declarations array.

name: Use clear, descriptive names without space, period (.), or dash (-) characters. Instead, use underscore (_) characters or camel case.

description: Provide detailed, clear, and specific in function descriptions, providing examples if necessary. For example, instead of find theaters, use find theaters based on location and optionally movie title that is currently playing in theaters. Avoid overly broad or ambiguous descriptions.

properties > type: Use strongly typed parameters to reduce model hallucinations. For example, if the parameter values are from a finite set, use an enum field instead of listing the values in the description (e.g., "type": "enum", "values": ["now_playing", "upcoming"]). If the parameter value is always an integer, set the type to integer rather than number.

properties > description: Provide concrete examples and constraints. For example, instead of the location to search, use The city and state, e.g. San Francisco, CA or a zip code e.g. 95616.

For more best practices when using Function Calling, see the Best Practices section.

Function calling mode
You can use the Function Calling mode parameter to modify the execution behavior of the feature. There are three modes available:

AUTO: The default model behavior. The model decides to predict either a function call or a natural language response.
ANY: The model is constrained to always predict a function call. If allowed_function_names is not provided, the model picks from all of the available function declarations. If allowed_function_names is provided, the model picks from the set of allowed functions.
NONE: The model won't predict a function call. In this case, the model behavior is the same as if you don't pass any function declarations.
You can also pass a set of allowed_function_names that, when provided, limits the functions that the model will call. You should only include allowed_function_names when the mode is ANY. Function names should match function declaration names. With the mode set to ANY and the allowed_function_names set, the model will predict a function call from the set of function names provided. The following code snippet from an example request shows how to sets the mode to ANY and specifies a list of allowed functions:


"tool_config": {
  "function_calling_config": {
    "mode": "ANY",
    "allowed_function_names": ["find_theaters", "get_showtimes"]
  },
}
Function calling examples
This section provides example prompts for function calling using cURL commands. The examples include single turn and multiple-turn scenarios, and enabling different function calling modes.

When using cURL commands with this feature, the function and parameter information is included in the tools element. Each function declaration in the tools element contains the function name, and you specify the parameters using an OpenAPI compatible schema, and a function description.

Single-turn example
Single-turn is when you call the language model one time. With function calling, a single-turn use case might be when you provide the model a natural language query and a list of functions. In this case, the model uses the function declaration, which includes the function name, parameters, and description, to predict which function to call and the arguments to call it with.

The following curl sample is an example of passing in a description of a function that returns information about where a movie is playing. Several function declarations are included in the request, such as find_movies and find_theaters.

Single-turn function calling example request


curl https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=$API_KEY \
  -H 'Content-Type: application/json' \
  -d '{
    "contents": {
      "role": "user",
      "parts": {
        "text": "Which theaters in Mountain View show Barbie movie?"
    }
  },
  "tools": [
    {
      "function_declarations": [
        {
          "name": "find_movies",
          "description": "find movie titles currently playing in theaters based on any description, genre, title words, etc.",
          "parameters": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The city and state, e.g. San Francisco, CA or a zip code e.g. 95616"
              },
              "description": {
                "type": "string",
                "description": "Any kind of description including category or genre, title words, attributes, etc."
              }
            },
            "required": [
              "description"
            ]
          }
        },
        {
          "name": "find_theaters",
          "description": "find theaters based on location and optionally movie title which is currently playing in theaters",
          "parameters": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The city and state, e.g. San Francisco, CA or a zip code e.g. 95616"
              },
              "movie": {
                "type": "string",
                "description": "Any movie title"
              }
            },
            "required": [
              "location"
            ]
          }
        },
        {
          "name": "get_showtimes",
          "description": "Find the start times for movies playing in a specific theater",
          "parameters": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The city and state, e.g. San Francisco, CA or a zip code e.g. 95616"
              },
              "movie": {
                "type": "string",
                "description": "Any movie title"
              },
              "theater": {
                "type": "string",
                "description": "Name of the theater"
              },
              "date": {
                "type": "string",
                "description": "Date for requested showtime"
              }
            },
            "required": [
              "location",
              "movie",
              "theater",
              "date"
            ]
          }
        }
      ]
    }
  ]
}'
    
The response to this curl example might be similar to the following.

Single-turn function calling curl example response


[{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "functionCall": {
              "name": "find_theaters",
              "args": {
                "movie": "Barbie",
                "location": "Mountain View, CA"
              }
            }
          }
        ]
      },
      "finishReason": "STOP",
      "safetyRatings": [
        {
          "category": "HARM_CATEGORY_HARASSMENT",
          "probability": "NEGLIGIBLE"
        },
        {
          "category": "HARM_CATEGORY_HATE_SPEECH",
          "probability": "NEGLIGIBLE"
        },
        {
          "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          "probability": "NEGLIGIBLE"
        },
        {
          "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
          "probability": "NEGLIGIBLE"
        }
      ]
    }
  ],
  "usageMetadata": {
    "promptTokenCount": 9,
    "totalTokenCount": 9
  }
}]
    
Single-turn example using ANY mode
The following curl example is similar to the single-turn example, but it sets the mode to ANY:


"tool_config": {
  "function_calling_config": {
    "mode": "ANY"
  },
}
Single-turn function calling using ANY mode (request)


curl https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=$API_KEY \
  -H 'Content-Type: application/json' \
  -d '{
    "contents": {
      "role": "user",
      "parts": {
        "text": "What movies are showing in North Seattle tonight?"
    }
  },
  "tools": [
    {
      "function_declarations": [
        {
          "name": "find_movies",
          "description": "find movie titles currently playing in theaters based on any description, genre, title words, etc.",
          "parameters": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The city and state, e.g. San Francisco, CA or a zip code e.g. 95616"
              },
              "description": {
                "type": "string",
                "description": "Any kind of description including category or genre, title words, attributes, etc."
              }
            },
            "required": [
              "description"
            ]
          }
        },
        {
          "name": "find_theaters",
          "description": "find theaters based on location and optionally movie title which is currently playing in theaters",
          "parameters": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The city and state, e.g. San Francisco, CA or a zip code e.g. 95616"
              },
              "movie": {
                "type": "string",
                "description": "Any movie title"
              }
            },
            "required": [
              "location"
            ]
          }
        },
        {
          "name": "get_showtimes",
          "description": "Find the start times for movies playing in a specific theater",
          "parameters": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The city and state, e.g. San Francisco, CA or a zip code e.g. 95616"
              },
              "movie": {
                "type": "string",
                "description": "Any movie title"
              },
              "theater": {
                "type": "string",
                "description": "Name of the theater"
              },
              "date": {
                "type": "string",
                "description": "Date for requested showtime"
              }
            },
            "required": [
              "location",
              "movie",
              "theater",
              "date"
            ]
          }
        }
      ]
    }
  ],
  "tool_config": {
    "function_calling_config": {
      "mode": "ANY"
    },
  }
}'
    
The response might be similar to the following:

Single-turn function calling using ANY mode (response)


{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "functionCall": {
              "name": "find_movies",
              "args": {
                "description": "",
                "location": "North Seattle, WA"
              }
            }
          }
        ],
        "role": "model"
      },
      "finishReason": "STOP",
      "index": 0,
      "safetyRatings": [
        {
          "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
          "probability": "NEGLIGIBLE"
        },
        {
          "category": "HARM_CATEGORY_HARASSMENT",
          "probability": "NEGLIGIBLE"
        },
        {
          "category": "HARM_CATEGORY_HATE_SPEECH",
          "probability": "NEGLIGIBLE"
        },
        {
          "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          "probability": "NEGLIGIBLE"
        }
      ]
    }
  ],
  "promptFeedback": {
    "safetyRatings": [
      {
        "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
        "probability": "NEGLIGIBLE"
      },
      {
        "category": "HARM_CATEGORY_HATE_SPEECH",
        "probability": "NEGLIGIBLE"
      },
      {
        "category": "HARM_CATEGORY_HARASSMENT",
        "probability": "NEGLIGIBLE"
      },
      {
        "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
        "probability": "NEGLIGIBLE"
      }
    ]
  }
}
    
Single-turn example using ANY mode and allowed functions
The following curl example is similar to the single-turn example, but it sets the mode to ANY and includes a list of allowed functions:


"tool_config": {
  "function_calling_config": {
    "mode": "ANY",
    "allowed_function_names": ["find_theaters", "get_showtimes"]
  },
}
Single-turn function calling using ANY mode and allowed functions (request)


curl https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=$API_KEY \
  -H 'Content-Type: application/json' \
  -d '{
    "contents": {
      "role": "user",
      "parts": {
        "text": "What movies are showing in North Seattle tonight?"
    }
  },
  "tools": [
    {
      "function_declarations": [
        {
          "name": "find_movies",
          "description": "find movie titles currently playing in theaters based on any description, genre, title words, etc.",
          "parameters": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The city and state, e.g. San Francisco, CA or a zip code e.g. 95616"
              },
              "description": {
                "type": "string",
                "description": "Any kind of description including category or genre, title words, attributes, etc."
              }
            },
            "required": [
              "description"
            ]
          }
        },
        {
          "name": "find_theaters",
          "description": "find theaters based on location and optionally movie title which is currently playing in theaters",
          "parameters": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The city and state, e.g. San Francisco, CA or a zip code e.g. 95616"
              },
              "movie": {
                "type": "string",
                "description": "Any movie title"
              }
            },
            "required": [
              "location"
            ]
          }
        },
        {
          "name": "get_showtimes",
          "description": "Find the start times for movies playing in a specific theater",
          "parameters": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The city and state, e.g. San Francisco, CA or a zip code e.g. 95616"
              },
              "movie": {
                "type": "string",
                "description": "Any movie title"
              },
              "theater": {
                "type": "string",
                "description": "Name of the theater"
              },
              "date": {
                "type": "string",
                "description": "Date for requested showtime"
              }
            },
            "required": [
              "location",
              "movie",
              "theater",
              "date"
            ]
          }
        }
      ]
    }
  ],
  "tool_config": {
    "function_calling_config": {
      "mode": "ANY",
      "allowed_function_names": ["find_theaters", "get_showtimes"]
    },
  }
}'
    
The model can't predict the find_movies function, because it's not on the list of allowed functions, so it predicts a different function instead. The response might be similar to the following:

Single-turn function calling using ANY mode and allowed functions (response)


{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "functionCall": {
              "name": "find_theaters",
              "args": {
                "location": "North Seattle, WA",
                "movie": null
              }
            }
          }
        ],
        "role": "model"
      },
      "finishReason": "STOP",
      "index": 0,
      "safetyRatings": [
        {
          "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          "probability": "NEGLIGIBLE"
        },
        {
          "category": "HARM_CATEGORY_HARASSMENT",
          "probability": "NEGLIGIBLE"
        },
        {
          "category": "HARM_CATEGORY_HATE_SPEECH",
          "probability": "NEGLIGIBLE"
        },
        {
          "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
          "probability": "NEGLIGIBLE"
        }
      ]
    }
  ],
  "promptFeedback": {
    "safetyRatings": [
      {
        "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
        "probability": "NEGLIGIBLE"
      },
      {
        "category": "HARM_CATEGORY_HATE_SPEECH",
        "probability": "NEGLIGIBLE"
      },
      {
        "category": "HARM_CATEGORY_HARASSMENT",
        "probability": "NEGLIGIBLE"
      },
      {
        "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
        "probability": "NEGLIGIBLE"
      }
    ]
  }
}