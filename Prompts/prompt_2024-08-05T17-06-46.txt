# ROLE:
Unity3D code architect.

# GOAL:
Write specific and detailed code for Unity3D projects.

# BACKSTORY:
You are a Unity 3D Code Writer. You write specific and detailed code for Unity 3D projects in C#.
You provide solutions to coding problems, write scripts for game mechanics, and integrate various assets and systems.
You have a deep understanding of Unity 3D, C#, and game development principles.
You follow best practices for performance optimization, code organization, and version control.
You collaborate closely with the Unity 3D Architect to ensure that the codebase aligns with the overall project architecture.
Stick and balance between with Clean code principles and SOLID principles and 'Clean' Code, Horrible Performance - by Casey Muratori.
Make clean and efficient code, remember that focusing exclusively on either aspect can lead to less optimal results.
Maintaining a good understanding of the trade-offs between readability, maintainability, and performance is crucial.
Keep in mind that NetworkBehaviour constructors are not allowed.
Remember that [SyncObject], [SyncVar] are allowed only in NetworkBehaviour classes.
Always provide FULL CODE of the file just to copy paste code and application should run.
DO NOT write explanations for the code.
DO NOT skip showing fully method where code was changed.
DO NOT provide comments in code.
include file path as first row for example(without quotes): "// Assets\-ZombieRoyale\Scripts\LLM AI\Personality\Personality.cs"
# CODE: // Assets\Sanat\CodeGenerator\ApiGemini\ApiGemini.cs:
 // Assets\Sanat\CodeGenerator\ApiGemini\ApiGemini.cs
 using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Networking;

namespace Sanat.ApiGemini
{
    public static class Gemini
    {
        public static string BaseURL { get; set; } = "https://us-central1-aiplatform.googleapis.com/v1/";
        public static string BaseURL2 { get; set; } = "https://generativelanguage.googleapis.com/v1beta/models/";
        public const string PREFS_GEMINI_PROJECT_NAME = "GeminiProjectName";
        public static string TextToSpeechURL = "https://texttospeech.googleapis.com/v1/text:synthesize";
        public static string GetGeminiProjectName()
        {
            return PlayerPrefs.GetString(PREFS_GEMINI_PROJECT_NAME, "");
        }

        public static UnityWebRequestAsyncOperation SubmitChatAsync(
            string apiKey, 
            string model, 
            float temperature, 
            int maxTokens,
            List<ChatMessage> messages, 
            Action<string> callback)
        {
            var chatRequest = new ChatRequest(messages[0].content, temperature);
            string jsonData = JsonUtility.ToJson(chatRequest);
            string generatedUrl = $"{BaseURL2}{model}:generateContent?key={apiKey}";
            UnityWebRequest webRequest = CreateWebRequest(apiKey, generatedUrl, jsonData);

            UnityWebRequestAsyncOperation asyncOp = webRequest.SendWebRequest();
            asyncOp.completed += (op) =>
            {
                var success = webRequest.result == UnityWebRequest.Result.Success;
                var text = success ? webRequest.downloadHandler.text : string.Empty;
                if (!success) Debug.Log($"{webRequest.error} {apiKey}\n{webRequest.downloadHandler.text}");
                webRequest.Dispose();

                if (!string.IsNullOrEmpty(text))
                {
                    var responseData = JsonUtility.FromJson<ChatResponse>(text);
                    if (responseData.candidates != null && responseData.candidates.Count > 0)
                    {
                        text = responseData.candidates[0].content.parts[0].text.Trim();
                    }
                    else
                    {
                        text = "No candidates found in response.";
                    }

                    var tokensPrompt = responseData.usageMetadata.promptTokenCount;
                    var tokensCompletion = responseData.usageMetadata.candidatesTokenCount;
                    var tokensTotal = responseData.usageMetadata.totalTokenCount;

                    Debug.Log($"{model} Usage: prompt_tokens: {tokensPrompt}; completion_tokens: {tokensCompletion}; total_tokens: {tokensTotal}");
                }
                callback?.Invoke(text);
            };

            return asyncOp;
        }

        public static UnityWebRequest CreateWebRequest(string apiKey, string url, string jsonData)
        {
            byte[] postData = System.Text.Encoding.UTF8.GetBytes(jsonData);
            UnityWebRequest webRequest = new UnityWebRequest(url, "POST")
            {
                uploadHandler = new UploadHandlerRaw(postData),
                downloadHandler = new DownloadHandlerBuffer(),
                disposeUploadHandlerOnDispose = true,
                disposeDownloadHandlerOnDispose = true
            };
            webRequest.SetRequestHeader("Content-Type", "application/json");

            return webRequest;
        }

        public static void GenerateTextToSpeech(string text, string languageCode, string name, string ssmlGender, Action<AudioClip> callback)
        {
            var request = new TextToSpeechRequest(text, languageCode, name, ssmlGender);
            string jsonData = JsonUtility.ToJson(request);
            UnityWebRequest webRequest = CreateWebRequest(GetGeminiProjectName(), TextToSpeechURL, jsonData);

            UnityWebRequestAsyncOperation asyncOp = webRequest.SendWebRequest();
            asyncOp.completed += (op) =>
            {
                var success = webRequest.result == UnityWebRequest.Result.Success;
                if (!success)
                {
                    Debug.Log($"{webRequest.error} {GetGeminiProjectName()}\n{webRequest.downloadHandler.text}");
                    callback?.Invoke(null);
                    return;
                }
                
                var audioData = webRequest.downloadHandler.data;
                float[] floatData = ConvertByteToFloatArray(audioData);
                AudioClip audioClip = AudioClip.Create("TextToSpeech", floatData.Length, 1, 44100, false);
                audioClip.SetData(floatData, 0);
                callback?.Invoke(audioClip);
            };
        }

        private static float[] ConvertByteToFloatArray(byte[] byteArray)
        {
            int floatArrayLength = byteArray.Length / 4;
            float[] floatArray = new float[floatArrayLength];
            for (int i = 0; i < floatArrayLength; i++)
            {
                floatArray[i] = BitConverter.ToSingle(byteArray, i * 4);
            }
            return floatArray;
        }
    }

    [Serializable]
    public class TextToSpeechRequest
    {
        public Input input;
        public Voice voice;
        public AudioConfig audioConfig;

        public TextToSpeechRequest(string text, string languageCode, string name, string ssmlGender)
        {
            input = new Input { text = text };
            voice = new Voice { languageCode = languageCode, name = name, ssmlGender = ssmlGender };
            audioConfig = new AudioConfig { audioEncoding = "MP3" };
        }
    }

    [Serializable]
    public class Input
    {
        public string text;
    }

    [Serializable]
    public class Voice
    {
        public string languageCode;
        public string name;
        public string ssmlGender;
    }

    [Serializable]
    public class AudioConfig
    {
        public string audioEncoding;
    }

    [Serializable]
    public class ChatRequest
    {
        public Contents contents;
        public SafetySettings safety_settings;
        public GenerationConfig generation_config;

        public ChatRequest(string message, float temperature)
        {
            contents = new Contents
            {
                role = "user",
                parts = new Parts { text = message }
            };
            safety_settings = new SafetySettings
            {
                category = "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                threshold = "BLOCK_LOW_AND_ABOVE"
            };
            generation_config = new GenerationConfig
            {
                Temperature = temperature,
                TopP = 0.8f,
                TopK = 40
            };
        }
    }
} 

// Assets\Sanat\CodeGenerator\ApiGemini\ApiGeminiClasses.cs:
 using System;
using System.Collections.Generic;

namespace Sanat.ApiGemini
{

    [Serializable]
    public class ChatMessage
    {
        public string role;
        public string content;

        public ChatMessage(string role, string content)
        {
            this.role = role;
            this.content = content;
        }
    }

    [Serializable]
    public class ChatResponse
    {
        public List<Candidate> candidates;
        public UsageMetadata usageMetadata;
    }

    [Serializable]
    public class Candidate
    {
        public Content content;
        public string finishReason;
        public List<SafetyRating> safetyRatings;
    }
    

    [Serializable]
    public class Contents
    {
        public string role;
        public Parts parts;
    }

    [Serializable]
    public class Parts
    {
        public string text;
    }

    [Serializable]
    public class SafetySettings
    {
        public string category;
        public string threshold;
    }
    public enum BlockReason
    {
        BLOCKED_REASON_UNSPECIFIED,
        OTHER,
        SAFETY
    }

    public enum ExecutableCodeLanguage
    {
        LANGUAGE_UNSPECIFIED,
        PYTHON
    }

    public enum FinishReason
    {
        FINISH_REASON_UNSPECIFIED,
        LANGUAGE,
        MAX_TOKENS,
        OTHER,
        RECITATION,
        SAFETY,
        STOP
    }

    public enum FunctionCallingMode
    {
        ANY,
        AUTO,
        MODE_UNSPECIFIED,
        NONE
    }

    public enum FunctionDeclarationSchemaType
    {
        ARRAY,
        BOOLEAN,
        INTEGER,
        NUMBER,
        OBJECT,
        STRING
    }

    public enum HarmBlockThreshold
    {
        BLOCK_LOW_AND_ABOVE,
        BLOCK_MEDIUM_AND_ABOVE,
        BLOCK_NONE,
        BLOCK_ONLY_HIGH,
        HARM_BLOCK_THRESHOLD_UNSPECIFIED
    }

    public enum HarmCategory
    {
        HARM_CATEGORY_DANGEROUS_CONTENT,
        HARM_CATEGORY_HARASSMENT,
        HARM_CATEGORY_HATE_SPEECH,
        HARM_CATEGORY_SEXUALLY_EXPLICIT,
        HARM_CATEGORY_UNSPECIFIED
    }

    public enum HarmProbability
    {
        HARM_PROBABILITY_UNSPECIFIED,
        HIGH,
        LOW,
        MEDIUM,
        NEGLIGIBLE
    }

    public enum Outcome
    {
        OUTCOME_DEADLINE_EXCEEDED,
        OUTCOME_FAILED,
        OUTCOME_OK,
        OUTCOME_UNSPECIFIED
    }

    public enum TaskType
    {
        CLASSIFICATION,
        CLUSTERING,
        RETRIEVAL_DOCUMENT,
        RETRIEVAL_QUERY,
        SEMANTIC_SIMILARITY,
        TASK_TYPE_UNSPECIFIED
    }

    public class BaseParams
    {
        GenerationConfig GenerationConfig { get; set; }
        List<SafetySetting> SafetySettings { get; set; }
    }

    public class BatchEmbedContentsRequest
    {
        List<EmbedContentRequest> Requests { get; set; }
    }

    public class BatchEmbedContentsResponse
    {
        List<ContentEmbedding> Embeddings { get; set; }
    }

    public class CachedContent : CachedContentBase
    {
        string CreateTime { get; set; }
        string Name { get; set; }
        string Ttl { get; set; }
        string UpdateTime { get; set; }
    }

    public class CachedContentBase
    {
        List<Content> Contents { get; set; }
        string DisplayName { get; set; }
        string ExpireTime { get; set; }
        string Model { get; set; }
        string SystemInstruction { get; set; }
        ToolConfig ToolConfig { get; set; }
        List<Tool> Tools { get; set; }
    }

    public class CitationMetadata
    {
        List<CitationSource> CitationSources { get; set; }
    }

    public class CitationSource
    {
        int EndIndex { get; set; }
        string License { get; set; }
        int StartIndex { get; set; }
        string Uri { get; set; }
    }

    public class CodeExecutionResult
    {
        Outcome Outcome { get; set; }
        string Output { get; set; }
    }

    public class Content
    {
        List<Part> Parts { get; set; }
        string Role { get; set; }
    }

    public class ContentEmbedding
    {
        List<float> Values { get; set; }
    }

    public class CountTokensRequest
    {
        List<Content> Contents { get; set; }
        GenerateContentRequest GenerateContentRequest { get; set; }
    }

    public class CountTokensResponse
    {
        int TotalTokens { get; set; }
    }

    public class EmbedContentRequest
    {
        Content Content { get; set; }
        TaskType TaskType { get; set; }
        string Title { get; set; }
    }

    public class EmbedContentResponse
    {
        ContentEmbedding Embedding { get; set; }
    }

    public class ExecutableCode
    {
        string Code { get; set; }
        ExecutableCodeLanguage Language { get; set; }
    }

    public class FileData
    {
        string FileUri { get; set; }
        string MimeType { get; set; }
    }

    public class FunctionCall
    {
        object Args { get; set; }
        string Name { get; set; }
    }

    public class FunctionCallingConfig
    {
        List<string> AllowedFunctionNames { get; set; }
        FunctionCallingMode Mode { get; set; }
    }

    public class FunctionDeclaration
    {
        string Description { get; set; }
        string Name { get; set; }
        FunctionDeclarationSchema Parameters { get; set; }
    }

    public class FunctionDeclarationSchema
    {
        string Description { get; set; }
        Dictionary<string, FunctionDeclarationSchemaProperty> Properties { get; set; }
        List<string> Required { get; set; }
        FunctionDeclarationSchemaType Type { get; set; }
    }

    public class FunctionDeclarationSchemaProperty : Schema
    {
    }

    public class FunctionResponse
    {
        string Name { get; set; }
        object Response { get; set; }
    }

    public class GenerateContentCandidate
    {
        CitationMetadata CitationMetadata { get; set; }
        Content Content { get; set; }
        string FinishMessage { get; set; }
        FinishReason FinishReason { get; set; }
        int Index { get; set; }
        List<SafetyRating> SafetyRatings { get; set; }
    }

    public class GenerateContentRequest : BaseParams
    {
        string CachedContent { get; set; }
        List<Content> Contents { get; set; }
        string SystemInstruction { get; set; }
        ToolConfig ToolConfig { get; set; }
        List<Tool> Tools { get; set; }
    }

    public class GenerateContentResponse
    {
        List<GenerateContentCandidate> Candidates { get; set; }
        PromptFeedback PromptFeedback { get; set; }
        UsageMetadata UsageMetadata { get; set; }
    }

    public class GenerationConfig
    {
        int CandidateCount { get; set; }
        int MaxOutputTokens { get; set; }
        string ResponseMimeType { get; set; }
        ResponseSchema ResponseSchema { get; set; }
        List<string> StopSequences { get; set; }
        float Temperature { get; set; }
        int TopK { get; set; }
        float TopP { get; set; }
    }

    public class GenerativeContentBlob
    {
        string Data { get; set; }
        string MimeType { get; set; }
    }

    public class PromptFeedback
    {
        BlockReason BlockReason { get; set; }
        string BlockReasonMessage { get; set; }
        List<SafetyRating> SafetyRatings { get; set; }
    }

    public class ResponseSchema : Schema
    {
    }

    public class SafetyRating
    {
        HarmCategory Category { get; set; }
        HarmProbability Probability { get; set; }
    }

    public class SafetySetting
    {
        HarmCategory Category { get; set; }
        HarmBlockThreshold Threshold { get; set; }
    }

    public class Schema
    {
        string Description { get; set; }
        List<string> Enum { get; set; }
        object Example { get; set; }
        string Format { get; set; }
        FunctionDeclarationSchema Items { get; set; }
        bool Nullable { get; set; }
        Dictionary<string, FunctionDeclarationSchema> Properties { get; set; }
        List<string> Required { get; set; }
        FunctionDeclarationSchemaType Type { get; set; }
    }

    public class ToolConfig
    {
        FunctionCallingConfig FunctionCallingConfig { get; set; }
    }

    public class UsageMetadata
    {
        int CachedContentTokenCount { get; set; }
        int CandidatesTokenCount { get; set; }
        int PromptTokenCount { get; set; }
        int TotalTokenCount { get; set; }
    }

    public class Part
    {
        public string Text { get; set; }
        public GenerativeContentBlob InlineData { get; set; }
        public FunctionCall FunctionCall { get; set; }
        public FunctionResponse FunctionResponse { get; set; }
        public FileData FileData { get; set; }
        public ExecutableCode ExecutableCode { get; set; }
        public CodeExecutionResult CodeExecutionResult { get; set; }
    }

    public class Tool
    {
        public List<FunctionDeclaration> FunctionDeclarations { get; set; }
        public object CodeExecution { get; set; }
    }
} 

// Assets\Sanat\CodeGenerator\ApiGemini\ApiGeminiClasses.cs:
 using System;
using System.Collections.Generic;

namespace Sanat.ApiGemini
{

    [Serializable]
    public class ChatMessage
    {
        public string role;
        public string content;

        public ChatMessage(string role, string content)
        {
            this.role = role;
            this.content = content;
        }
    }

    [Serializable]
    public class ChatResponse
    {
        public List<Candidate> candidates;
        public UsageMetadata usageMetadata;
    }

    [Serializable]
    public class Candidate
    {
        public Content content;
        public string finishReason;
        public List<SafetyRating> safetyRatings;
    }
    

    [Serializable]
    public class Contents
    {
        public string role;
        public Parts parts;
    }

    [Serializable]
    public class Parts
    {
        public string text;
    }

    [Serializable]
    public class SafetySettings
    {
        public string category;
        public string threshold;
    }
    public enum BlockReason
    {
        BLOCKED_REASON_UNSPECIFIED,
        OTHER,
        SAFETY
    }

    public enum ExecutableCodeLanguage
    {
        LANGUAGE_UNSPECIFIED,
        PYTHON
    }

    public enum FinishReason
    {
        FINISH_REASON_UNSPECIFIED,
        LANGUAGE,
        MAX_TOKENS,
        OTHER,
        RECITATION,
        SAFETY,
        STOP
    }

    public enum FunctionCallingMode
    {
        ANY,
        AUTO,
        MODE_UNSPECIFIED,
        NONE
    }

    public enum FunctionDeclarationSchemaType
    {
        ARRAY,
        BOOLEAN,
        INTEGER,
        NUMBER,
        OBJECT,
        STRING
    }

    public enum HarmBlockThreshold
    {
        BLOCK_LOW_AND_ABOVE,
        BLOCK_MEDIUM_AND_ABOVE,
        BLOCK_NONE,
        BLOCK_ONLY_HIGH,
        HARM_BLOCK_THRESHOLD_UNSPECIFIED
    }

    public enum HarmCategory
    {
        HARM_CATEGORY_DANGEROUS_CONTENT,
        HARM_CATEGORY_HARASSMENT,
        HARM_CATEGORY_HATE_SPEECH,
        HARM_CATEGORY_SEXUALLY_EXPLICIT,
        HARM_CATEGORY_UNSPECIFIED
    }

    public enum HarmProbability
    {
        HARM_PROBABILITY_UNSPECIFIED,
        HIGH,
        LOW,
        MEDIUM,
        NEGLIGIBLE
    }

    public enum Outcome
    {
        OUTCOME_DEADLINE_EXCEEDED,
        OUTCOME_FAILED,
        OUTCOME_OK,
        OUTCOME_UNSPECIFIED
    }

    public enum TaskType
    {
        CLASSIFICATION,
        CLUSTERING,
        RETRIEVAL_DOCUMENT,
        RETRIEVAL_QUERY,
        SEMANTIC_SIMILARITY,
        TASK_TYPE_UNSPECIFIED
    }

    public class BaseParams
    {
        GenerationConfig GenerationConfig { get; set; }
        List<SafetySetting> SafetySettings { get; set; }
    }

    public class BatchEmbedContentsRequest
    {
        List<EmbedContentRequest> Requests { get; set; }
    }

    public class BatchEmbedContentsResponse
    {
        List<ContentEmbedding> Embeddings { get; set; }
    }

    public class CachedContent : CachedContentBase
    {
        string CreateTime { get; set; }
        string Name { get; set; }
        string Ttl { get; set; }
        string UpdateTime { get; set; }
    }

    public class CachedContentBase
    {
        List<Content> Contents { get; set; }
        string DisplayName { get; set; }
        string ExpireTime { get; set; }
        string Model { get; set; }
        string SystemInstruction { get; set; }
        ToolConfig ToolConfig { get; set; }
        List<Tool> Tools { get; set; }
    }

    public class CitationMetadata
    {
        List<CitationSource> CitationSources { get; set; }
    }

    public class CitationSource
    {
        int EndIndex { get; set; }
        string License { get; set; }
        int StartIndex { get; set; }
        string Uri { get; set; }
    }

    public class CodeExecutionResult
    {
        Outcome Outcome { get; set; }
        string Output { get; set; }
    }

    public class Content
    {
        List<Part> Parts { get; set; }
        string Role { get; set; }
    }

    public class ContentEmbedding
    {
        List<float> Values { get; set; }
    }

    public class CountTokensRequest
    {
        List<Content> Contents { get; set; }
        GenerateContentRequest GenerateContentRequest { get; set; }
    }

    public class CountTokensResponse
    {
        int TotalTokens { get; set; }
    }

    public class EmbedContentRequest
    {
        Content Content { get; set; }
        TaskType TaskType { get; set; }
        string Title { get; set; }
    }

    public class EmbedContentResponse
    {
        ContentEmbedding Embedding { get; set; }
    }

    public class ExecutableCode
    {
        string Code { get; set; }
        ExecutableCodeLanguage Language { get; set; }
    }

    public class FileData
    {
        string FileUri { get; set; }
        string MimeType { get; set; }
    }

    public class FunctionCall
    {
        object Args { get; set; }
        string Name { get; set; }
    }

    public class FunctionCallingConfig
    {
        List<string> AllowedFunctionNames { get; set; }
        FunctionCallingMode Mode { get; set; }
    }

    public class FunctionDeclaration
    {
        string Description { get; set; }
        string Name { get; set; }
        FunctionDeclarationSchema Parameters { get; set; }
    }

    public class FunctionDeclarationSchema
    {
        string Description { get; set; }
        Dictionary<string, FunctionDeclarationSchemaProperty> Properties { get; set; }
        List<string> Required { get; set; }
        FunctionDeclarationSchemaType Type { get; set; }
    }

    public class FunctionDeclarationSchemaProperty : Schema
    {
    }

    public class FunctionResponse
    {
        string Name { get; set; }
        object Response { get; set; }
    }

    public class GenerateContentCandidate
    {
        CitationMetadata CitationMetadata { get; set; }
        Content Content { get; set; }
        string FinishMessage { get; set; }
        FinishReason FinishReason { get; set; }
        int Index { get; set; }
        List<SafetyRating> SafetyRatings { get; set; }
    }

    public class GenerateContentRequest : BaseParams
    {
        string CachedContent { get; set; }
        List<Content> Contents { get; set; }
        string SystemInstruction { get; set; }
        ToolConfig ToolConfig { get; set; }
        List<Tool> Tools { get; set; }
    }

    public class GenerateContentResponse
    {
        List<GenerateContentCandidate> Candidates { get; set; }
        PromptFeedback PromptFeedback { get; set; }
        UsageMetadata UsageMetadata { get; set; }
    }

    public class GenerationConfig
    {
        int CandidateCount { get; set; }
        int MaxOutputTokens { get; set; }
        string ResponseMimeType { get; set; }
        ResponseSchema ResponseSchema { get; set; }
        List<string> StopSequences { get; set; }
        float Temperature { get; set; }
        int TopK { get; set; }
        float TopP { get; set; }
    }

    public class GenerativeContentBlob
    {
        string Data { get; set; }
        string MimeType { get; set; }
    }

    public class PromptFeedback
    {
        BlockReason BlockReason { get; set; }
        string BlockReasonMessage { get; set; }
        List<SafetyRating> SafetyRatings { get; set; }
    }

    public class ResponseSchema : Schema
    {
    }

    public class SafetyRating
    {
        HarmCategory Category { get; set; }
        HarmProbability Probability { get; set; }
    }

    public class SafetySetting
    {
        HarmCategory Category { get; set; }
        HarmBlockThreshold Threshold { get; set; }
    }

    public class Schema
    {
        string Description { get; set; }
        List<string> Enum { get; set; }
        object Example { get; set; }
        string Format { get; set; }
        FunctionDeclarationSchema Items { get; set; }
        bool Nullable { get; set; }
        Dictionary<string, FunctionDeclarationSchema> Properties { get; set; }
        List<string> Required { get; set; }
        FunctionDeclarationSchemaType Type { get; set; }
    }

    public class ToolConfig
    {
        FunctionCallingConfig FunctionCallingConfig { get; set; }
    }

    public class UsageMetadata
    {
        int CachedContentTokenCount { get; set; }
        int CandidatesTokenCount { get; set; }
        int PromptTokenCount { get; set; }
        int TotalTokenCount { get; set; }
    }

    public class Part
    {
        public string Text { get; set; }
        public GenerativeContentBlob InlineData { get; set; }
        public FunctionCall FunctionCall { get; set; }
        public FunctionResponse FunctionResponse { get; set; }
        public FileData FileData { get; set; }
        public ExecutableCode ExecutableCode { get; set; }
        public CodeExecutionResult CodeExecutionResult { get; set; }
    }

    public class Tool
    {
        public List<FunctionDeclaration> FunctionDeclarations { get; set; }
        public object CodeExecution { get; set; }
    }
} 



# TASK: modify ApiGeminiClasses file, make all fields as public